{
  "title": "init",
  "fileName": "init",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>init</b><p>\r\n</p></font>",
      "mdown_content": "**init**"
    },
    {
      "title": "Description",
      "raw_content": "The <b>init</b> (initialization) keyword is used for two different purposes in Turing. The most common is for initializing arrays, records and unions. The less common is for recording parameter values in subprograms for later use in <b>post</b> conditions.<p>\r\n</p>",
      "mdown_content": "The **init** (initialization) keyword is used for two different purposes in Turing. The most common is for initializing arrays, records and unions. The less common is for recording parameter values in subprograms for later use in **post** conditions."
    },
    {
      "title": "Example",
      "code": [
        "        var mensNames : array 1 .. 3 of string :=\r\n            init ( \"Tom\", \"Dick\", \"Harry\" )\r\n        put mensNames ( 2 )             % This outputs Dick\r\n        var names : array 1 .. 2, 1 .. 3 of string :=\r\n            init ( \"Tom\", \"Dick\", \"Harry\",\r\n                 \"Alice\", \"Barbara\", \"Cathy\")\r\n        put names ( 2, 1 )  % This outputs Alice"
      ],
      "raw_content": "<p>\r\n</p>",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "raw_content": "The order of initializing values for multi-dimensional arrays is based on varying the right subscripts (indexes) most rapidly. This is called <i>row major order</i>. Initialization of records and unions is analogous to initializing arrays. Values are listed in the order in which they appear in the type. See <b>array</b>, <b>record</b>, and <b>union</b> types.<p>\r\n</p>",
      "mdown_content": "The order of initializing values for multi-dimensional arrays is based on varying the right subscripts (indexes) most rapidly. This is called *row major order*. Initialization of records and unions is analogous to initializing arrays. Values are listed in the order in which they appear in the type. See **array**, **record**, and **union** types."
    },
    {
      "title": "Example",
      "code": [
        "        procedure intSqrt ( var i : int )\r\n            pre i >= 0\r\n            init j := i\r\n            post abs ( i - sqrt ( j ) ) <= 1\r\n             statements to approximate square root\r\n        end intSqrt"
      ],
      "raw_content": "This procedure is supposed to set integer variable <i>i</i> to an integer approximation of its square root. The <b>init</b> clause records the initial value of <i>i </i>as <i>j </i>so it can be used in the <b>post</b> condition to make sure that the approximation is sufficiently accurate. The name <i>j </i>can be used only in the post condition and nowhere else in the procedure.<p>\r\n</p>",
      "mdown_content": "This procedure is supposed to set integer variable *i* to an integer approximation of its square root. The **init** clause records the initial value of *i *as *j *so it can be used in the **post** condition to make sure that the approximation is sufficiently accurate. The name *j *can be used only in the post condition and nowhere else in the procedure."
    },
    {
      "title": "See also",
      "links": [
        "pre",
        "post",
        "procedure",
        "process"
      ],
      "raw_content": "<b><a href=\"pre.html\">pre</a></b> and <b><a href=\"post.html\">post</a></b> assertions and <b><a href=\"procedure.html\">procedure</a></b> and <b><a href=\"process.html\">process</a></b> declarations.<p>\r\n</p>",
      "mdown_content": "**[pre.html](pre)** and **[post.html](post)** assertions and **[procedure.html](procedure)** and **[process.html](process)** declarations."
    }
  ]
}
