{
  "title": "Pic.DrawFrames",
  "fileName": "pic_drawframes",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Pic.DrawFrames</b> (<i>picIds</i> : <b>array</b> 1 .. * <b>of int</b>, <i>x</i>, <i>y</i>, <i>mode</i> : <b>int</b>,</font><br><table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>  <td colspan=\"7\"><font size=\"+1\"><i>numFrames</i>, <i>delayBetweenFrames</i> : <b>int</b>, <i>eraseAfter</i> : <b>boolean</b>)</font></td>\n</tr></table>\n<p>\r\n    </p>",
      "mdown_content": "**Pic.DrawFrames** (*picIds* : **array** 1 .. * **of int**, *x*, *y*, *mode* : **int**, \n   *numFrames*, *delayBetweenFrames* : **int**, *eraseAfter* : **boolean**)\n\n"
    },
    {
      "title": "Description",
      "links": [
        "pic_draw"
      ],
      "raw_content": "<b>Pic.DrawFrames</b> is used to draw a set of pictures stored in\r\n          an array of <b>int</b>s.  The pictures are displayed one at a time,\r\n          and there is a delay of <i>delayBetweenFrames</i> milliseconds\r\n          between frames. The <i>x</i>, <i>y</i>, and <i>mode</i> parameters\r\n          are the same as in <b><a href=\"pic_draw.html\">Pic.Draw</a></b>. The\r\n          <i>numFrames</i> parameter specifies the number of frames to be\r\n          drawn (the <i>picIds</i> array must be at least this big).  The\r\n          <i>eraseAfter</i> parameter specifies whether the last frame of the\r\n          animation should be left on the Run window when the call finishes.  \r\n          If <i>eraseAfter</i> is set to <b>true</b>, then the background is \r\n          restored after the last picture has been drawn and \r\n          <i>delayBetweenFrames</i> milliseconds has passed.<p>\r\n    </p>",
      "mdown_content": "**Pic.DrawFrames** is used to draw a set of pictures stored in\nan array of **int**s.  The pictures are displayed one at a time,\nand there is a delay of *delayBetweenFrames* milliseconds\nbetween frames. The *x*, *y*, and *mode* parameters\nare the same as in **[pic_draw.html](Pic.Draw)**. The\n*numFrames* parameter specifies the number of frames to be\ndrawn (the *picIds* array must be at least this big).  The\n*eraseAfter* parameter specifies whether the last frame of the\nanimation should be left on the Run window when the call finishes.  \nIf *eraseAfter* is set to **true**, then the background is \nrestored after the last picture has been drawn and \n*delayBetweenFrames* milliseconds has passed.\n"
    },
    {
      "title": "Details",
      "links": [
        "pic_filenewframes",
        "pic_frames",
        "",
        "pic_drawframesback",
        "",
        "pic_drawframesback",
        "pic_frames"
      ],
      "raw_content": "GIF files can contain multiple frames (pictures).  Animated GIFs \r\n          function by each frame in the GIF one after another with a delay\r\n          between them.\r\n          <p>\r\n          Turing allows users to load multiple frame GIF images into a series\r\n          of pictures into an array using the \r\n          <b><a href=\"pic_filenewframes.html\">Pic.FileNewFrames</a></b> \r\n          procedure.  The user can determine how many frames are found in \r\n          the GIF file using <b><a href=\"pic_frames.html\">Pic.Frames</a></b>.  \r\n          The frames can be sequentially displayed using either \r\n          <b><a href=\"\">Pic.DrawFrames</a></b> or \r\n          <b><a href=\"pic_drawframesback.html\">Pic.DrawFramesBack</a></b> \r\n          which display the images one at a time.\r\n          (<b><a href=\"\">Pic.DrawFrames</a></b> returns \r\n          once all the images have been displayed, \r\n          <b><a href=\"pic_drawframesback.html\">Pic.DrawFramesBack</a></b> \r\n          returns immediately allowing the program to continue execution while \r\n          the frames are being displayed.\r\n          </p>\n<p>\r\n          <b><a href=\"pic_frames.html\">Pic.Frames</a></b> is a function which \r\n          returns the number of frames found in the GIF.  If it is used on a \r\n          GIF that does not contain multiple images, or on a non-GIF image file, \r\n          it returns 1.</p>\n<p>\r\n    </p>",
      "mdown_content": "GIF files can contain multiple frames (pictures).  Animated GIFs \nfunction by each frame in the GIF one after another with a delay\nbetween them.\n\nTuring allows users to load multiple frame GIF images into a series\nof pictures into an array using the \n**[pic_filenewframes.html](Pic.FileNewFrames)** \nprocedure.  The user can determine how many frames are found in \nthe GIF file using **[pic_frames.html](Pic.Frames)**.  \nThe frames can be sequentially displayed using either \n**[](Pic.DrawFrames)** or \n**[pic_drawframesback.html](Pic.DrawFramesBack)** \nwhich display the images one at a time.\n(**[](Pic.DrawFrames)** returns \nonce all the images have been displayed, \n**[pic_drawframesback.html](Pic.DrawFramesBack)** \nreturns immediately allowing the program to continue execution while \nthe frames are being displayed.\n\n\n**[pic_frames.html](Pic.Frames)** is a function which \nreturns the number of frames found in the GIF.  If it is used on a \nGIF that does not contain multiple images, or on a non-GIF image file, \nit returns 1.\n\n"
    },
    {
      "title": "Example",
      "code": [
        "        % Determine the number of frames in \"globe.gif\"\r\n        var numFrames := Pic.Frames (\"globe.gif\")\r\n        % Load the picture\r\n        var delayTime : int\r\n        var pics : array 1 .. numFrames of int\r\n\r\n\tPic.FileNewFrames (\"globe.gif\", pics, delayTime)\r\n\tPic.DrawFrames (pics, 10, 10, picCopy, numFrames, 50, false)\r\n\tfor i : 1 .. numFramesPic.Free (pics (i))\r\n\tend for\r\n    "
      ],
      "raw_content": "The program loads a multiple frame GIF called \"globe.gif\" and \r\n          displays it.",
      "mdown_content": "The program loads a multiple frame GIF called \"globe.gif\" and \ndisplays it."
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Pic.DrawFrames Example",
          "file": "Pic.DrawFrames.t"
        }
      ]
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n\t  This means that you can only call the function by calling \r\n\t  <b>Pic.DrawFrames</b>, not by calling <b>DrawFrames</b>.</p>\n<p>\r\n    </p>",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling \n**Pic.DrawFrames**, not by calling **DrawFrames**.\n\n"
    },
    {
      "title": "See also",
      "links": [
        "pic_frames",
        "pic_filenewframes",
        "pic_drawframesback"
      ],
      "raw_content": "<b><a href=\"pic_frames.html\">Pic.Frames</a></b> for information on how\r\n          to determine the number of frames in a GIF image.<p>\r\n          <b><a href=\"pic_filenewframes.html\">Pic.FileNewFrames</a></b> for information\r\n          on how to load a GIF image with multiple frames into an array of \r\n          <b>int</b>s.</p>\n<p>\r\n          <b><a href=\"pic_drawframesback.html\">Pic.DrawFramesBack</a></b> for \r\n          information on how to sequentially display the images stored in array \r\n          of pictures while continuing to execute the program.</p>\n<p>\r\n    </p>",
      "mdown_content": "**[pic_frames.html](Pic.Frames)** for information on how\nto determine the number of frames in a GIF image.\n**[pic_filenewframes.html](Pic.FileNewFrames)** for information\non how to load a GIF image with multiple frames into an array of \n**int**s.\n\n**[pic_drawframesback.html](Pic.DrawFramesBack)** for \ninformation on how to sequentially display the images stored in array \nof pictures while continuing to execute the program.\n\n"
    }
  ]
}
