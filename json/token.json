{
  "title": "token",
  "fileName": "token",
  "sections": [
    {
      "title": "Description",
      "code": [
        "        get incomeTax"
      ],
      "raw_content": "A <i>token</i> is essentially a word, a number or a special symbol such as :=. In a Turing program there are four kinds of tokens: keywords such as <b>get</b>, identifiers such as <i>incomeTax</i>, operators and special symbols, such as <b>+</b> and :=, and explicit constants, such as 1.5 and \"Hello\". Some keywords, such as <b>index</b>, are reserved and cannot be used in programs to name variables, procedures, etc.<p>\r\nA <b>get</b> statement, such as</p>\n<p>\r\n</p>\r\nuses <i>token-oriented</i> input. This means that white space (blanks, tabs, etc.) is skipped before reading the input item and after the item (up to the beginning of the next line). See the <b>get</b> statement for details.<p>\r\n</p>",
      "text_content": " A token is essentially a word, a number or a special symbol such as :=. In a Turing program there are four kinds of tokens: keywords such as get, identifiers such as incomeTax, operators and special symbols, such as + and :=, and explicit constants, such as 1.5 and \"Hello\". Some keywords, such as index, are reserved and cannot be used in programs to name variables, procedures, etc.\r\nA get statement, such as\r\n\r\nuses token-oriented input. This means that white space (blanks, tabs, etc.) is skipped before reading the input item and after the item (up to the beginning of the next line). See the get statement for details.\r\n",
      "mdown_content": "A _token_ is essentially a word, a number or a special symbol such as :=. In a Turing program there are four kinds of tokens: keywords such as **get**, identifiers such as _incomeTax_, operators and special symbols, such as **+** and :=, and explicit constants, such as 1.5 and \"Hello\". Some keywords, such as **index**, are reserved and cannot be used in programs to name variables, procedures, etc.\n\nA **get** statement, such as\n\nuses _token-oriented_ input. This means that white space (blanks, tabs, etc.) is skipped before reading the input item and after the item (up to the beginning of the next line). See the **get** statement for details.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var x : real\r\n        x := 9.84"
      ],
      "raw_content": "In this example, the tokens are <b>var</b>,<i> x</i>, :, <b>real</b>, <i>x</i>, := and 9.84.<p>\r\n</p>",
      "text_content": " In this example, the tokens are var, x, :, real, x, := and 9.84.\r\n\r\n",
      "mdown_content": "In this example, the tokens are **var**, _x_, :, **real**, _x_, := and 9.84.\n"
    }
  ],
  "dependencies": [

  ]
}
