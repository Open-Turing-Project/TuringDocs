{
  "title": "read",
  "fileName": "read",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>readStatement</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>read</b> : <i>fileNumber</i> [ : <i>status</i> ] , <i>readItem</i> { ,<i>readItem</i> }</font></td>\n</tr></table>\n<p></p>",
      "text_content": " A readStatement is:\r\n read : fileNumber [ : status ] , readItem { ,readItem }",
      "mdown_content": "A _readStatement_ is:   **read** : _fileNumber_ [ : _status_ ] , _readItem_ { ,_readItem_ }"
    },
    {
      "title": "Description",
      "raw_content": "The <b>read</b> statement inputs each of the <i>readItems</i> from the specified file. These items are input directly using the <i>binary</i> format that they have on the file. In other words, the items are not in source (ASCII or EBCDIC) format. In the common case, these items have been output to the file using the <b>write</b> statement.<p>\r\nBy contrast, the <b>get</b> and <b>put</b> statements use source format, which a person can read using an ordinary text editor.</p>\n<p>\r\n</p>",
      "text_content": " The read statement inputs each of the readItems from the specified file. These items are input directly using the binary format that they have on the file. In other words, the items are not in source (ASCII or EBCDIC) format. In the common case, these items have been output to the file using the write statement.\r\nBy contrast, the get and put statements use source format, which a person can read using an ordinary text editor.\r\n",
      "mdown_content": "The **read** statement inputs each of the _readItems_ from the specified file. These items are input directly using the _binary_ format that they have on the file. In other words, the items are not in source (ASCII or EBCDIC) format. In the common case, these items have been output to the file using the **write** statement.\n\nBy contrast, the **get** and **put** statements use source format, which a person can read using an ordinary text editor.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var employeeRecord :\r\n            record\r\n                name : string ( 30 )\r\n                pay : int\r\n                dept : 0 .. 9\r\n            end record\r\n        var fileNo : int\r\n        open : fileNo, \"payroll\", read\r\n        \r\n        read : fileNo, employeeRecord"
      ],
      "raw_content": "This example shows how to input a complete employee record using a <b>read</b> statement.<p>\r\n</p>",
      "text_content": " This example shows how to input a complete employee record using a read statement.\r\n\r\n",
      "mdown_content": "This example shows how to input a complete employee record using a **read** statement.\n"
    },
    {
      "title": "Details",
      "code": [
        "        variableReference [ : requestedSize [ : actualSize ] ]"
      ],
      "raw_content": "The <i>fileNumber</i> must specify a file that is open with <b>read</b> capability (or a program argument file that is implicitly opened).<p>\r\nThe optional <i>status</i> is an <b>int</b> variable that is set to implementation-dependent information about the <b>read</b>. If <i>status</i> is returned as zero, the read was successful. Otherwise <i>status</i> gives information about the incomplete or failed <b>read</b> (which is not documented here). You commonly use <i>status </i>when you are reading a record or array from a file and you are not sure if the entire item exists on the file. If it does not exist, the <b>read</b> will fail part way through, but your program can continue and diagnose the problem by inspecting <i>status</i>.</p>\n<p>\r\nA <i>readItem</i> is:</p>\n<p>\r\n</p>\r\nEach <i>readItem</i> specifies a variable to be read in internal form. The optional <i>requestedSize</i> is an integer value giving the number of bytes of data to be read. The <i>requestedSize</i> should be less than or equal to the size of the item's internal form in memory (else a warning message is issued). If no <i>requestedSize</i> is given, the size of the item in memory is used. The optional <i>actualSize</i> is an <b>int</b> variable that is set to the number of bytes actually read.<p>\r\nAn array, record or union may be read and written as a whole.</p>\n<p>\r\nIt is dangerous to read into pointer variables, as this allows the possibility of creating incorrect addresses in the pointers. It is also dangerous to read more bytes than are in the <i>readItem</i>.</p>\n<p>\r\n</p>",
      "text_content": " The fileNumber must specify a file that is open with read capability (or a program argument file that is implicitly opened).\r\nThe optional status is an int variable that is set to implementation-dependent information about the read. If status is returned as zero, the read was successful. Otherwise status gives information about the incomplete or failed read (which is not documented here). You commonly use status when you are reading a record or array from a file and you are not sure if the entire item exists on the file. If it does not exist, the read will fail part way through, but your program can continue and diagnose the problem by inspecting status.\r\nA readItem is:\r\n\r\nEach readItem specifies a variable to be read in internal form. The optional requestedSize is an integer value giving the number of bytes of data to be read. The requestedSize should be less than or equal to the size of the item's internal form in memory (else a warning message is issued). If no requestedSize is given, the size of the item in memory is used. The optional actualSize is an int variable that is set to the number of bytes actually read.\r\nAn array, record or union may be read and written as a whole.\r\nIt is dangerous to read into pointer variables, as this allows the possibility of creating incorrect addresses in the pointers. It is also dangerous to read more bytes than are in the readItem.\r\n",
      "mdown_content": "The _fileNumber_ must specify a file that is open with **read** capability (or a program argument file that is implicitly opened).\n\nThe optional _status_ is an **int** variable that is set to implementation-dependent information about the **read**. If _status_ is returned as zero, the read was successful. Otherwise _status_ gives information about the incomplete or failed **read** (which is not documented here). You commonly use _status_ when you are reading a record or array from a file and you are not sure if the entire item exists on the file. If it does not exist, the **read** will fail part way through, but your program can continue and diagnose the problem by inspecting _status_.\n\nA _readItem_ is:\n\nEach _readItem_ specifies a variable to be read in internal form. The optional _requestedSize_ is an integer value giving the number of bytes of data to be read. The _requestedSize_ should be less than or equal to the size of the item's internal form in memory (else a warning message is issued). If no _requestedSize_ is given, the size of the item in memory is used. The optional _actualSize_ is an **int** variable that is set to the number of bytes actually read.\n\nAn array, record or union may be read and written as a whole.\n\nIt is dangerous to read into pointer variables, as this allows the possibility of creating incorrect addresses in the pointers. It is also dangerous to read more bytes than are in the _readItem_.\n"
    },
    {
      "title": "See also",
      "links": [
        "write",
        "open",
        "close",
        "seek",
        "tell",
        "get",
        "put"
      ],
      "raw_content": "the <b><a href=\"write.html\">write</a></b>, <b><a href=\"open.html\">open</a></b>, <b><a href=\"close.html\">close</a></b>, <b><a href=\"seek.html\">seek</a></b>, <b><a href=\"tell.html\">tell</a></b>, <b><a href=\"get.html\">get</a></b> and <b><a href=\"put.html\">put</a></b> statements.<p>\r\n</p>",
      "text_content": " the write, open, close, seek, tell, get and put statements.\r\n",
      "mdown_content": "the **[write](write.html)**, **[open](open.html)**, **[close](close.html)**, **[seek](seek.html)**, **[tell](tell.html)**, **[get](get.html)** and **[put](put.html)** statements.\n"
    }
  ],
  "dependencies": [

  ]
}
