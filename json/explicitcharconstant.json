{
  "title": "explicitCharConstant",
  "fileName": "explicitcharconstant",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "An <i>explicitCharConstant</i> is a sequence of characters surrounded by single quotation marks, for example, 'Renzo'.<p>\r\n</p>",
      "text_content": " An explicitCharConstant is a sequence of characters surrounded by single quotation marks, for example, 'Renzo'.\r\n",
      "mdown_content": "An _explicitCharConstant_ is a sequence of characters surrounded by single quotation marks, for example, 'Renzo'."
    },
    {
      "title": "Example",
      "code": [
        "        var c : char := 'H'\r\n        var d : char (2) := 'Hi'"
      ],
      "raw_content": "In the following, the explicit character constants are 'H' and 'Hi'.<p>\r\n</p>",
      "text_content": " In the following, the explicit character constants are 'H' and 'Hi'.\r\n\r\n",
      "mdown_content": "In the following, the explicit character constants are 'H' and 'Hi'."
    },
    {
      "title": "Details",
      "code": [
        "        var c := 'H'        % Type is char\r\n        var d := 'Hi'   % Type is char (2)\r\n        var e := \"H\"    % Type is string"
      ],
      "raw_content": "An explicit character constant must contain at least one character. If it contains exactly one character, as in 'A', its type is <b>char</b>. If it contains two or more characters (<i>n</i> characters), as 'Width', its type is <b>char</b>(<i>n</i>). The difference between the <b>char</b> and <b>char</b>(1) types is rarely of significance, but does make a difference in declarations without an explicit type, for example:<p>\r\n</p>\r\nThe backslash \\ is used in explicit string and char(n) constants to specify special values, for example, '\\T' is the tab character. Similarly, the carat ^ is used to specify ASCII control characters, for example, '^H' is the ASCII backspace. See <i>explicitStringConstants</i> for details.<p>\r\nExplicit character constants cannot cross line boundaries. To represent a constant that is longer than a line, break it into two or more strings on separate lines and use + (catenation) to join the individual strings. See <b>catenation</b>.</p>\n<p>\r\nAn explicit character constant may be limited in length by the implementation. We recommend that this limitation be at least 32767.</p>\n<p>\r\nExplicit character constants, but not strings, are allowed to contain the character internal values 0 (called <i>eos </i>for end of string) and 128 (called <i>uninitchar</i>, used as the uninitialized string value).</p>\n<p>\r\n</p>",
      "text_content": " An explicit character constant must contain at least one character. If it contains exactly one character, as in 'A', its type is char. If it contains two or more characters (n characters), as 'Width', its type is char(n). The difference between the char and char(1) types is rarely of significance, but does make a difference in declarations without an explicit type, for example:\r\n\r\nThe backslash \\ is used in explicit string and char(n) constants to specify special values, for example, '\\T' is the tab character. Similarly, the carat ^ is used to specify ASCII control characters, for example, '^H' is the ASCII backspace. See explicitStringConstants for details.\r\nExplicit character constants cannot cross line boundaries. To represent a constant that is longer than a line, break it into two or more strings on separate lines and use + (catenation) to join the individual strings. See catenation.\r\nAn explicit character constant may be limited in length by the implementation. We recommend that this limitation be at least 32767.\r\nExplicit character constants, but not strings, are allowed to contain the character internal values 0 (called eos for end of string) and 128 (called uninitchar, used as the uninitialized string value).\r\n",
      "mdown_content": "An explicit character constant must contain at least one character. If it contains exactly one character, as in 'A', its type is **char**. If it contains two or more characters (_n_ characters), as 'Width', its type is **char**(_n_). The difference between the **char** and **char**(1) types is rarely of significance, but does make a difference in declarations without an explicit type, for example:\nThe backslash \\ is used in explicit string and char(n) constants to specify special values, for example, '\\T' is the tab character. Similarly, the carat ^ is used to specify ASCII control characters, for example, '^H' is the ASCII backspace. See _explicitStringConstants_ for details.\nExplicit character constants cannot cross line boundaries. To represent a constant that is longer than a line, break it into two or more strings on separate lines and use + (catenation) to join the individual strings. See **catenation**.\nAn explicit character constant may be limited in length by the implementation. We recommend that this limitation be at least 32767.\nExplicit character constants, but not strings, are allowed to contain the character internal values 0 (called _eos_ for end of string) and 128 (called _uninitchar_, used as the uninitialized string value)."
    }
  ],
  "dependencies": [

  ]
}
