{
  "title": "new",
  "fileName": "new",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>newStatement</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>new</b> [ <i>collectionOrClassId</i> , ] <i>pointerVariableReference</i></font></td>\n</tr></table>\n<p></p>",
      "text_content": " A newStatement is:\r\n new [ collectionOrClassId , ] pointerVariableReference",
      "mdown_content": "A *newStatement* is:\n **new** [ *collectionOrClassId* , ] *pointerVariableReference*"
    },
    {
      "title": "Description",
      "raw_content": "A <b>new</b> statement creates (allocates) a new element and assigns its location to the pointer variable. This element can be an object of a collection or class or a value of a type. If the <i>collectionOrClassId</i> is omitted, the choice of element is determined by the type of the pointer. For example, if the pointer is to class <i>C</i>, an object of class <i>C</i> will be allocated.<p>\r\n</p>",
      "text_content": " A new statement creates (allocates) a new element and assigns its location to the pointer variable. This element can be an object of a collection or class or a value of a type. If the collectionOrClassId is omitted, the choice of element is determined by the type of the pointer. For example, if the pointer is to class C, an object of class C will be allocated.\r\n",
      "mdown_content": "A **new** statement creates (allocates) a new element and assigns its location to the pointer variable. This element can be an object of a collection or class or a value of a type. If the *collectionOrClassId* is omitted, the choice of element is determined by the type of the pointer. For example, if the pointer is to class *C*, an object of class *C* will be allocated."
    },
    {
      "title": "Example",
      "code": [
        "        var list : collection of\r\n            record\r\n                contents : string ( 10 )\r\n                next : pointer to list  % Short form: next : ^ list\r\n            end record\r\n        var first : pointer to list     % Short form: var first : ^ list\r\n        new list, first         % Short form: new first"
      ],
      "raw_content": "Using a collection, declare a list of records and allocate one record.<p>\r\n</p>",
      "text_content": " Using a collection, declare a list of records and allocate one record.\r\n\r\n",
      "mdown_content": "Using a collection, declare a list of records and allocate one record."
    },
    {
      "title": "Example",
      "code": [
        "        class node\r\n            export var next, var name\r\n            name : string (25)\r\n            next : pointer to node  % Short form: next : ^ node\r\n        end node\r\n        var start : pointer to node % Short form: var start : ^ node\r\n        new node, start         % Short form: new start"
      ],
      "raw_content": "Using a class, create an object of that class. The object is located by the <i>start</i> pointer. <p>\r\n</p>",
      "text_content": " Using a class, create an object of that class. The object is located by the start pointer. \r\n\r\n",
      "mdown_content": "Using a class, create an object of that class. The object is located by the *start* pointer. "
    },
    {
      "title": "Example",
      "code": [
        "        type item:\r\n            record\r\n                contents : string ( 10 )\r\n                next : pointer to item  % Short form: next : ^ item\r\n            end record\r\n        var first : pointer to item     % Short form: var first : ^ item\r\n        new first"
      ],
      "raw_content": "Using a record type, declare a list of records and allocate one record. <p>\r\n</p>",
      "text_content": " Using a record type, declare a list of records and allocate one record. \r\n\r\n",
      "mdown_content": "Using a record type, declare a list of records and allocate one record. "
    },
    {
      "title": "Details",
      "code": [
        "        new D, p    % Allocates an object of class D"
      ],
      "raw_content": "As the examples in this section show, a pointer can locate one of three things: an object of a collection, an object of a class or a value of a type.<p>\r\nIn the <b>new</b> statement, the <i>collectionOrClassId</i> can be omitted. If the pointer locates a type, it<i> </i>must be omitted. The <b>free</b> statement is used to deallocate an element.</p>\n<p>\r\nAn imported class can have one of its objects created (by the <b>new</b> statement) only if the class is imported <b>var</b>.</p>\n<p>\r\nIf there is no more space to allocate an element, <b>new</b> will set the pointer to be the <b>nil</b> value, and the program will continue executing.</p>\n<p>\r\nIf the pointer locates class <i>C </i>and <i>C</i> contains an <b>implement</b> <b>by</b> list, the object created by <b>new</b> is the inherited object (through any number of levels of <b>implement</b> <b>by</b>). The pointer, however, remains a pointer to <i>C</i>.</p>\n<p>\r\nThe form <b>new</b> <i>p</i>  is a short form for <b>new</b> <i>C</i>, <i>p </i>when <i>C</i> is the class or collection given in <i>p</i>'s type.</p>\n<p>\r\nIf <i>p</i> is a pointer to class <i>C</i> and <i>C</i> has a descendant (expansion) class <i>D</i>, a <b>new</b> statement can be used to allocate an object of type <i>D</i>, as in:</p>\n<p>\r\n</p>\r\nIf D has an <b>implement</b> <b>by</b> clause, the expansion is created.<p>\r\n</p>",
      "text_content": " As the examples in this section show, a pointer can locate one of three things: an object of a collection, an object of a class or a value of a type.\r\nIn the new statement, the collectionOrClassId can be omitted. If the pointer locates a type, it must be omitted. The free statement is used to deallocate an element.\r\nAn imported class can have one of its objects created (by the new statement) only if the class is imported var.\r\nIf there is no more space to allocate an element, new will set the pointer to be the nil value, and the program will continue executing.\r\nIf the pointer locates class C and C contains an implement by list, the object created by new is the inherited object (through any number of levels of implement by). The pointer, however, remains a pointer to C.\r\nThe form new p  is a short form for new C, p when C is the class or collection given in p's type.\r\nIf p is a pointer to class C and C has a descendant (expansion) class D, a new statement can be used to allocate an object of type D, as in:\r\n\r\nIf D has an implement by clause, the expansion is created.\r\n",
      "mdown_content": "As the examples in this section show, a pointer can locate one of three things: an object of a collection, an object of a class or a value of a type.\nIn the **new** statement, the *collectionOrClassId* can be omitted. If the pointer locates a type, it* *must be omitted. The **free** statement is used to deallocate an element.\nAn imported class can have one of its objects created (by the **new** statement) only if the class is imported **var**.\nIf there is no more space to allocate an element, **new** will set the pointer to be the **nil** value, and the program will continue executing.\nIf the pointer locates class *C *and *C* contains an **implement** **by** list, the object created by **new** is the inherited object (through any number of levels of **implement** **by**). The pointer, however, remains a pointer to *C*.\nThe form **new** *p*  is a short form for **new** *C*, *p *when *C* is the class or collection given in *p*'s type.\nIf *p* is a pointer to class *C* and *C* has a descendant (expansion) class *D*, a **new** statement can be used to allocate an object of type *D*, as in:\nIf D has an **implement** **by** clause, the expansion is created."
    },
    {
      "title": "Details",
      "code": [
        "        var name : flexible array indexType { , indexType } of typeSpec",
        "        new name , newUpper1 {,newUpper2}"
      ],
      "raw_content": "The <b>new</b> statement can also be used to resize a <b>flexible array</b>. If an array has been declared flexible using the syntax .<p>\r\n</p>\r\nThe indices may have compile-time or run-time upper bounds (the lower bound must be compile-time). The upper bounds can be changed by using:<p>\r\n</p>\r\nThe existing array entries will retain their values, except that any index made smaller will have the corresponding array entries lost. Any index made larger will have the new array entries uninitialized (if applicable).<p>\r\nAdditionally, the upper bound (both in the declaration and the <b>new</b> statement) can be made one less than the lower bound. This effectively makes an array that contains 0 elements. It can later be increased in size with another <b>new</b>.</p>\n<p>\r\nIn the current implementation (1999), with a multi-dimensional array with a non-zero number of total elements, it is a run-time error to change any but the first dimension (unless one of the new upper bounds is one less than the corresponding lower bound, giving 0 elements in the array) as the algorithm to rearrange the element memory locations has not yet been implemented.</p>\n<p>\r\nCurrently, only variables can be declared in this form. There is no flexible array parameter type, although a flexible array can be passed to an array parameter with \"<b>*\"</b> as the upper bound.</p>\n<p>\r\n</p>",
      "text_content": " The new statement can also be used to resize a flexible array. If an array has been declared flexible using the syntax .\r\n\r\nThe indices may have compile-time or run-time upper bounds (the lower bound must be compile-time). The upper bounds can be changed by using:\r\n\r\nThe existing array entries will retain their values, except that any index made smaller will have the corresponding array entries lost. Any index made larger will have the new array entries uninitialized (if applicable).\r\nAdditionally, the upper bound (both in the declaration and the new statement) can be made one less than the lower bound. This effectively makes an array that contains 0 elements. It can later be increased in size with another new.\r\nIn the current implementation (1999), with a multi-dimensional array with a non-zero number of total elements, it is a run-time error to change any but the first dimension (unless one of the new upper bounds is one less than the corresponding lower bound, giving 0 elements in the array) as the algorithm to rearrange the element memory locations has not yet been implemented.\r\nCurrently, only variables can be declared in this form. There is no flexible array parameter type, although a flexible array can be passed to an array parameter with \"*\" as the upper bound.\r\n",
      "mdown_content": "The **new** statement can also be used to resize a **flexible array**. If an array has been declared flexible using the syntax .\nThe indices may have compile-time or run-time upper bounds (the lower bound must be compile-time). The upper bounds can be changed by using:\nThe existing array entries will retain their values, except that any index made smaller will have the corresponding array entries lost. Any index made larger will have the new array entries uninitialized (if applicable).\nAdditionally, the upper bound (both in the declaration and the **new** statement) can be made one less than the lower bound. This effectively makes an array that contains 0 elements. It can later be increased in size with another **new**.\nIn the current implementation (1999), with a multi-dimensional array with a non-zero number of total elements, it is a run-time error to change any but the first dimension (unless one of the new upper bounds is one less than the corresponding lower bound, giving 0 elements in the array) as the algorithm to rearrange the element memory locations has not yet been implemented.\nCurrently, only variables can be declared in this form. There is no flexible array parameter type, although a flexible array can be passed to an array parameter with \"***\"** as the upper bound."
    },
    {
      "title": "Example",
      "raw_content": "See <b>array</b> for an example of <b>flexible arrays</b>.<p>\r\n</p>",
      "text_content": " See array for an example of flexible arrays.\r\n",
      "mdown_content": "See **array** for an example of **flexible arrays**."
    },
    {
      "title": "See also",
      "links": [
        "class",
        "collection",
        "pointer",
        "free",
        "statement",
        "nil",
        "implement_by",
        "flexible",
        "array",
        "flexible"
      ],
      "raw_content": "<b><a href=\"class.html\">class</a></b> and <b><a href=\"collection.html\">collection</a></b> declarations, <b><a href=\"pointer.html\">pointer</a></b> type, <b><a href=\"free.html\">free</a></b> <a href=\"statement.html\">statement</a>, <b><a href=\"nil.html\">nil</a></b> value and <b><a href=\"implement_by.html\">implement by</a></b> list.<p>\r\nFor <a href=\"flexible.html\">flexible</a> arrays, see also <b><a href=\"array.html\">array</a></b> and <b><a href=\"flexible.html\">flexible</a></b>.</p>\n<p>\r\n</p>",
      "text_content": " class and collection declarations, pointer type, free statement, nil value and implement by list.\r\nFor flexible arrays, see also array and flexible.\r\n",
      "mdown_content": "**[class.html](class)** and **[collection.html](collection)** declarations, **[pointer.html](pointer)** type, **[free.html](free)** [statement.html](statement), **[nil.html](nil)** value and **[implement_by.html](implement by)** list.\nFor [flexible.html](flexible) arrays, see also **[array.html](array)** and **[flexible.html](flexible)**."
    }
  ]
}
