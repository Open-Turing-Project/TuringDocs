{
  "title": "GUI.Draw...",
  "fileName": "gui_draw",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>GUI.DrawArc</b> (<i>widgetID</i>, <i>x</i>, <i>y</i>, <i>xRadius</i>, <i>yRadius</i> : <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>initialAngle</i>, <i>finalAngle</i>, <i>Color</i> : <b>int</b> )<p>\r\n<b>GUI.DrawBox</b> (<i>widgetID</i>, <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i>, <i>Color</i> : <b>int</b> )</p>\n<p>\r\n<b>GUI.DrawCls</b> (<i>widgetID</i> : <b>int</b> )</p>\n<p>\r\n<b>GUI.DrawDot</b> (<i>widgetID</i>, <i>x</i>, <i>y</i>, <i>Color</i> : <b>int</b> )</p>\n<p>\r\n<b>GUI.DrawFill</b> (<i>widgetID</i>, <i>x</i>, <i>y</i> : <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>fillColor</i>, <i>borderColor</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawFillArc</b> (<i>widgetID</i>, <i>x</i>, <i>y </i>: <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>xRadius,</i> <i>yRadius</i> : <b>int</b>, <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>initialAngle</i>, <i>finalAngle,</i> <i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawFillBox</b> (<i>widgetID</i>, <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i> : <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>Color</i> : <b>int</b> )</p>\n<p>\r\n<b>GUI.DrawFillMapleLeaf</b> (<i>widgetID</i>, <i>x1</i>, <i>y1</i> : <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>x2</i>, <i>y2</i>, <i>Color</i> : <b>int</b> )</p>\n<p>\r\n<b>GUI.DrawFillOval</b> (<i>widgetID</i>, <i>x</i>, <i>y</i> : <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>xRadius</i>, <i>yRadius</i> : <b>int</b>, <i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawFillPolygon</b> (<i>widgetID</i> : <b>int</b>, <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>x</i>, <i>y</i> : <b>array</b> 1 .. * <b>of</b> <b>int</b>, <i>n</i> : <b>int</b>, <i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawFillStar</b> (<i>widgetID</i>, <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i> : <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawLine</b> (<i>widgetID</i>, <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i>, <i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawMapleLeaf</b> (<i>widgetID</i>, <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i> : <b>int</b>,<br><i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawOval</b> (<i>widgetID</i>, <i>x</i>, <i>y</i> : <b>int</b>,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>xRadius</i>, <i>yRadius</i>, <i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawPolygon</b> (<i>widgetID</i> : <b>int</b>, <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>x</i>, <i>y</i> : <b>array</b> 1 .. * <b>of</b> <b>int</b>, <i>n</i> : <b>int</b>, <i>Color</i> : <b>int</b>)</p>\n<p>\r\n<b>GUI.DrawStar</b> (<i>widgetID</i>, <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i>, <i>Color</i> : <b>int</b> )</p>\n<p>\r\n<b>GUI.DrawText</b> (<i>widgetID</i> : <b>int</b>, <i>textStr</i> : <b>string</b>, <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<i>x</i>, <i>y</i> : <b>int</b>, <i>fontID</i>, <i>Color</i> : <b>int</b>)</p>\n<p>\r\n</p></font>",
      "text_content": " GUI.DrawArc (widgetID, x, y, xRadius, yRadius : int,\r\n    initialAngle, finalAngle, Color : int )\r\nGUI.DrawBox (widgetID, x1, y1, x2, y2, Color : int )\r\nGUI.DrawCls (widgetID : int )\r\nGUI.DrawDot (widgetID, x, y, Color : int )\r\nGUI.DrawFill (widgetID, x, y : int,\r\n    fillColor, borderColor : int)\r\nGUI.DrawFillArc (widgetID, x, y : int,\r\n    xRadius, yRadius : int, \r\n    initialAngle, finalAngle, Color : int)\r\nGUI.DrawFillBox (widgetID, x1, y1, x2, y2 : int,\r\n    Color : int )\r\nGUI.DrawFillMapleLeaf (widgetID, x1, y1 : int,\r\n    x2, y2, Color : int )\r\nGUI.DrawFillOval (widgetID, x, y : int,\r\n    xRadius, yRadius : int, Color : int)\r\nGUI.DrawFillPolygon (widgetID : int, \r\n    x, y : array 1 .. * of int, n : int, Color : int)\r\nGUI.DrawFillStar (widgetID, x1, y1, x2, y2 : int,\r\n    Color : int)\r\nGUI.DrawLine (widgetID, x1, y1, x2, y2, Color : int)\r\nGUI.DrawMapleLeaf (widgetID, x1, y1, x2, y2 : int,Color : int)\r\nGUI.DrawOval (widgetID, x, y : int,\r\n    xRadius, yRadius, Color : int)\r\nGUI.DrawPolygon (widgetID : int, \r\n    x, y : array 1 .. * of int, n : int, Color : int)\r\nGUI.DrawStar (widgetID, x1, y1, x2, y2, Color : int )\r\nGUI.DrawText (widgetID : int, textStr : string, \r\n    x, y : int, fontID, Color : int)\r\n",
      "mdown_content": "**GUI.DrawArc** (_widgetID_, _x_, _y_, _xRadius_, _yRadius_ : **int**,    _initialAngle_, _finalAngle_, _Color_ : **int** )\n**GUI.DrawBox** (_widgetID_, _x1_, _y1_, _x2_, _y2_, _Color_ : **int** )\n**GUI.DrawCls** (_widgetID_ : **int** )\n**GUI.DrawDot** (_widgetID_, _x_, _y_, _Color_ : **int** )\n**GUI.DrawFill** (_widgetID_, _x_, _y_ : **int**,    _fillColor_, _borderColor_ : **int**)\n**GUI.DrawFillArc** (_widgetID_, _x_, _y _: **int**,    _initialAngle_, _finalAngle,_ _Color_ : **int**)\n**GUI.DrawFillBox** (_widgetID_, _x1_, _y1_, _x2_, _y2_ : **int**,    _Color_ : **int** )\n**GUI.DrawFillMapleLeaf** (_widgetID_, _x1_, _y1_ : **int**,    _x2_, _y2_, _Color_ : **int** )\n**GUI.DrawFillOval** (_widgetID_, _x_, _y_ : **int**,    _xRadius_, _yRadius_ : **int**, _Color_ : **int**)\n**GUI.DrawFillPolygon** (_widgetID_ : **int**,     _x_, _y_ : **array** 1 .. * **of** **int**, _n_ : **int**, _Color_ : **int**)\n**GUI.DrawFillStar** (_widgetID_, _x1_, _y1_, _x2_, _y2_ : **int**,    _Color_ : **int**)\n**GUI.DrawLine** (_widgetID_, _x1_, _y1_, _x2_, _y2_, _Color_ : **int**)\n**GUI.DrawMapleLeaf** (_widgetID_, _x1_, _y1_, _x2_, _y2_ : **int**,_Color_ : **int**)\n**GUI.DrawOval** (_widgetID_, _x_, _y_ : **int**,    _xRadius_, _yRadius_, _Color_ : **int**)\n**GUI.DrawPolygon** (_widgetID_ : **int**,     _x_, _y_ : **array** 1 .. * **of** **int**, _n_ : **int**, _Color_ : **int**)\n**GUI.DrawStar** (_widgetID_, _x1_, _y1_, _x2_, _y2_, _Color_ : **int** )\n**GUI.DrawText** (_widgetID_ : **int**, _textStr_ : **string**,     _x_, _y_ : **int**, _fontID_, _Color_ : **int**)"
    },
    {
      "title": "Description",
      "raw_content": "Performs a <i>Draw</i>&#133; command to the canvas specified by <i>widgetID</i>.<p>\r\nAll of these routines are essentially the same as the similarly-named procedures in the <i>Draw</i> module. All coordinates are based on the canvas and all drawing is clipped to the canvas drawing surface. If the canvas is in \"xor mode\", all the drawing will be done with \"xor\" set. (See <b>View.Set</b><i> </i>for more information about \"xor\".)</p>\n<p>\r\nThe <i>widgetID</i> must specify a canvas widget.</p>\n<p>\r\n</p>",
      "text_content": " Performs a Draw command to the canvas specified by widgetID.\r\nAll of these routines are essentially the same as the similarly-named procedures in the Draw module. All coordinates are based on the canvas and all drawing is clipped to the canvas drawing surface. If the canvas is in \"xor mode\", all the drawing will be done with \"xor\" set. (See View.Set for more information about \"xor\".)\r\nThe widgetID must specify a canvas widget.\r\n",
      "mdown_content": "Performs a _Draw_&#133; command to the canvas specified by _widgetID_.\nAll of these routines are essentially the same as the similarly-named procedures in the _Draw_ module. All coordinates are based on the canvas and all drawing is clipped to the canvas drawing surface. If the canvas is in \"xor mode\", all the drawing will be done with \"xor\" set. (See **View.Set**_ _for more information about \"xor\".)\nThe _widgetID_ must specify a canvas widget."
    },
    {
      "title": "Example",
      "raw_content": "See <b>GUI.CreateCanvas</b> for an example of <b>GUI.DrawFillOval</b>.<p>\r\n</p>",
      "text_content": " See GUI.CreateCanvas for an example of GUI.DrawFillOval.\r\n",
      "mdown_content": "See **GUI.CreateCanvas** for an example of **GUI.DrawFillOval**."
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the procedures by calling <b>GUI.Draw&#133;</b>, not by calling <b>Draw&#133;</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the procedures by calling GUI.Draw, not by calling Draw.\r\n",
      "mdown_content": "Exported qualified.\nThis means that you can only call the procedures by calling **GUI.Draw&#133;**, not by calling **Draw&#133;**."
    },
    {
      "title": "See also",
      "raw_content": "<b>GUI.CreateCanvas</b>.<p>\r\n</p>",
      "text_content": " GUI.CreateCanvas.\r\n",
      "mdown_content": "**GUI.CreateCanvas**."
    }
  ],
  "dependencies": [

  ]
}
