{
  "title": "array",
  "fileName": "array",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>array</b> <i>indexType</i> { , <i>indexType</i> } <b>of</b> <i>typeSpec</i><p>\r\n</p></font>",
      "text_content": " array indexType { , indexType } of typeSpec\r\n",
      "mdown_content": "**array** _indexType_ { , _indexType_ } **of** _typeSpec_"
    },
    {
      "title": "Description",
      "raw_content": "An array consists of a number of elements. The <i>typeSpec</i> gives the type of these elements. There is one element for each item in the (combinations of) range(s) of the <i>indexType(s)</i>. In the following example, the array called <i>marks</i> consists of 100 elements, each of which is an integer.<p>\r\n</p>",
      "text_content": " An array consists of a number of elements. The typeSpec gives the type of these elements. There is one element for each item in the (combinations of) range(s) of the indexType(s). In the following example, the array called marks consists of 100 elements, each of which is an integer.\r\n",
      "mdown_content": "An array consists of a number of elements. The _typeSpec_ gives the type of these elements. There is one element for each item in the (combinations of) range-  of the _indexType- _. In the following example, the array called _marks_ consists of 100 elements, each of which is an integer.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var marks : array 1 .. 100 of int\r\n        \r\n        var sum : int := 0\r\n        for i : 1 .. 100        % Add up the elements of marks\r\n            sum := sum + marks (i)\r\n        end for"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": "\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Array Example",
          "file": "array.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "In the above example, <i>marks(i)</i> is the <i>i</i>-th element of the <i>marks</i> array. We call <i>i</i> the <i>index</i> or <i>subscript</i> of <i>marks</i>. In Turing, a subscript is surrounded by parentheses, not by square brackets as is the case in the Pascal or C-like languages.<p>\r\n</p>",
      "text_content": " In the above example, marks(i) is the i-th element of the marks array. We call i the index or subscript of marks. In Turing, a subscript is surrounded by parentheses, not by square brackets as is the case in the Pascal or C-like languages.\r\n",
      "mdown_content": "In the above example, _marks- _ is the _i_-th element of the _marks_ array. We call _i_ the _index_ or _subscript_ of _marks_. In Turing, a subscript is surrounded by parentheses, not by square brackets as is the case in the Pascal or C-like languages.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var price : array 1988 .. 1990, 1 .. 12 of int\r\n        \r\n        var sum : int := 0\r\n        for year : 1988 .. 1990     % For each year\r\n            for month : 1 .. 12     % For each month\r\n                sum := sum + price (year, month)\r\n            end for\r\n        end for"
      ],
      "raw_content": "The <i>prices</i> array shows how an array can have more than one dimension. This array has one dimension for the year (1988, 1989 or 1990) and another for the month (1 .. 12). There are 36 elements of the array, one for each month of each year.<p>\r\n</p>",
      "text_content": " The prices array shows how an array can have more than one dimension. This array has one dimension for the year (1988, 1989 or 1990) and another for the month (1 .. 12). There are 36 elements of the array, one for each month of each year.\r\n\r\n",
      "mdown_content": "The _prices_ array shows how an array can have more than one dimension. This array has one dimension for the year (1988, 1989 or 1990) and another for the month (1 .. 12). There are 36 elements of the array, one for each month of each year.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Two-Dimensional Array Example",
          "file": "array2.t"
        }
      ]
    },
    {
      "title": "Details",
      "code": [
        "        var a : array 1 .. * of typeSpec := init ()"
      ],
      "raw_content": "Each <i>indexType</i> must contain at least one item. The range 1 .. 0, for example, would not be allowed. Each index type must be a subrange of the integers, characters (the <b>char</b> type), or of an enumerated type, an (entire) enumerated type, the <b>char</b> type, the <b>boolean </b>type, or a named type which is one of these.<p>\r\nArrays can also be declared in the form</p>\n<p>\r\n</p>\r\nThe upper bound of <i>a</i> will be computed from the count of the initializing values. Both <b>var</b> and <b>const</b> arrays can be declared this way. An array variable/constant declared with \"*\" as an upper bound must have an initializing list. Only one dimensional arrays may be declared in this form.<p>\r\nArrays can be assigned as a whole (to arrays of an equivalent type), but they cannot be compared.</p>\n<p>\r\nAn array can be initialized in its declaration using <b>init</b>. For details, see <b>var</b> and <b>const</b> declarations.</p>\n<p>\r\n</p>",
      "text_content": " Each indexType must contain at least one item. The range 1 .. 0, for example, would not be allowed. Each index type must be a subrange of the integers, characters (the char type), or of an enumerated type, an (entire) enumerated type, the char type, the boolean type, or a named type which is one of these.\r\nArrays can also be declared in the form\r\n\r\nThe upper bound of a will be computed from the count of the initializing values. Both var and const arrays can be declared this way. An array variable/constant declared with \"*\" as an upper bound must have an initializing list. Only one dimensional arrays may be declared in this form.\r\nArrays can be assigned as a whole (to arrays of an equivalent type), but they cannot be compared.\r\nAn array can be initialized in its declaration using init. For details, see var and const declarations.\r\n",
      "mdown_content": "Each _indexType_ must contain at least one item. The range 1 .. 0, for example, would not be allowed. Each index type must be a subrange of the integers, characters (the **char** type), or of an enumerated type, an (entire) enumerated type, the **char** type, the **boolean** type, or a named type which is one of these.\n\nArrays can also be declared in the form\n\nThe upper bound of _a_ will be computed from the count of the initializing values. Both **var** and **const** arrays can be declared this way. An array variable/constant declared with \"*\" as an upper bound must have an initializing list. Only one dimensional arrays may be declared in this form.\n\nArrays can be assigned as a whole (to arrays of an equivalent type), but they cannot be compared.\n\nAn array can be initialized in its declaration using **init**. For details, see **var** and **const** declarations.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var howMany : int\r\n        get howMany\r\n        var height : array 1 .. howMany of real\r\n            read in all the elements of this array\r\n        function total (a : array 1 .. * of real) : real\r\n            var sum : real := 0\r\n            for i : 1 .. upper (a)\r\n                sum := sum + a (i)\r\n            end for\r\n            result sum\r\n        end total\r\n        \r\n        put \"Sum of the heights is \", total (height)"
      ],
      "raw_content": "In this example, the size of the array is not known until run time.<p>\r\n</p>",
      "text_content": " In this example, the size of the array is not known until run time.\r\n\r\n",
      "mdown_content": "In this example, the size of the array is not known until run time.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Dynamic Arrays Example",
          "file": "array3.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "The ends of the range of a subscript are called the <i>bounds</i> of the array. If these values are not known until run time, the array is said to be <i>dynamic</i>. In the above example, <i>height</i> is a dynamic array. Dynamic arrays can be declared as variables, as in the case for <i>height</i>. However, dynamic arrays cannot appear inside other types such as records, and cannot be named types. Dynamic arrays cannot be assigned and cannot be initialized using <b>init</b>.<p>\r\nIn the above example, <b>upper</b><i>(a) </i>returns the size of <i>a</i>. See also <b>upper</b> and <b>lower</b>.</p>\n<p>\r\nIn the declaration of an array parameter, the upper bound can be given as an asterisk (<b>*</b>), as is done in the above example. This means that the upper bound is taken from that of the corresponding actual parameter (from <i>height</i> in this example).</p>\n<p>\r\nYou can have arrays of other types, for example arrays of record. If <i>R </i>is an array of records, then <i>R(i).f</i> is the way to access the <i>f</i> field of the <i>i</i>-th element of array <i>R</i>.</p>\n<p>\r\n</p>",
      "text_content": " The ends of the range of a subscript are called the bounds of the array. If these values are not known until run time, the array is said to be dynamic. In the above example, height is a dynamic array. Dynamic arrays can be declared as variables, as in the case for height. However, dynamic arrays cannot appear inside other types such as records, and cannot be named types. Dynamic arrays cannot be assigned and cannot be initialized using init.\r\nIn the above example, upper(a) returns the size of a. See also upper and lower.\r\nIn the declaration of an array parameter, the upper bound can be given as an asterisk (*), as is done in the above example. This means that the upper bound is taken from that of the corresponding actual parameter (from height in this example).\r\nYou can have arrays of other types, for example arrays of record. If R is an array of records, then R(i).f is the way to access the f field of the i-th element of array R.\r\n",
      "mdown_content": "The ends of the range of a subscript are called the _bounds_ of the array. If these values are not known until run time, the array is said to be _dynamic_. In the above example, _height_ is a dynamic array. Dynamic arrays can be declared as variables, as in the case for _height_. However, dynamic arrays cannot appear inside other types such as records, and cannot be named types. Dynamic arrays cannot be assigned and cannot be initialized using **init**.\n\nIn the above example, **upper**_- _ returns the size of _a_. See also **upper** and **lower**.\n\nIn the declaration of an array parameter, the upper bound can be given as an asterisk (__*__), as is done in the above example. This means that the upper bound is taken from that of the corresponding actual parameter (from _height_ in this example).\n\nYou can have arrays of other types, for example arrays of record. If _R_ is an array of records, then _R- .f_ is the way to access the _f_ field of the _i_-th element of array _R_.\n"
    },
    {
      "title": "Details",
      "code": [
        "        var name : flexible array indexType { , indexType } of typeSpec",
        "        new name , newUpper1 {,newUpper2}"
      ],
      "raw_content": "Arrays can also be made resizeable. This is done using the <b>flexible</b> keyword. The declaration syntax is:<p>\r\n</p>\r\nThe indices may have compile-time or run-time upper bounds (the lower bound must be compile-time). The upper bounds can be changed by using:<p>\r\n</p>\r\nThe existing array entries will retain their values, except that any index made smaller will have the corresponding array entries lost. Any index made larger will have the new array entries uninitialized (if applicable).<p>\r\nAdditionally, the upper bound (both in the declaration and the <b>new</b> statement) can be made one less than the lower bound. This effectively makes an array that contains 0 elements. It can later be increased in size with another <b>new</b>.</p>\n<p>\r\nIn the current implementation (2002), with a multi-dimensional array with a non-zero number of total elements, it is a run-time error to change any but the first dimension (unless one of the new upper bounds is one less than the corresponding lower bound, giving 0 elements in the array) as the algorithm to rearrange the element memory locations has not yet been implemented.</p>\n<p>\r\nCurrently, only variables can be declared in this form. There is no flexible array parameter type, although a flexible array can be passed to an array parameter with &#147;<b>*</b>&#148; as the upper bound.</p>\n<p>\r\n</p>",
      "text_content": " Arrays can also be made resizeable. This is done using the flexible keyword. The declaration syntax is:\r\n\r\nThe indices may have compile-time or run-time upper bounds (the lower bound must be compile-time). The upper bounds can be changed by using:\r\n\r\nThe existing array entries will retain their values, except that any index made smaller will have the corresponding array entries lost. Any index made larger will have the new array entries uninitialized (if applicable).\r\nAdditionally, the upper bound (both in the declaration and the new statement) can be made one less than the lower bound. This effectively makes an array that contains 0 elements. It can later be increased in size with another new.\r\nIn the current implementation (2002), with a multi-dimensional array with a non-zero number of total elements, it is a run-time error to change any but the first dimension (unless one of the new upper bounds is one less than the corresponding lower bound, giving 0 elements in the array) as the algorithm to rearrange the element memory locations has not yet been implemented.\r\nCurrently, only variables can be declared in this form. There is no flexible array parameter type, although a flexible array can be passed to an array parameter with * as the upper bound.\r\n",
      "mdown_content": "Arrays can also be made resizeable. This is done using the **flexible** keyword. The declaration syntax is:\n\nThe indices may have compile-time or run-time upper bounds (the lower bound must be compile-time). The upper bounds can be changed by using:\n\nThe existing array entries will retain their values, except that any index made smaller will have the corresponding array entries lost. Any index made larger will have the new array entries uninitialized (if applicable).\n\nAdditionally, the upper bound (both in the declaration and the **new** statement) can be made one less than the lower bound. This effectively makes an array that contains 0 elements. It can later be increased in size with another **new**.\n\nIn the current implementation (2002), with a multi-dimensional array with a non-zero number of total elements, it is a run-time error to change any but the first dimension (unless one of the new upper bounds is one less than the corresponding lower bound, giving 0 elements in the array) as the algorithm to rearrange the element memory locations has not yet been implemented.\n\nCurrently, only variables can be declared in this form. There is no flexible array parameter type, although a flexible array can be passed to an array parameter with &#147;__*__&#148; as the upper bound.\n"
    },
    {
      "title": "Example",
      "code": [
        "        function getLines (fileName : string) : int\r\n            var f, numLines : int\r\n            var line : string\r\n            open : f, fileName, get\r\n            numLines := 0\r\n            loop\r\n                exit when eof (f)\r\n                get : f, line : *\r\n                numLines += 1\r\n            end loop\r\n            close : f\r\n            result numLines\r\n        end getLines \r\n        \r\n        procedure readFile (var lines : array 1 .. * of string, fileName : string)\r\n            var f : int\r\n            var line : string\r\n            open : f, fileName, get\r\n            for i : 1 .. upper (lines)\r\n                get : f, lines (i) : *\r\n            end for    \r\n\t\t\tclose : f\r\n        end readFile\r\n            \r\n        var lines : flexible array 1 .. 0 of string\r\n        new lines, getLines (\"text.dat\")\r\n        readFile (lines, \"text.dat\")\r\n        for i : 1 .. upper (lines)\r\n            put lines (i)\r\n        end for"
      ],
      "raw_content": "In this example, the array is resized to fit the number of elements in the file.<p>\r\n</p>",
      "text_content": " In this example, the array is resized to fit the number of elements in the file.\r\n\r\n",
      "mdown_content": "In this example, the array is resized to fit the number of elements in the file.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Flexible Arrays Example",
          "file": "array4.t"
        }
      ]
    },
    {
      "title": "See also",
      "links": [
        "init",
        "flexible",
        "indextype"
      ],
      "raw_content": "<b><a href=\"init.html\">init</a></b> to initialize arrays, <b><a href=\"flexible.html\">flexible</a></b> to declare resizable arrays and <i><a href=\"indextype.html\">indexType</a></i> to specify the index of an array.<p>\r\n</p>",
      "text_content": " init to initialize arrays, flexible to declare resizable arrays and indexType to specify the index of an array.\r\n",
      "mdown_content": "**[init](init.html)** to initialize arrays, **[flexible](flexible.html)** to declare resizable arrays and _[indexType](indextype.html)_ to specify the index of an array.\n"
    }
  ],
  "dependencies": [

  ]
}
