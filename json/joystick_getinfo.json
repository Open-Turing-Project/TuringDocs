{
  "title": "Joystick.GetInfo",
  "fileName": "joystick_getinfo",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Joystick.GetInfo </b>(<i>joystick</i> : <b>int</b>, <b>var</b><i> xPos</i>, <i>yPos</i> : <b>int</b>,<br><i>btn1Pressed</i>, <i>btn2Pressed</i> : <b>boolean</b>)<p>\r\n</p></font>",
      "text_content": " Joystick.GetInfo (joystick : int, var xPos, yPos : int,btn1Pressed, btn2Pressed : boolean)\r\n",
      "mdown_content": "**Joystick.GetInfo **(_joystick_ : **int**, **var**_ xPos_, _yPos_ : **int**,_btn1Pressed_, _btn2Pressed_ : **boolean**)"
    },
    {
      "title": "Description",
      "code": [
        "        screenX = round (maxx * (xPos  joyMin) / (joyMax  joyMin))\r\n        screenY = round (maxy * (yPos  joyMin) / (joyMax  joyMin))"
      ],
      "raw_content": "Reads the position and button status of the joystick specified by the <i>joystack</i> parameter. The <i>x</i> and <i>y</i> parameter are returned in the <i>xPos</i> and <i>yPos</i> parameters. If button 1 or button 2 on the joystick are currently pressed, <i>btn1Pressed</i> and <i>btn2Pressed</i> will be set to <b>true</b>. The <i>joystick</i> parameter can be either <b>joystick1</b> or <b>joystick2</b>.<p>\r\nThe x and y positions vary from <b>joyMin</b> to <b>joyMax</b>. To use them with respect to a screen, the coordinates returned from <b>Joystick.GetInfo </b>must be translated into screen coordinates. The following formula can be used:</p>\n<p>\r\n</p>",
      "text_content": " Reads the position and button status of the joystick specified by the joystack parameter. The x and y parameter are returned in the xPos and yPos parameters. If button 1 or button 2 on the joystick are currently pressed, btn1Pressed and btn2Pressed will be set to true. The joystick parameter can be either joystick1 or joystick2.\r\nThe x and y positions vary from joyMin to joyMax. To use them with respect to a screen, the coordinates returned from Joystick.GetInfo must be translated into screen coordinates. The following formula can be used:\r\n\r\n",
      "mdown_content": "Reads the position and button status of the joystick specified by the _joystack_ parameter. The _x_ and _y_ parameter are returned in the _xPos_ and _yPos_ parameters. If button 1 or button 2 on the joystick are currently pressed, _btn1Pressed_ and _btn2Pressed_ will be set to **true**. The _joystick_ parameter can be either **joystick1** or **joystick2**.\nThe x and y positions vary from **joyMin** to **joyMax**. To use them with respect to a screen, the coordinates returned from **Joystick.GetInfo **must be translated into screen coordinates. The following formula can be used:"
    },
    {
      "title": "Details",
      "raw_content": "The <b>Joystick</b> module contains undocumented subprograms for those who need to access more than two buttons or axes on a joystick. Contact Holt Software if you need more information.<p>\r\n</p>",
      "text_content": " The Joystick module contains undocumented subprograms for those who need to access more than two buttons or axes on a joystick. Contact Holt Software if you need more information.\r\n",
      "mdown_content": "The **Joystick** module contains undocumented subprograms for those who need to access more than two buttons or axes on a joystick. Contact Holt Software if you need more information."
    },
    {
      "title": "Example",
      "code": [
        "        var jx, jy, x, y, ox, oy : int := 1\r\n        var b1, b2, oB1, oB2 : boolean := false\r\n        loop\r\n            Joystick.GetInfo (joystick1, jx, jy, b1, b2)\r\n            % Convert joystick coordinates into screen coordinates.\r\n            x = round (maxx * (jx  joyMin) / (joyMax  joyMin))\r\n            y = round (maxy * (jy  joyMin) / (joyMax  joyMin))\r\n            if x not= ox or y not= oy or  b1 not= oB1 or b2 not= oB2 then\r\n                Text.Locate (1, 1)\r\n                put \"x = \", x, \"  y = \", y, \"  b1 = \", b1, \"  b2 = \", b2\r\n                View.Set (\"xor\")\r\n                Draw.Line (ox  10, oy, ox + 10, oy, brightred)\r\n                Draw.Line (ox , oy  10, ox , oy + 10, brightred)\r\n                Draw.Line (x  10, y, x + 10, y, brightred)\r\n                Draw.Line (x, y  10, x, y + 10, brightred)\r\n                ox := x\r\n                oy := y\r\n                oB1 := b1\r\n                oB2 := b2\r\n            end if\r\n        end loop"
      ],
      "raw_content": "The following program outputs the current location of joystick #1 and draws a cursor on the screen to point out where it is showing.<p>\r\n</p>",
      "text_content": " The following program outputs the current location of joystick #1 and draws a cursor on the screen to point out where it is showing.\r\n\r\n",
      "mdown_content": "The following program outputs the current location of joystick #1 and draws a cursor on the screen to point out where it is showing."
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>Joystick.GetInfo</b>, not by calling <b>GetInfo</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling Joystick.GetInfo, not by calling GetInfo.\r\n",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **Joystick.GetInfo**, not by calling **GetInfo**."
    }
  ],
  "dependencies": [

  ]
}
