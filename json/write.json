{
  "title": "write",
  "fileName": "write",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>writeStatement</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>write</b> : <i>fileNumber</i> [:<i>status</i> ], <i>writeItem</i> {, <i>writeItem</i>}</font></td>\n</tr></table>\n<p></p>",
      "text_content": " A writeStatement is:\r\n write : fileNumber [:status ], writeItem {, writeItem}",
      "mdown_content": "A _writeStatement_ is:\n\n**write** : _fileNumber_ [:_status_ ], _writeItem_ {, _writeItem_}\n"
    },
    {
      "title": "Description",
      "raw_content": "The <b>write</b> statement outputs each of the <i>writeItems</i> to the specified file. These items are output directly using the <i>binary </i>format that they have in the computer. In other words, the items are not in source (ASCII or EBCDIC) format. In the common case, these items will later be input from the file using the <b>read</b> statement. By contrast, the <b>get</b> and <b>put</b> statements use source format, which a person can read using a text editor.<p>\r\n</p>",
      "text_content": " The write statement outputs each of the writeItems to the specified file. These items are output directly using the binary format that they have in the computer. In other words, the items are not in source (ASCII or EBCDIC) format. In the common case, these items will later be input from the file using the read statement. By contrast, the get and put statements use source format, which a person can read using a text editor.\r\n",
      "mdown_content": "The **write** statement outputs each of the _writeItems_ to the specified file. These items are output directly using the _binary _format that they have in the computer. In other words, the items are not in source (ASCII or EBCDIC) format. In the common case, these items will later be input from the file using the **read** statement. By contrast, the **get** and **put** statements use source format, which a person can read using a text editor."
    },
    {
      "title": "Example",
      "code": [
        "        var employeeRecord :\r\n            record\r\n                name : string ( 30 )\r\n                pay : int\r\n                dept : 0 .. 9\r\n            end record\r\n        var fileNo : int\r\n        open : fileNo, \"payroll\", write\r\n        \r\n        write : fileNo, employeeRecord"
      ],
      "raw_content": "This example shows how to output a complete employee record using a <b>write</b> statement.<p>\r\n</p>",
      "text_content": " This example shows how to output a complete employee record using a write statement.\r\n\r\n",
      "mdown_content": "This example shows how to output a complete employee record using a **write** statement."
    },
    {
      "title": "Details",
      "code": [
        "        reference [ : requestedSize [ : actualSize ] ]"
      ],
      "raw_content": "An array, record or union may be read and written as a whole. The <i>fileNumber</i> must specify a file that is open with <b>write</b> capability (or else a program argument file that is implicitly opened).<p>\r\nThe optional <i>status</i> is an <b>int</b> variable that is set to implementation-dependent information about the <b>write</b>. If <i>status</i> is returned as zero, the <b>write</b> was successful. If <i>status</i> is not returned as zero, <i>status</i> gives information about the incomplete or failed <b>write</b> (which is not documented here). Programmers often use <i>status </i>when they are writing a record or array to a file and are not sure if there is enough room on the disk to hold the item. If there is not enough room, the <b>write</b> will fail part way through, but the program can continue and diagnose the problem by inspecting <i>status</i>.</p>\n<p>\r\nA <i>writeItem</i> is:</p>\n<p>\r\n</p>\r\nEach <i>writeItem</i> is a variable or constant, to be written in internal form. The optional <i>requestedSize</i> is an integer expression giving the number of bytes of data to be written. The <i>requestedSize</i> should be less than or equal to the size of the item's internal form in memory (if it is not, a warning message is issued). If no <i>requestedSize</i> is given, the size of the item in memory is used. The optional <i>actualSize</i> is set to the number of bytes actually written.<p>\r\n</p>",
      "text_content": " An array, record or union may be read and written as a whole. The fileNumber must specify a file that is open with write capability (or else a program argument file that is implicitly opened).\r\nThe optional status is an int variable that is set to implementation-dependent information about the write. If status is returned as zero, the write was successful. If status is not returned as zero, status gives information about the incomplete or failed write (which is not documented here). Programmers often use status when they are writing a record or array to a file and are not sure if there is enough room on the disk to hold the item. If there is not enough room, the write will fail part way through, but the program can continue and diagnose the problem by inspecting status.\r\nA writeItem is:\r\n\r\nEach writeItem is a variable or constant, to be written in internal form. The optional requestedSize is an integer expression giving the number of bytes of data to be written. The requestedSize should be less than or equal to the size of the item's internal form in memory (if it is not, a warning message is issued). If no requestedSize is given, the size of the item in memory is used. The optional actualSize is set to the number of bytes actually written.\r\n",
      "mdown_content": "An array, record or union may be read and written as a whole. The _fileNumber_ must specify a file that is open with **write** capability (or else a program argument file that is implicitly opened).\nThe optional _status_ is an **int** variable that is set to implementation-dependent information about the **write**. If _status_ is returned as zero, the **write** was successful. If _status_ is not returned as zero, _status_ gives information about the incomplete or failed **write** (which is not documented here). Programmers often use _status _when they are writing a record or array to a file and are not sure if there is enough room on the disk to hold the item. If there is not enough room, the **write** will fail part way through, but the program can continue and diagnose the problem by inspecting _status_.\nA _writeItem_ is:\nEach _writeItem_ is a variable or constant, to be written in internal form. The optional _requestedSize_ is an integer expression giving the number of bytes of data to be written. The _requestedSize_ should be less than or equal to the size of the item's internal form in memory (if it is not, a warning message is issued). If no _requestedSize_ is given, the size of the item in memory is used. The optional _actualSize_ is set to the number of bytes actually written."
    },
    {
      "title": "See also",
      "links": [
        "",
        "open",
        "close",
        "seek",
        "tell",
        "get",
        "put"
      ],
      "raw_content": "<b><a href=\"\">write</a></b>, <b><a href=\"open.html\">open</a></b>, <b><a href=\"close.html\">close</a></b>, <b><a href=\"seek.html\">seek</a></b>, <b><a href=\"tell.html\">tell</a></b>, <b><a href=\"get.html\">get</a></b> and <b><a href=\"put.html\">put</a></b> statements.<p>\r\n</p>",
      "text_content": " write, open, close, seek, tell, get and put statements.\r\n",
      "mdown_content": "**[](write)**, **[open.html](open)**, **[close.html](close)**, **[seek.html](seek)**, **[tell.html](tell)**, **[get.html](get)** and **[put.html](put)** statements."
    }
  ],
  "dependencies": [

  ]
}
