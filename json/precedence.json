{
  "title": "precedence",
  "fileName": "precedence",
  "sections": [
    {
      "title": "Description",
      "raw_content": "Turing's <i>precedence </i>rules determine the order of applying operators in an expression such as 3 + 4 * 5. These rules state, for example, that multiplication is done before addition, so this expression is equivalent to 3+ (4 * 5).<p>\r\nParenthesized parts of an expression are evaluated before being used. For example, in (1 + 2) * 3, the addition is done before the multiplication.</p>\n<p>\r\nThe precedence rules are defined by this table, in which operators appearing earlier in the table are applied first. For example,  multiplication is applied before addition:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(1)</td>\n<td width=\"10\">&nbsp;</td>\n<td>**,  ^,  #</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(2)</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<i>prefix</i> + and -</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(3)</td>\n<td width=\"10\">&nbsp;</td>\n<td>*, /, <b>div</b>, <b>mod</b>, <b>rem</b>, <b>shr</b>, <b>shl</b>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(4)</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<i>infix </i>+, -, <b>xor</b>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(5)</td>\n<td width=\"10\">&nbsp;</td>\n<td>&lt;, &gt;, =, &lt;=, &gt;=, <b>not=</b>, <b>in</b>, <b>not</b> <b>in</b>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(6)</td>\n<td width=\"10\">&nbsp;</td>\n<td><b>not</b></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(7)</td>\n<td width=\"10\">&nbsp;</td>\n<td><b>and</b></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(8)</td>\n<td width=\"10\">&nbsp;</td>\n<td><b>or</b></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(9)</td>\n<td width=\"10\">&nbsp;</td>\n<td>=&gt;</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>( <i>boolean</i> <i>implication</i>)</td>\n</tr>\n</table>\n<p>\r\nOperators appearing on a single line in this table are applied from left to right. For example, <i>abc </i>is the same is (<i>ab</i>)<i>c</i>.</p>\n<p>\r\nHere are some examples illustrating precedence, in which the left and right expressions are equivalent:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>1**2</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>(1**2)</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>a</i>+<i>b</i>*<i>c</i>\n</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<i>a</i>+(<i>b</i>*<i>c</i>)</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>a</i>*<i>b/c</i>\n</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>(<i>a</i>*<i>b</i>)<i>/c</i>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>b </i><b>or</b> <i>c</i> <b>and</b> <i>d</i>\n</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<i>b </i><b>or</b> (<i>c </i><b>and</b> <i>d</i>)</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>x</i> &lt; <i>y </i><b>and</b> <i>y &lt; z</i>\n</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>(<i>x</i> &lt;<i> y</i>) <b>and</b><i> </i>(<i>y</i> &lt; <i>z</i>)</td>\n</tr>\n</table>\n<p>\r\nThe final example illustrates the fact that in Turing, parentheses are not required when combining comparisons using <b>and</b> and <b>or</b>. These would be required in the Pascal language.</p>\n<p>\r\nThe type cheat operator # is applied after subscripting, subprogram calling, dotting, and &gt;. For example, in each of the following, # applies to the entire reference to the right.</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>#<i>a</i>(<i>i</i>)</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>#<i>r</i>.<i>y</i>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>#<i>p</i>-&gt;<i>x</i>\n</td>\n</tr>\n</table>\n<p>\r\nThe pointer following operator ^ is applied before subscripting, subprogram calling, dotting, and -&gt;. For example, in the following, ^ applies to a, r and p.</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>^<i>a</i>(<i>i</i>)</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>^<i>r.y</i>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>^<i>p</i>-&gt;<i>x</i>\n</td>\n</tr>\n</table>\n<p>\r\nUse parentheses to force ^ to apply to more of the reference. For example, in ^(a(i)), the ^ applies to a(i).</p>\n<p>\r\n</p>",
      "mdown_content": "Turing's *precedence *rules determine the order of applying operators in an expression such as 3 + 4 * 5. These rules state, for example, that multiplication is done before addition, so this expression is equivalent to 3+ (4 * 5).\nParenthesized parts of an expression are evaluated before being used. For example, in (1 + 2) * 3, the addition is done before the multiplication.\n\nThe precedence rules are defined by this table, in which operators appearing earlier in the table are applied first. For example,  multiplication is applied before addition:\n\n\n \n(1)\n \n**,  ^,  #\n \n(2)\n \n\n*prefix* + and -\n \n(3)\n \n*, /, **div**, **mod**, **rem**, **shr**, **shl**\n\n \n(4)\n \n\n*infix *+, -, **xor**\n\n \n(5)\n \n<, >, =, <=, >=, **not=**, **in**, **not** **in**\n\n \n(6)\n \n**not**\n \n(7)\n \n**and**\n \n(8)\n \n**or**\n \n(9)\n \n=>\n \n \n( *boolean* *implication*)\n\nOperators appearing on a single line in this table are applied from left to right. For example, *abc *is the same is (*ab*)*c*.\n\nHere are some examples illustrating precedence, in which the left and right expressions are equivalent:\n\n\n \n1**2\n \n \n \n(1**2)\n \n\n*a*+*b***c*\n\n \n \n \n\n*a*+(*b***c*)\n \n\n*a***b/c*\n\n \n \n \n(*a***b*)*/c*\n\n \n\n*b ***or** *c* **and** *d*\n\n \n \n\n*b ***or** (*c ***and** *d*)\n \n\n*x* < *y ***and** *y < z*\n\n \n \n(*x* <* y*) **and*** *(*y* < *z*)\n\nThe final example illustrates the fact that in Turing, parentheses are not required when combining comparisons using **and** and **or**. These would be required in the Pascal language.\n\nThe type cheat operator # is applied after subscripting, subprogram calling, dotting, and >. For example, in each of the following, # applies to the entire reference to the right.\n\n\n \n#*a*(*i*)\n \n#*r*.*y*\n\n \n#*p*->*x*\n\n\nThe pointer following operator ^ is applied before subscripting, subprogram calling, dotting, and ->. For example, in the following, ^ applies to a, r and p.\n\n\n \n^*a*(*i*)\n \n^*r.y*\n\n \n^*p*->*x*\n\n\nUse parentheses to force ^ to apply to more of the reference. For example, in ^(a(i)), the ^ applies to a(i).\n"
    },
    {
      "title": "See also",
      "links": [
        "infix",
        "prefix",
        "int",
        "real",
        "string1",
        "boolean",
        "set",
        "enum",
        "char",
        "char"
      ],
      "raw_content": "<i><a href=\"infix.html\">infix</a></i> and <i><a href=\"prefix.html\">prefix</a> </i>operators. See the <b><a href=\"int.html\">int</a></b>, <b><a href=\"real.html\">real</a></b>, <b><a href=\"string1.html\">string</a></b>, <b><a href=\"boolean.html\">boolean</a></b>, <b><a href=\"set.html\">set</a></b>, <b><a href=\"enum.html\">enum</a></b>, <b><a href=\"char.html\">char</a></b> and <b><a href=\"char.html\">char</a></b>(<i>n</i>) types.<p>\r\n</p>",
      "mdown_content": "*[infix.html](infix)* and *[prefix.html](prefix) *operators. See the **[int.html](int)**, **[real.html](real)**, **[string1.html](string)**, **[boolean.html](boolean)**, **[set.html](set)**, **[enum.html](enum)**, **[char.html](char)** and **[char.html](char)**(*n*) types."
    }
  ]
}
