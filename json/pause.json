{
  "title": "pause",
  "fileName": "pause",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>pauseStatement</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>pause</b> <i>expn</i></font></td>\n</tr></table>\n<p></p>",
      "text_content": " A pauseStatement is:\r\n pause expn",
      "mdown_content": "A *pauseStatement* is:\n **pause** *expn*"
    },
    {
      "title": "Description",
      "raw_content": "The <b>pause</b> statement blocks the program (or just the process in the case of a concurrent program) for a given number of simulated time units. The <i>expn</i> must be a non-negative <b>int</b> value giving the number of time units. This is analogous to the <b>delay</b> statement, which causes blocking for a given amount of real time (actual physical time).<p>\r\nThe interpreter maintains a counter which it considers to be simulated time. The only execution that causes this counter to increase is the <b>pause</b> statement. The process executing the <b>pause</b> is blocked until the counter has counted forward the number of units given by <i>expn</i>. All other statements (except <b>wait</b>) are considered to be infinitely fast. Several processes can be executing <b>pause</b> statements simultaneously.</p>\n<p>\r\nThe use of simulated time allows Turing to be used as a simulation language in which the <b>pause</b> statement simulates the passage of time in the simulated system.</p>\n<p>\r\n</p>",
      "text_content": " The pause statement blocks the program (or just the process in the case of a concurrent program) for a given number of simulated time units. The expn must be a non-negative int value giving the number of time units. This is analogous to the delay statement, which causes blocking for a given amount of real time (actual physical time).\r\nThe interpreter maintains a counter which it considers to be simulated time. The only execution that causes this counter to increase is the pause statement. The process executing the pause is blocked until the counter has counted forward the number of units given by expn. All other statements (except wait) are considered to be infinitely fast. Several processes can be executing pause statements simultaneously.\r\nThe use of simulated time allows Turing to be used as a simulation language in which the pause statement simulates the passage of time in the simulated system.\r\n",
      "mdown_content": "The **pause** statement blocks the program (or just the process in the case of a concurrent program) for a given number of simulated time units. The *expn* must be a non-negative **int** value giving the number of time units. This is analogous to the **delay** statement, which causes blocking for a given amount of real time (actual physical time).\nThe interpreter maintains a counter which it considers to be simulated time. The only execution that causes this counter to increase is the **pause** statement. The process executing the **pause** is blocked until the counter has counted forward the number of units given by *expn*. All other statements (except **wait**) are considered to be infinitely fast. Several processes can be executing **pause** statements simultaneously.\nThe use of simulated time allows Turing to be used as a simulation language in which the **pause** statement simulates the passage of time in the simulated system."
    }
  ],
  "dependencies": [

  ]
}
