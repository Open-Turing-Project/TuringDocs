{
  "title": "Error.Last",
  "fileName": "error_last",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Error.Last</b> : <b>int</b><p>\r\n</p></font>",
      "text_content": " Error.Last : int\r\n",
      "mdown_content": "**Error.Last** : **int**"
    },
    {
      "title": "Description",
      "raw_content": "<b>Error.Last</b> is a function that returns the error code set by the last called predefined subprogram. If there is no error, then it returns <i>eNoError</i> (which is 0). If there is an error, you can use <b>Error.LastMsg</b> to obtain a textual form of the error or <b>Error.LastStr</b> to obtain a string version of the error constant.<p>\r\nThe fact that <b>Error.Last</b> is not <i>eNoError</i> does not necessarily mean that the previous predefined function failed or failed completely. <b>Error.Last</b> also returns a number of warning codes. For example, if a user specifies a number larger than <b>maxcolor</b> for the <i>color</i> parameter of the <b>Draw.Line</b> procedure, the line is still drawn, only in color <b>maxcolor</b>. However, <b>Error.Last</b> will return a code that warns the user of the fact.</p>\n<p>\r\n</p>",
      "text_content": " Error.Last is a function that returns the error code set by the last called predefined subprogram. If there is no error, then it returns eNoError (which is 0). If there is an error, you can use Error.LastMsg to obtain a textual form of the error or Error.LastStr to obtain a string version of the error constant.\r\nThe fact that Error.Last is not eNoError does not necessarily mean that the previous predefined function failed or failed completely. Error.Last also returns a number of warning codes. For example, if a user specifies a number larger than maxcolor for the color parameter of the Draw.Line procedure, the line is still drawn, only in color maxcolor. However, Error.Last will return a code that warns the user of the fact.\r\n",
      "mdown_content": "**Error.Last** is a function that returns the error code set by the last called predefined subprogram. If there is no error, then it returns *eNoError* (which is 0). If there is an error, you can use **Error.LastMsg** to obtain a textual form of the error or **Error.LastStr** to obtain a string version of the error constant.\nThe fact that **Error.Last** is not *eNoError* does not necessarily mean that the previous predefined function failed or failed completely. **Error.Last** also returns a number of warning codes. For example, if a user specifies a number larger than **maxcolor** for the *color* parameter of the **Draw.Line** procedure, the line is still drawn, only in color **maxcolor**. However, **Error.Last** will return a code that warns the user of the fact."
    },
    {
      "title": "Example",
      "code": [
        "        var f : int\r\n        open : f, \"testdata/information.txt\", get\r\n        if f <= 0 then\r\n            put \"File opened\"\r\n        else\r\n            put \"Could not open file.\"\r\n            put \"Error Number: \", Error.Last\r\n            put \"Error Message: \", Error.LastMsg\r\n            put \"Error Constant: \", Error.LastStr\r\n        end if"
      ],
      "raw_content": "This program creates the directory called <i>information</i>. If the creation fails, it prints out the error number and an error message.<p>\r\n</p>",
      "text_content": " This program creates the directory called information. If the creation fails, it prints out the error number and an error message.\r\n\r\n",
      "mdown_content": "This program creates the directory called *information*. If the creation fails, it prints out the error number and an error message."
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Error.Last Example",
          "file": "Error.Last.t"
        }
      ]
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>Error.Last</b>, not by calling <b>Last</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling Error.Last, not by calling Last.\r\n",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **Error.Last**, not by calling **Last**."
    }
  ]
}
