{
  "title": "infix",
  "fileName": "infix",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "An <i>infixOperator</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>+</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Integer and real addition; set union;</i> </font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\"><i>% string catenation</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\">-</font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Integer and real subtraction; set difference</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(c)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>*</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Integer and real multiplication; set intersection</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(d)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>/</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Real division</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(e)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>div</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Truncating integer division</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(f)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>mod</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Modulo</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(g)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>rem</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Remainder</i> </font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(h)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>**</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Integer and real exponentiation</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(i)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>&lt;</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Less than</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(j)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>&gt;</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Greater than</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(k)</font></td>\n<td colspan=\"7\"><font size=\"+1\">=</font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Equal</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(l)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>&lt;</b>=</font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Less than or equal; subset</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(m)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>&gt;</b>=</font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Greater than or equal; superset</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(n)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>not=</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Not equal</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(o)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>and</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% And (boolean conjunction)</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(p)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>or</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Or (boolean disjunction)</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(q)</font></td>\n<td colspan=\"7\"><font size=\"+1\">=<b>&gt;</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Boolean implication</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(r)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>in</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Member of set</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(s)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>not</b> <b>in</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Not member of set</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(t)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>shr</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Shift right</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(u)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>shl</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Shift left</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(v)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>xor</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% Exclusive OR</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " An infixOperator is one of:\r\n (a)+ % Integer and real addition; set union;    % string catenation (b)- % Integer and real subtraction; set difference (c)* % Integer and real multiplication; set intersection (d)/ % Real division (e)div % Truncating integer division (f)mod % Modulo (g)rem % Remainder  (h)** % Integer and real exponentiation (i)< % Less than (j)> % Greater than (k)= % Equal (l)<= % Less than or equal; subset (m)>= % Greater than or equal; superset (n)not= % Not equal (o)and % And (boolean conjunction) (p)or % Or (boolean disjunction) (q)=> % Boolean implication (r)in % Member of set (s)not in % Not member of set (t)shr % Shift right (u)shl % Shift left (v)xor % Exclusive OR",
      "mdown_content": "An _infixOperator_ is one of:\n\n(a)**+** _% Integer and real addition; set union;_ \n_% string catenation_\n(b)- _% Integer and real subtraction; set difference_\n(c)__*__ _% Integer and real multiplication; set intersection_\n(d)**/** _% Real division_\n(e)**div** _% Truncating integer division_\n(f)**mod** _% Modulo_\n(g)**rem** _% Remainder_ \n(h)****** _% Integer and real exponentiation_\n(i)**<** _% Less than_\n(j)**>** _% Greater than_\n(k)= _% Equal_\n(l)**<**= _% Less than or equal; subset_\n(m)**>**= _% Greater than or equal; superset_\n(n)**not=** _% Not equal_\n(o)**and** _% And (boolean conjunction)_\n(p)**or** _% Or (boolean disjunction)_\n(q)=**>** _% Boolean implication_\n(r)**in** _% Member of set_\n(s)**not** **in** _% Not member of set_\n(t)**shr** _% Shift right_\n(u)**shl** _% Shift left_\n(v)**xor** _% Exclusive OR_\n"
    },
    {
      "title": "Description",
      "raw_content": "An <i>infix operator</i> is placed between two values or <i>operands</i> to produce a third value. For example, the result of 5 + 7 is 12. In some cases the meaning of the operator is determined by its operands. For example, in \"pine\" + \"apple\", the + operator means string catenation while in 5 + 7 it means integer addition. There are also <i>prefix operators</i> (-, + and <b>not</b>), which are placed in front of a single value. See <i>prefix operator</i>.<p>\r\nIn expressions with several operators, such as 3 + 4 * 5, the <i>precedence </i>rules determine the order in which the operation is done  (see <i>precedence </i>for a listing of these rules). In this example, the multiplication is done before the addition, so the expression is equivalent to 3 + (4 * 5).</p>\n<p>\r\nThe numerical (integer or real) operators are +, -, *, /, <b>div</b>, <b>mod</b>, and **. All of these except <b>div</b> produce a <b>real</b> result when at least one of their operands is <b>real</b>. If both operands are integers, the result is an integer except in the case of <b>real</b> division (/) which always produces a <b>real</b> result regardless of the operands.</p>\n<p>\r\nThe <b>div</b> operator is like <b>real</b> division (<b>/</b>), except that it always produces an integer result, truncating any fraction to produce the nearest integer in the direction of zero.</p>\n<p>\r\nThe <b>mod</b> operator is the <i>modulo</i> and the <b>rem</b> operator is the <i>remainder</i>. The sign of the result of <b>mod<i> </i></b>operator is the same as the sign of the second operand. The <b>rem</b> operator operates like the <b>mod</b> operator in Turing (and in most other languages). It produces the remainder, which is the difference between <b>real</b> division (<b>/</b>) and integer division (<b>div</b>). When both operands are positive, this is the <i>modulo</i>. For example, 14 <b>mod</b> 10 is 4. If one of the operands is negative, a negative answer may result, for example, 7 <b>mod</b> 2 is 1. See also the <b>int</b> and <b>real</b> types.</p>\n<p>\r\nThe comparison operators (&lt;, &gt;, =, &lt;=, &gt;=, <b>not=</b>) can be applied to numbers as well as to enumerated types. They can also be applied to strings to determine the <i>ordering</i> between strings (see <b>string</b> type for details). Arrays, records, unions and collections cannot be compared. Boolean values (<b>true</b> and <b>false</b>) can be compared only for equality (= and <b>not=</b>); the same applies to <b>pointer</b> values. Set values can be compared using &lt;= and &gt;=, which are the subset and superset operators. The <b>not=</b> operator can be written as ~=.</p>\n<p>\r\nStrings are manipulated using catenation (+) as well as substring expressions (see <i>substring</i>) and the <b>index</b><i> </i>function (see <b>index</b>). See also the <b>string</b> type.</p>\n<p>\r\nThe operators to combine true/false values are <b>and</b>, <b>or</b>, and =&gt; (implication), as well as equality (= and <b>not=</b>). See also the <b>boolean</b> type.</p>\n<p>\r\nThe set operators are union (+), intersection (*), set difference (-), subset (&lt;=), superset (&gt;=), and membership (<b>in</b> and <b>not</b> <b>in</b>). See also the <b>set</b> type.</p>\n<p>\r\nThe <b>shr</b> (shift right), <b>shl</b> (shift left) and <b>xor</b> (exclusive OR) operators accept and produce natural numbers. See <b>shr</b>, <b>shl</b>, and <b>xor</b>.</p>\n<p>\r\n</p>",
      "text_content": " An infix operator is placed between two values or operands to produce a third value. For example, the result of 5 + 7 is 12. In some cases the meaning of the operator is determined by its operands. For example, in \"pine\" + \"apple\", the + operator means string catenation while in 5 + 7 it means integer addition. There are also prefix operators (-, + and not), which are placed in front of a single value. See prefix operator.\r\nIn expressions with several operators, such as 3 + 4 * 5, the precedence rules determine the order in which the operation is done  (see precedence for a listing of these rules). In this example, the multiplication is done before the addition, so the expression is equivalent to 3 + (4 * 5).\r\nThe numerical (integer or real) operators are +, -, *, /, div, mod, and **. All of these except div produce a real result when at least one of their operands is real. If both operands are integers, the result is an integer except in the case of real division (/) which always produces a real result regardless of the operands.\r\nThe div operator is like real division (/), except that it always produces an integer result, truncating any fraction to produce the nearest integer in the direction of zero.\r\nThe mod operator is the modulo and the rem operator is the remainder. The sign of the result of mod operator is the same as the sign of the second operand. The rem operator operates like the mod operator in Turing (and in most other languages). It produces the remainder, which is the difference between real division (/) and integer division (div). When both operands are positive, this is the modulo. For example, 14 mod 10 is 4. If one of the operands is negative, a negative answer may result, for example, 7 mod 2 is 1. See also the int and real types.\r\nThe comparison operators (<, >, =, <=, >=, not=) can be applied to numbers as well as to enumerated types. They can also be applied to strings to determine the ordering between strings (see string type for details). Arrays, records, unions and collections cannot be compared. Boolean values (true and false) can be compared only for equality (= and not=); the same applies to pointer values. Set values can be compared using <= and >=, which are the subset and superset operators. The not= operator can be written as ~=.\r\nStrings are manipulated using catenation (+) as well as substring expressions (see substring) and the index function (see index). See also the string type.\r\nThe operators to combine true/false values are and, or, and => (implication), as well as equality (= and not=). See also the boolean type.\r\nThe set operators are union (+), intersection (*), set difference (-), subset (<=), superset (>=), and membership (in and not in). See also the set type.\r\nThe shr (shift right), shl (shift left) and xor (exclusive OR) operators accept and produce natural numbers. See shr, shl, and xor.\r\n",
      "mdown_content": "An _infix operator_ is placed between two values or _operands_ to produce a third value. For example, the result of 5 + 7 is 12. In some cases the meaning of the operator is determined by its operands. For example, in \"pine\" + \"apple\", the + operator means string catenation while in 5 + 7 it means integer addition. There are also _prefix operators_ (-, + and **not**), which are placed in front of a single value. See _prefix operator_.\nIn expressions with several operators, such as 3 + 4 * 5, the _precedence _rules determine the order in which the operation is done  (see _precedence _for a listing of these rules). In this example, the multiplication is done before the addition, so the expression is equivalent to 3 + (4 * 5).\nThe numerical (integer or real) operators are +, -, *, /, **div**, **mod**, and **. All of these except **div** produce a **real** result when at least one of their operands is **real**. If both operands are integers, the result is an integer except in the case of **real** division (/) which always produces a **real** result regardless of the operands.\nThe **div** operator is like **real** division (**/**), except that it always produces an integer result, truncating any fraction to produce the nearest integer in the direction of zero.\nThe **mod** operator is the _modulo_ and the **rem** operator is the _remainder_. The sign of the result of **mod_ _**operator is the same as the sign of the second operand. The **rem** operator operates like the **mod** operator in Turing (and in most other languages). It produces the remainder, which is the difference between **real** division (**/**) and integer division (**div**). When both operands are positive, this is the _modulo_. For example, 14 **mod** 10 is 4. If one of the operands is negative, a negative answer may result, for example, 7 **mod** 2 is 1. See also the **int** and **real** types.\nThe comparison operators (<, >, =, <=, >=, **not=**) can be applied to numbers as well as to enumerated types. They can also be applied to strings to determine the _ordering_ between strings (see **string** type for details). Arrays, records, unions and collections cannot be compared. Boolean values (**true** and **false**) can be compared only for equality (= and **not=**); the same applies to **pointer** values. Set values can be compared using <= and >=, which are the subset and superset operators. The **not=** operator can be written as ~=.\nStrings are manipulated using catenation (+) as well as substring expressions (see _substring_) and the **index**_ _function (see **index**). See also the **string** type.\nThe operators to combine true/false values are **and**, **or**, and => (implication), as well as equality (= and **not=**). See also the **boolean** type.\nThe set operators are union (+), intersection (*), set difference (-), subset (<=), superset (>=), and membership (**in** and **not** **in**). See also the **set** type.\nThe **shr** (shift right), **shl** (shift left) and **xor** (exclusive OR) operators accept and produce natural numbers. See **shr**, **shl**, and **xor**."
    }
  ],
  "dependencies": [

  ]
}
