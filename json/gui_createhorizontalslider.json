{
  "title": "GUI.CreateHorizontalSlider",
  "fileName": "gui_createhorizontalslider",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>GUI.CreateHorizontalSlider</b> (<i>x</i>, <i>y</i>, <i>length</i> : <b>int</b>,<br>\r\n\t  &nbsp;&nbsp;&nbsp;&nbsp;<i>min</i>, <i>max</i>, <i>start</i> : <b>int</b>, <i>actionProc</i> : <b>procedure</b> <i>x</i> (<i>value</i> : <b>int</b>)) : <b>int</b><p></p></font>",
      "text_content": "GUI.CreateHorizontalSlider (x, y, length : int,\r\n\t      min, max, start : int, actionProc : procedure x (value : int)) : int\r\n    ",
      "mdown_content": "**GUI.CreateHorizontalSlider** (_x_, _y_, _length_ : **int**,    _min_, _max_, _start_ : **int**, _actionProc_ : **procedure** _x_ (_value_ : **int**)) : **int**\n"
    },
    {
      "title": "Description",
      "images": [
        "gui_createhorizontalslider01.gif"
      ],
      "raw_content": "Creates a horizontal (left-right) slider and returns the slider's widget ID. <p>\r\nA slider is a widget that allows the user to set a continuous set of values. It has a real-life equivalent in things such as a stereo volume control.</p>\n<p>\r\n\r\n</p>\n<center><img src=\"gui_createhorizontalslider01.gif\"></center>\r\n<center><b>A Horizontal Slider</b></center>\n<p>\r\nTo control a slider, the user clicks on the slider box and drags it back and forth. Every time the value changes, a procedure is called with the new value as a parameter.</p>\n<p>\r\nThe range of values that the slider will give is determined by the <i>min</i> and <i>max</i> parameters in the <i>Create</i> call. The left side of the slider represents the minimum value, while the right represents the maximum value. </p>\n<p>\r\nThe <i>x</i> and <i>y</i> parameters specify the lower-left corner of the slider track. This means that the slider actually extends above and below this point (and slightly to the left of it to take into account the rounded end of the track). The <i>length</i> parameter specifies the length of the track in pixels. (You can use <b>GUI.GetX</b><i>, </i><b>GetY</b><i>, </i><b>GetWidth</b>, and <b>GetHeight</b> to get the exact dimensions of the slider.) The <i>min</i> and <i>max</i> parameters are the minimum and maximum values returned by the slider. The <i>start</i> parameter is the initial value of the slider and should be between <i>min</i> and <i>max</i> inclusive. The <i>actionProc </i>parameter<i> </i>is the name of a procedure that is called when the value of the slider is changed. The parameter to the <i>action procedure </i>is the current value of the slider.</p>\n<p>\r\n</p>",
      "text_content": " Creates a horizontal (left-right) slider and returns the slider's widget ID. \r\nA slider is a widget that allows the user to set a continuous set of values. It has a real-life equivalent in things such as a stereo volume control.\r\n\r\n\r\nA Horizontal Slider\r\nTo control a slider, the user clicks on the slider box and drags it back and forth. Every time the value changes, a procedure is called with the new value as a parameter.\r\nThe range of values that the slider will give is determined by the min and max parameters in the Create call. The left side of the slider represents the minimum value, while the right represents the maximum value. \r\nThe x and y parameters specify the lower-left corner of the slider track. This means that the slider actually extends above and below this point (and slightly to the left of it to take into account the rounded end of the track). The length parameter specifies the length of the track in pixels. (You can use GUI.GetX, GetY, GetWidth, and GetHeight to get the exact dimensions of the slider.) The min and max parameters are the minimum and maximum values returned by the slider. The start parameter is the initial value of the slider and should be between min and max inclusive. The actionProc parameter is the name of a procedure that is called when the value of the slider is changed. The parameter to the action procedure is the current value of the slider.\r\n",
      "mdown_content": "Creates a horizontal (left-right) slider and returns the slider's widget ID. \n\nA slider is a widget that allows the user to set a continuous set of values. It has a real-life equivalent in things such as a stereo volume control.\n\n\n\n![Doc Image](gui_createhorizontalslider01.gif)\n\n**A Horizontal Slider**\n\nTo control a slider, the user clicks on the slider box and drags it back and forth. Every time the value changes, a procedure is called with the new value as a parameter.\n\nThe range of values that the slider will give is determined by the _min_ and _max_ parameters in the _Create_ call. The left side of the slider represents the minimum value, while the right represents the maximum value. \n\nThe _x_ and _y_ parameters specify the lower-left corner of the slider track. This means that the slider actually extends above and below this point (and slightly to the left of it to take into account the rounded end of the track). The _length_ parameter specifies the length of the track in pixels. (You can use **GUI.GetX**_,_ **GetY**_,_ **GetWidth**, and **GetHeight** to get the exact dimensions of the slider.) The _min_ and _max_ parameters are the minimum and maximum values returned by the slider. The _start_ parameter is the initial value of the slider and should be between _min_ and _max_ inclusive. The _actionProc_ parameter is the name of a procedure that is called when the value of the slider is changed. The parameter to the _action procedure_ is the current value of the slider.\n"
    },
    {
      "title": "Example",
      "code": [
        "        import GUI \r\n        \r\n        View.Set (\"graphics:300;60,nobuttonbar\") \r\n        var slider : int\r\n        procedure SliderMoved (value : int)\r\n            Text.Locate (2, 3)\r\n            put \"Horizontal Slider: \", value : 4\r\n        end SliderMoved \r\n        \r\n        slider := GUI.CreateHorizontalSlider (10, 10, 250,\r\n            50, 150, 50, SliderMoved )\r\n        loop\r\n            exit when GUI.ProcessEvent\r\n        end loop"
      ],
      "raw_content": "The following program creates a horizontal slider. Whenever the slider's value is changed, a message is displayed in the window.<p>\r\n</p>\n<p>\r\n    </p>",
      "text_content": " The following program creates a horizontal slider. Whenever the slider's value is changed, a message is displayed in the window.\r\n\r\n    ",
      "mdown_content": "The following program creates a horizontal slider. Whenever the slider's value is changed, a message is displayed in the window.\n\n\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "GUI.CreateHorizontalSlider Example",
          "file": "GUI.CreateHorizontalSlider.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "In some instances, you will want the the minimum and maximum values of the slider to be reversed (right is minimum). In that case, call the <b>GUI.SetSliderReverse</b> procedure to flip the values of the slider.<p>\r\nSliders always have a fixed height (for horizontal sliders) or width (for vertical sliders). </p>\n<p>\r\nWhen <b>GUI.CreateHorizontalSlider</b>or <b>GUI.CreateHorizontalSliderFull</b><i> </i>is called, the newly created slider will be displayed immediately unless <b>GUI.DisplayWhenCreated</b> has been called with the <i>display</i> parameter set to false. </p>\n<p>\r\nWhen a slider is not enabled, the appearance does not change. However, the slider no longer responds to any mouse clicks until it is enabled again.</p>\n<p>\r\n</p>",
      "text_content": " In some instances, you will want the the minimum and maximum values of the slider to be reversed (right is minimum). In that case, call the GUI.SetSliderReverse procedure to flip the values of the slider.\r\nSliders always have a fixed height (for horizontal sliders) or width (for vertical sliders). \r\nWhen GUI.CreateHorizontalSlideror GUI.CreateHorizontalSliderFull is called, the newly created slider will be displayed immediately unless GUI.DisplayWhenCreated has been called with the display parameter set to false. \r\nWhen a slider is not enabled, the appearance does not change. However, the slider no longer responds to any mouse clicks until it is enabled again.\r\n",
      "mdown_content": "In some instances, you will want the the minimum and maximum values of the slider to be reversed (right is minimum). In that case, call the **GUI.SetSliderReverse** procedure to flip the values of the slider.\n\nSliders always have a fixed height (for horizontal sliders) or width (for vertical sliders). \n\nWhen **GUI.CreateHorizontalSlider**or **GUI.CreateHorizontalSliderFull** is called, the newly created slider will be displayed immediately unless **GUI.DisplayWhenCreated** has been called with the _display_ parameter set to false. \n\nWhen a slider is not enabled, the appearance does not change. However, the slider no longer responds to any mouse clicks until it is enabled again.\n"
    },
    {
      "title": "Details",
      "raw_content": "The following GUI subprograms can be called with a slider as the <i>widgetID</i> parameter:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<b>GUI.Show</b>,<b> GUI.Hide</b>,<b> GUI.Enable</b>,<b> GUI.Disable</b>,<b> GUI.Dispose</b>, <b> GUI.GetX</b>,<b> GUI.GetY</b>,<b> GUI.GetWidth</b>,<b> GUI.GetHeight</b>,<b> GUI.SetPosition</b>,<b> GUI.SetSize</b>,<b> GUI.SetPositionAndSize</b>,<b> GUI.GetSliderValue</b>,<b> GUI.SetSliderValue</b>,<b> GUI.SetSliderMinMax</b>,<b> GUI.SetSliderSize</b>,<b> GUI.SetSliderReverse</b>\n</td>\n</tr></table>\n<p>\r\n</p>",
      "text_content": " The following GUI subprograms can be called with a slider as the widgetID parameter:\r\n GUI.Show, GUI.Hide, GUI.Enable, GUI.Disable, GUI.Dispose,  GUI.GetX, GUI.GetY, GUI.GetWidth, GUI.GetHeight, GUI.SetPosition, GUI.SetSize, GUI.SetPositionAndSize, GUI.GetSliderValue, GUI.SetSliderValue, GUI.SetSliderMinMax, GUI.SetSliderSize, GUI.SetSliderReverse\r\n",
      "mdown_content": "The following GUI subprograms can be called with a slider as the _widgetID_ parameter:\n\n\n**GUI.Show**, **GUI.Hide**, **GUI.Enable**, **GUI.Disable**, **GUI.Dispose**,  **GUI.GetX**, **GUI.GetY**, **GUI.GetWidth**, **GUI.GetHeight**, **GUI.SetPosition**, **GUI.SetSize**, **GUI.SetPositionAndSize**, **GUI.GetSliderValue**, **GUI.SetSliderValue**, **GUI.SetSliderMinMax**, **GUI.SetSliderSize**, **GUI.SetSliderReverse**\n\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>GUI.CreateHorizontalSlider</b>, not by calling <b>CreateHorizontalSlider</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling GUI.CreateHorizontalSlider, not by calling CreateHorizontalSlider.\r\n",
      "mdown_content": "Exported qualified.\n\nThis means that you can only call the function by calling **GUI.CreateHorizontalSlider**, not by calling **CreateHorizontalSlider**.\n"
    },
    {
      "title": "See also",
      "links": [
        "gui_getslidervalue",
        "gui_setslidervalue",
        "gui_setsliderminmax",
        "gui_setslidersize",
        "gui_setsliderreverse"
      ],
      "raw_content": "<b><a href=\"gui_getslidervalue.html\">GUI.GetSliderValue</a></b> and <b><a href=\"gui_setslidervalue.html\">GUI.SetSliderValue</a> </b>for reading and setting the value of a slider, <b><a href=\"gui_setsliderminmax.html\">GUI.SetSliderMinMax</a></b> for changing the minimum and maximum values of a slider. See also <b><a href=\"gui_setslidersize.html\">GUI.SetSliderSize</a> </b>for setting the length of a slider and <b><a href=\"gui_setsliderreverse.html\">GUI.SetSliderReverse</a></b> for reversing the sense of a slider.<p>\r\n</p>",
      "text_content": " GUI.GetSliderValue and GUI.SetSliderValue for reading and setting the value of a slider, GUI.SetSliderMinMax for changing the minimum and maximum values of a slider. See also GUI.SetSliderSize for setting the length of a slider and GUI.SetSliderReverse for reversing the sense of a slider.\r\n",
      "mdown_content": "**[gui_getslidervalue.html](GUI.GetSliderValue)** and **[gui_setslidervalue.html](GUI.SetSliderValue)** for reading and setting the value of a slider, **[gui_setsliderminmax.html](GUI.SetSliderMinMax)** for changing the minimum and maximum values of a slider. See also **[gui_setslidersize.html](GUI.SetSliderSize)** for setting the length of a slider and **[gui_setsliderreverse.html](GUI.SetSliderReverse)** for reversing the sense of a slider.\n"
    }
  ],
  "dependencies": [
    "gui_createhorizontalslider01.gif"
  ]
}
