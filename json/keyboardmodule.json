{
  "title": "Keyboard",
  "fileName": "keyboardmodule",
  "sections": [
    {
      "title": "Description",
      "raw_content": "This unit contains all the constants representing both the characters and their ordinal values for all possible keystrokes that can be read by Turing.<p>\r\nConstants beginning with &#147;KEY_&#148; are <b>char</b> values. These are the values returned by <b>getch</b> and used as an index into the<b> Input.KeyDown</b> array. The constants that the constants KEY_KEYPAD_5, KEY_SHIFT, KEY_CTRL and KEY_ALT can only be used in conjunction with <b>Input.KeyDown</b>. The <b>getch</b> and <b>getchar</b> subprograms do not return these values. All other constants with with SHIFT, CTRL and ALT as part of the name cannot be checked for in the <b>Input.KeyDown </b>array. </p>\n<p>\r\nConstants beginning with &#147;ORD_&#148;  are <b>int</b> values and represent the ordinal values (values returned by the <b>ord</b> function) for all the possible keystrokes.</p>\n<p>\r\nHere is a list of most of the constants</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td>KEY_F1 .. KEY_F12 </td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_A .. KEY_CTRL_Z</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_SHIFT_F1 .. KEY_SHIFT_F12</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_ALT_A .. KEY_ALT_Z</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_CTRL_F1 .. KEY_CTRL_F12</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_ALT_1 .. KEY_ALT_0</td>\n</tr>\n</table>\n<p>\r\nKEY_ALT_F1 .. KEY_ALT_F12</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\"></tr>\n<td>KEY_HOME</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_HOME</td>\r\n<tr valign=\"top\">\n<td>KEY_UP_ARROW</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_UP_ARROW</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_PGUP</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_PGUP</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_LEFT_ARROW</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_LEFT_ARROW</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_RIGHT_ARROW</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_RIGHT_ARROW</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_END</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_END</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_DOWN_ARROW</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_DOWN_ARROW</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_PGDN</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_PGDN</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_INSERT</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_INSERT</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_DELETE</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_DELETE</td>\n</tr>\n<tr valign=\"top\"></tr>\n<td>KEY_BACKSPACE</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_KEYPAD_5 *</td>\r\n<tr valign=\"top\">\n<td>KEY_TAB</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_SHIFT *</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_ENTER</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL *</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_ESC</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_ALT *</td>\n</tr>\n<tr valign=\"top\"></tr>\n<td>KEY_CTRL_OPEN_BRACKET</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_BACKSLASH</td>\r\n<tr valign=\"top\">\n<td>KEY_CTRL_CLOSE_BRACKET</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_CARET</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_CTRL_UNDERSCORE</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_CTRL_BACKSPACE</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_ALT_MINUS</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_ALT_EQUALS</td>\n</tr>\n<tr valign=\"top\">\n<td>KEY_BACK_TAB</td>\n<td width=\"10\">&nbsp;</td>\n<td>KEY_SHIFT_TAB</td>\n</tr>\n</table>\n<p>\r\n</p>\n<p>\r\nAbove constants with &#147;ORD_&#148; instead of  &#147;KEY_&#148; </p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\"></tr>\n<td>ORD_A .. ORD_Z </td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_0 .. ORD_9</td>\r\n<tr valign=\"top\">\n<td>ORD_LOWER_A .. ORD_LOWER_Z </td>\n<td width=\"40\">&nbsp;</td>\n</tr>\n<tr valign=\"top\"></tr>\n<td>ORD_SPACE</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_EXCALAMATION_MARK</td>\r\n<tr valign=\"top\">\n<td>ORD_QUOTATION_MARK</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_HAS_MARK</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_DOLLAR_SIGN</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_PERCENT_SIGN</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_AMPERSAND</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_SINGLE_QUOTE</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_OPEN_PARENTHESIS</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_CLOSE_PARENTHESIS</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_ASTERISK</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_PLUS</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_COMMA</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_MINUS</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_PERIOD</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_DOT</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_SLASH</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_COLON</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_SEMICOLON</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_LESS_THAN</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_EQUALS</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_GREATER_THAN</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_QUESTION_MARK</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_AT_SIGN</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_OPEN_BRACKET</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_BACKSLASH</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_CLOSE_BRACKET</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_CARET</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_UNDERSCORE</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_APOSTROPHE</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_OPEN_BRACE</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_BAR</td>\n</tr>\n<tr valign=\"top\">\n<td>ORD_CLOSE_BRACE</td>\n<td width=\"10\">&nbsp;</td>\n<td>ORD_TILDE</td>\n</tr>\n</table>\n<p>\r\n</p>\n<p>\r\nCharacters marked with an asterisk (*) are keys that can only be detected using<b> Input.KeyDown</b>.</p>\n<p>\r\n</p>\n<p>\r\nAll constants in the Keyboard module are exported unqualified. (This means you can use the constants directly without having to use the qualifier \"<b>Keyboard.</b>\".)</p>\n<p>\r\n</p>",
      "text_content": " This unit contains all the constants representing both the characters and their ordinal values for all possible keystrokes that can be read by Turing.\r\nConstants beginning with KEY_ are char values. These are the values returned by getch and used as an index into the Input.KeyDown array. The constants that the constants KEY_KEYPAD_5, KEY_SHIFT, KEY_CTRL and KEY_ALT can only be used in conjunction with Input.KeyDown. The getch and getchar subprograms do not return these values. All other constants with with SHIFT, CTRL and ALT as part of the name cannot be checked for in the Input.KeyDown array. \r\nConstants beginning with ORD_  are int values and represent the ordinal values (values returned by the ord function) for all the possible keystrokes.\r\nHere is a list of most of the constants\r\nKEY_F1 .. KEY_F12  KEY_CTRL_A .. KEY_CTRL_ZKEY_SHIFT_F1 .. KEY_SHIFT_F12 KEY_ALT_A .. KEY_ALT_ZKEY_CTRL_F1 .. KEY_CTRL_F12 KEY_ALT_1 .. KEY_ALT_0\r\nKEY_ALT_F1 .. KEY_ALT_F12\r\nKEY_HOME KEY_CTRL_HOME\r\nKEY_UP_ARROW KEY_CTRL_UP_ARROWKEY_PGUP KEY_CTRL_PGUPKEY_LEFT_ARROW KEY_CTRL_LEFT_ARROWKEY_RIGHT_ARROW KEY_CTRL_RIGHT_ARROWKEY_END KEY_CTRL_ENDKEY_DOWN_ARROW KEY_CTRL_DOWN_ARROWKEY_PGDN KEY_CTRL_PGDNKEY_INSERT KEY_CTRL_INSERTKEY_DELETE KEY_CTRL_DELETEKEY_BACKSPACE KEY_KEYPAD_5 *\r\nKEY_TAB KEY_SHIFT *KEY_ENTER KEY_CTRL *KEY_ESC KEY_ALT *KEY_CTRL_OPEN_BRACKET KEY_CTRL_BACKSLASH\r\nKEY_CTRL_CLOSE_BRACKET KEY_CTRL_CARETKEY_CTRL_UNDERSCORE KEY_CTRL_BACKSPACEKEY_ALT_MINUS KEY_ALT_EQUALSKEY_BACK_TAB KEY_SHIFT_TAB\r\n\r\nAbove constants with ORD_ instead of  KEY_ \r\nORD_A .. ORD_Z  ORD_0 .. ORD_9\r\nORD_LOWER_A .. ORD_LOWER_Z  ORD_SPACE ORD_EXCALAMATION_MARK\r\nORD_QUOTATION_MARK ORD_HAS_MARKORD_DOLLAR_SIGN ORD_PERCENT_SIGNORD_AMPERSAND ORD_SINGLE_QUOTEORD_OPEN_PARENTHESIS ORD_CLOSE_PARENTHESISORD_ASTERISK ORD_PLUSORD_COMMA ORD_MINUSORD_PERIOD ORD_DOTORD_SLASH ORD_COLONORD_SEMICOLON ORD_LESS_THANORD_EQUALS ORD_GREATER_THANORD_QUESTION_MARK ORD_AT_SIGNORD_OPEN_BRACKET ORD_BACKSLASHORD_CLOSE_BRACKET ORD_CARETORD_UNDERSCORE ORD_APOSTROPHEORD_OPEN_BRACE ORD_BARORD_CLOSE_BRACE ORD_TILDE\r\n\r\nCharacters marked with an asterisk (*) are keys that can only be detected using Input.KeyDown.\r\n\r\nAll constants in the Keyboard module are exported unqualified. (This means you can use the constants directly without having to use the qualifier \"Keyboard.\".)\r\n",
      "mdown_content": "This unit contains all the constants representing both the characters and their ordinal values for all possible keystrokes that can be read by Turing.\n\nConstants beginning with &#147;KEY_&#148; are **char** values. These are the values returned by **getch** and used as an index into the **Input.KeyDown** array. The constants that the constants KEY_KEYPAD_5, KEY_SHIFT, KEY_CTRL and KEY_ALT can only be used in conjunction with **Input.KeyDown**. The **getch** and **getchar** subprograms do not return these values. All other constants with with SHIFT, CTRL and ALT as part of the name cannot be checked for in the **Input.KeyDown** array. \n\nConstants beginning with &#147;ORD_&#148;  are **int** values and represent the ordinal values (values returned by the **ord** function) for all the possible keystrokes.\n\nHere is a list of most of the constants\n\n\nKEY_F1 .. KEY_F12    KEY_CTRL_A .. KEY_CTRL_Z  \nKEY_SHIFT_F1 .. KEY_SHIFT_F12   KEY_ALT_A .. KEY_ALT_Z  \nKEY_CTRL_F1 .. KEY_CTRL_F12   KEY_ALT_1 .. KEY_ALT_0  \n\n\nKEY_ALT_F1 .. KEY_ALT_F12\n\n\n\nKEY_HOME   KEY_CTRL_HOME KEY_UP_ARROW   KEY_CTRL_UP_ARROW  \nKEY_PGUP   KEY_CTRL_PGUP  \nKEY_LEFT_ARROW   KEY_CTRL_LEFT_ARROW  \nKEY_RIGHT_ARROW   KEY_CTRL_RIGHT_ARROW  \nKEY_END   KEY_CTRL_END  \nKEY_DOWN_ARROW   KEY_CTRL_DOWN_ARROW  \nKEY_PGDN   KEY_CTRL_PGDN  \nKEY_INSERT   KEY_CTRL_INSERT  \nKEY_DELETE   KEY_CTRL_DELETE  \n\nKEY_BACKSPACE   KEY_KEYPAD_5 * KEY_TAB   KEY_SHIFT *  \nKEY_ENTER   KEY_CTRL *  \nKEY_ESC   KEY_ALT *  \n\nKEY_CTRL_OPEN_BRACKET   KEY_CTRL_BACKSLASH KEY_CTRL_CLOSE_BRACKET   KEY_CTRL_CARET  \nKEY_CTRL_UNDERSCORE   KEY_CTRL_BACKSPACE  \nKEY_ALT_MINUS   KEY_ALT_EQUALS  \nKEY_BACK_TAB   KEY_SHIFT_TAB  \n\n\n\n\nAbove constants with &#147;ORD_&#148; instead of  &#147;KEY_&#148; \n\n\n\nORD_A .. ORD_Z    ORD_0 .. ORD_9 ORD_LOWER_A .. ORD_LOWER_Z     \n\nORD_SPACE   ORD_EXCALAMATION_MARK ORD_QUOTATION_MARK   ORD_HAS_MARK  \nORD_DOLLAR_SIGN   ORD_PERCENT_SIGN  \nORD_AMPERSAND   ORD_SINGLE_QUOTE  \nORD_OPEN_PARENTHESIS   ORD_CLOSE_PARENTHESIS  \nORD_ASTERISK   ORD_PLUS  \nORD_COMMA   ORD_MINUS  \nORD_PERIOD   ORD_DOT  \nORD_SLASH   ORD_COLON  \nORD_SEMICOLON   ORD_LESS_THAN  \nORD_EQUALS   ORD_GREATER_THAN  \nORD_QUESTION_MARK   ORD_AT_SIGN  \nORD_OPEN_BRACKET   ORD_BACKSLASH  \nORD_CLOSE_BRACKET   ORD_CARET  \nORD_UNDERSCORE   ORD_APOSTROPHE  \nORD_OPEN_BRACE   ORD_BAR  \nORD_CLOSE_BRACE   ORD_TILDE  \n\n\n\n\nCharacters marked with an asterisk (*) are keys that can only be detected using **Input.KeyDown**.\n\n\n\nAll constants in the Keyboard module are exported unqualified. (This means you can use the constants directly without having to use the qualifier \"**Keyboard.**\".)\n"
    },
    {
      "title": "See also",
      "links": [
        "getch",
        "getchar",
        "input_keydown"
      ],
      "raw_content": "<b><a href=\"getch.html\">getch</a></b>, <b><a href=\"getchar.html\">getchar</a></b>, and <b><a href=\"input_keydown.html\">Input.KeyDown</a></b>.<p>\r\n</p>",
      "text_content": " getch, getchar, and Input.KeyDown.\r\n",
      "mdown_content": "**[getch](getch.html)**, **[getchar](getchar.html)**, and **[Input.KeyDown](input_keydown.html)**.\n"
    }
  ],
  "dependencies": [

  ]
}
