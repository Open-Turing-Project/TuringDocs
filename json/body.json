{
  "title": "body",
  "fileName": "body",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>bodyDeclaration</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>body</b> <b>procedure</b> <i>procedureId</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\"><i>statementsAndDeclarations</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"7\"><font size=\"+1\"><b>end</b> <i>procedureId</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>body</b> <b>function</b> <i>functionId</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\"><i>statementsAndDeclarations</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"7\"><font size=\"+1\"><b>end</b> <i>functionId</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(c)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>body procedure</b> <i>id</i> [(<i>paramDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"3\"><font size=\"+1\">{, <i>paramDeclaration</i> })]</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\"><i>statementsAndDeclarations</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"7\"><font size=\"+1\"><b>end</b> <i>id</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(d)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>body function</b> <i>id </i>[ ( [<i>paramDeclaration </i>{,</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"5\"><font size=\"+1\"><i>paramDeclaration</i> } ]) ] : <i>typeSpec</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\"><i>statementsAndDeclarations</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"7\"><font size=\"+1\"><b>end</b> <i>id</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A bodyDeclaration is one of:\r\n (a)body procedure procedureId   statementsAndDeclarations  end procedureId (b)body function functionId   statementsAndDeclarations  end functionId (c)body procedure id [(paramDeclaration      {, paramDeclaration })]   statementsAndDeclarations  end id (d)body function id [ ( [paramDeclaration {,    paramDeclaration } ]) ] : typeSpec   statementsAndDeclarations  end id",
      "mdown_content": "A *bodyDeclaration* is one of:\n (a)**body** **procedure** *procedureId*   *statementsAndDeclarations*  **end** *procedureId* (b)**body** **function** *functionId*   *statementsAndDeclarations*  **end** *functionId* (c)**body procedure** *id* [(*paramDeclaration*      {, *paramDeclaration* })]   *statementsAndDeclarations*  **end** *id* (d)**body function** *id *[ ( [*paramDeclaration *{,    *paramDeclaration* } ]) ] : *typeSpec*   *statementsAndDeclarations*  **end** *id*"
    },
    {
      "title": "Description",
      "raw_content": "A body declaration is used to resolve either a forward subprogram or a deferred subprogram.<p>\r\nYou declare a procedure or function <b>forward</b> when you want to define its header but not its body. This is the case when one procedure or function calls another, which in turn calls the first. This situation is called <i>mutual recursion</i>. The use of <b>forward</b> is necessary in this case because every item must be declared before it can be used. The <b>forward</b> declaration must be followed by  a <b>body</b> declaration for the same procedure or function. For details, see <b>forward</b> declarations.</p>\n<p>\r\nWhen a procedure or function in a class is declared to be <b>deferred</b> (or simply exported from the class), it can be resolved or <i>overridden</i> afterward by giving its body further down in that class or in descendant classes. The overriding procedure must use the keyword <b>body</b>. See <b>class</b> or \"<b>implement</b> <b>by</b>\" for examples.</p>\n<p>\r\n</p>",
      "text_content": " A body declaration is used to resolve either a forward subprogram or a deferred subprogram.\r\nYou declare a procedure or function forward when you want to define its header but not its body. This is the case when one procedure or function calls another, which in turn calls the first. This situation is called mutual recursion. The use of forward is necessary in this case because every item must be declared before it can be used. The forward declaration must be followed by  a body declaration for the same procedure or function. For details, see forward declarations.\r\nWhen a procedure or function in a class is declared to be deferred (or simply exported from the class), it can be resolved or overridden afterward by giving its body further down in that class or in descendant classes. The overriding procedure must use the keyword body. See class or \"implement by\" for examples.\r\n",
      "mdown_content": "A body declaration is used to resolve either a forward subprogram or a deferred subprogram.\nYou declare a procedure or function **forward** when you want to define its header but not its body. This is the case when one procedure or function calls another, which in turn calls the first. This situation is called *mutual recursion*. The use of **forward** is necessary in this case because every item must be declared before it can be used. The **forward** declaration must be followed by  a **body** declaration for the same procedure or function. For details, see **forward** declarations.\nWhen a procedure or function in a class is declared to be **deferred** (or simply exported from the class), it can be resolved or *overridden* afterward by giving its body further down in that class or in descendant classes. The overriding procedure must use the keyword **body**. See **class** or \"**implement** **by**\" for examples."
    },
    {
      "title": "Details",
      "raw_content": "You can specify the parameter and return values of the subprogram in the <b>body</b> declaration. However, the names and types of the parameters and return values must match the initial declaration exactly, or a warning results and the parameter list and return values from the <b>body</b> declaration are ignored.<p>\r\n</p>",
      "text_content": " You can specify the parameter and return values of the subprogram in the body declaration. However, the names and types of the parameters and return values must match the initial declaration exactly, or a warning results and the parameter list and return values from the body declaration are ignored.\r\n",
      "mdown_content": "You can specify the parameter and return values of the subprogram in the **body** declaration. However, the names and types of the parameters and return values must match the initial declaration exactly, or a warning results and the parameter list and return values from the **body** declaration are ignored."
    },
    {
      "title": "Example",
      "code": [
        "        var token : string\r\n        forward procedure expn (var eValue : real)\r\n            import forward term, var token\r\n         other declarations appear here \r\n        body procedure expn\r\n            var nextValue : real\r\n            term (eValue)               % Evaluate t\r\n            loop                        % Evaluate { + t}\r\n                exit when token not= \"+\"\r\n                get token\r\n                term (nextValue)\r\n                eValue := eValue + nextValue\r\n            end loop\r\n        end expn"
      ],
      "raw_content": "The example given here is part of a complete Turing program that includes an explanation of <b>forward</b> declarations.<p>\r\n</p>",
      "text_content": " The example given here is part of a complete Turing program that includes an explanation of forward declarations.\r\n\r\n",
      "mdown_content": "The example given here is part of a complete Turing program that includes an explanation of **forward** declarations."
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Expression Evaluator Example",
          "file": "ExpressionEvaluator.t"
        }
      ]
    },
    {
      "title": "Details",
      "code": [
        "        forward procedure p\r\n        \r\n        body  p\r\n        \r\n        end p"
      ],
      "raw_content": "The syntax of a <i>bodyDeclaration</i> presented above has been simplified by omitting the optional result identifier, <b>import</b> list, <b>pre</b> and <b>post</b> condition and <b>init</b> clause. See <b>procedure</b> and <b>function</b> declarations for descriptions of these omissions.<p>\r\nThe \"function\" or \"procedure\" token in the declaration is now optional. In other words the following code fragment is legal</p>\n<p>\r\n</p>",
      "text_content": " The syntax of a bodyDeclaration presented above has been simplified by omitting the optional result identifier, import list, pre and post condition and init clause. See procedure and function declarations for descriptions of these omissions.\r\nThe \"function\" or \"procedure\" token in the declaration is now optional. In other words the following code fragment is legal\r\n\r\n",
      "mdown_content": "The syntax of a *bodyDeclaration* presented above has been simplified by omitting the optional result identifier, **import** list, **pre** and **post** condition and **init** clause. See **procedure** and **function** declarations for descriptions of these omissions.\nThe \"function\" or \"procedure\" token in the declaration is now optional. In other words the following code fragment is legal"
    },
    {
      "title": "See also",
      "links": [
        "class",
        "forward",
        "implement_by"
      ],
      "raw_content": "<b><a href=\"class.html\">class</a></b>, <b><a href=\"forward.html\">forward</a></b> and <b><a href=\"implement_by.html\">implement by</a></b><p>\r\n</p>",
      "text_content": " class, forward and implement by\r\n",
      "mdown_content": "**[class.html](class)**, **[forward.html](forward)** and **[implement_by.html](implement by)**"
    }
  ]
}
