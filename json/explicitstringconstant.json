{
  "title": "explicitStringConstant",
  "fileName": "explicitstringconstant",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "An <i>explicitStringConstant</i> is a sequence of characters surrounded by quotation marks.<p>\r\n</p>",
      "mdown_content": "An *explicitStringConstant* is a sequence of characters surrounded by quotation marks."
    },
    {
      "title": "Example",
      "code": [
        "        var name : string := \"Hello world\"\r\n        name := \"\"      % Null string, containing zero characters\r\n        var address : string := \"273 O'Reilly Ave.\""
      ],
      "raw_content": "In the following, the explicit string constants are \"Hello world\", \"\" and \"273 O'Reilly Ave.\".<p>\r\n</p>",
      "mdown_content": "In the following, the explicit string constants are \"Hello world\", \"\" and \"273 O'Reilly Ave.\"."
    },
    {
      "title": "Details",
      "raw_content": "Within an explicit string constant (and within an explicit character constant), the back slash \\ is used to represent certain other characters as follows:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\\"</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>quotation mark character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\n or \\N</td>\n<td width=\"10\">&nbsp;</td>\n<td>end of line character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\t or \\T</td>\n<td width=\"10\">&nbsp;</td>\n<td>tab character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\f or \\F</td>\n<td width=\"10\">&nbsp;</td>\n<td>form feed character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\r or \\R</td>\n<td width=\"10\">&nbsp;</td>\n<td>return character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\b or \\B</td>\n<td width=\"10\">&nbsp;</td>\n<td>backspace character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\e or \\E</td>\n<td width=\"10\">&nbsp;</td>\n<td>escape character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\d or \\D</td>\n<td width=\"10\">&nbsp;</td>\n<td>delete character</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\\\\</td>\n<td width=\"10\">&nbsp;</td>\n<td width=\"10\">&nbsp;</td>\n<td>backslash character</td>\n</tr>\n</table>\n<p>\r\nFor example, <b>put</b> \"<i>One\\nTwo</i>\" will output <i>One</i> on one line and <i>Two</i> on the next. In an explicit character constant (which is surrounded by single quotes, as in <i>'John'</i>), the backslash is not required before a double quote \", but it is required before a single quote ', as in these two constants:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>'John said </i>\"<i>Hello</i>\"<i> to you'</i>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>'Don\\'t cry'</i>.</td>\n</tr>\n</table>\n<p>\r\nYou can use the caret ^ to specify ASCII control characters, for example:</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>'^H'</td>\n<td width=\"10\">&nbsp;</td>\n<td>ASCII backspace character</td>\n</tr></table>\n<p>\r\nThe caret specifies that the top three bits of the character are set to zero. For any character <i>c</i>, the following is true:</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>'^c' = chr (ord ('c') &amp; 2#11111)</td>\n</tr></table>\n<p>\r\nHowever if <i>c </i>is the question mark, as in '^?', the bits are not turned off.</p>\n<p>\r\nExplicit string constants cannot cross line boundaries. To represent a string that is longer than a line, break it into two or more strings on separate lines and use catenation (+) to join the individual strings.</p>\n<p>\r\nAn explicit string constant can contain at most 255 characters (this is in implementation constraint).</p>\n<p>\r\nString values are not allowed to contain characters with the code values of 0 or 128; these character values are called <i>eos </i>(end of string) and <i>uninitchar</i> (uninitialized character). These are reserved by the implementation to mark the end of a string value and to see if a string variable has been initialized.</p>\n<p>\r\n</p>",
      "mdown_content": "Within an explicit string constant (and within an explicit character constant), the back slash \\ is used to represent certain other characters as follows:\n\n \n\\\"\n \n \nquotation mark character\n \n\\n or \\N\n \nend of line character\n \n\\t or \\T\n \ntab character\n \n\\f or \\F\n \nform feed character\n \n\\r or \\R\n \nreturn character\n \n\\b or \\B\n \nbackspace character\n \n\\e or \\E\n \nescape character\n \n\\d or \\D\n \ndelete character\n \n\\\\\n \n \nbackslash character\n\nFor example, **put** \"*One\\nTwo*\" will output *One* on one line and *Two* on the next. In an explicit character constant (which is surrounded by single quotes, as in *'John'*), the backslash is not required before a double quote \", but it is required before a single quote ', as in these two constants:\n\n\n \n\n*'John said *\"*Hello*\"* to you'*\n\n \n\n*'Don\\'t cry'*.\n\nYou can use the caret ^ to specify ASCII control characters, for example:\n\n\n \n'^H'\n \nASCII backspace character\n\nThe caret specifies that the top three bits of the character are set to zero. For any character *c*, the following is true:\n\n\n \n'^c' = chr (ord ('c') & 2#11111)\n\nHowever if *c *is the question mark, as in '^?', the bits are not turned off.\n\nExplicit string constants cannot cross line boundaries. To represent a string that is longer than a line, break it into two or more strings on separate lines and use catenation (+) to join the individual strings.\n\nAn explicit string constant can contain at most 255 characters (this is in implementation constraint).\n\nString values are not allowed to contain characters with the code values of 0 or 128; these character values are called *eos *(end of string) and *uninitchar* (uninitialized character). These are reserved by the implementation to mark the end of a string value and to see if a string variable has been initialized.\n"
    }
  ]
}
