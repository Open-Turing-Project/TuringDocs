{
  "title": "int",
  "fileName": "int",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>int</b><p>\r\n</p></font>",
      "text_content": " int\r\n",
      "mdown_content": "**int**"
    },
    {
      "title": "Description",
      "raw_content": "The <b>int</b> (integer) type has the values &#133; 2, 1, 0, 1, 2 &#133; Integers can be combined by various operators such as addition (+) and multiplication (*). Integers can also be combined with <b>real</b> numbers, in which case the result is generally a real number. An integer can always be assigned to a real variable, with implicit conversion to <b>real</b>.<p>\r\n</p>",
      "text_content": " The int (integer) type has the values  2, 1, 0, 1, 2  Integers can be combined by various operators such as addition (+) and multiplication (*). Integers can also be combined with real numbers, in which case the result is generally a real number. An integer can always be assigned to a real variable, with implicit conversion to real.\r\n",
      "mdown_content": "The **int** (integer) type has the values &#133; 2, 1, 0, 1, 2 &#133; Integers can be combined by various operators such as addition (+) and multiplication (*). Integers can also be combined with **real** numbers, in which case the result is generally a real number. An integer can always be assigned to a real variable, with implicit conversion to **real**.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var counter, i : int\r\n        var j : int := 9\r\n        var tax := 0        % The type is implicitly int because 0 is an integer"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": "\n"
    },
    {
      "title": "Details",
      "raw_content": "See also <i>explicitIntegerConstant</i>. The <b>real</b> type is used instead of <b>int</b> when values have fractional parts as in 16.837. See the <b>real</b> type for details.<p>\r\nThe operators on integers are +, -, * (multiply), <b>div</b> (truncating integer division), <b>mod</b> (integer remainder), ** (exponentiation), as well as comparisons (+, <b>not=</b>, &gt;, &gt;=, &lt;, &lt;=). The operators <b>and</b>, <b>or</b> and <b>xor</b> can be applied to non-negative integer values. The bit-wise boolean result is produced as an integer (actually, as a natural number). The <b>shr</b> (shift right) and <b>shl</b> (shift left) operators are also introduced.</p>\n<p>\r\nReal numbers can be converted to integers using <b>ceil</b> (ceiling), <b>floor</b>, and <b>round</b><i> </i>(see descriptions of these functions). Integers can be converted to real numbers using <b>intreal</b>, but in practice this is rarely used, because an integer value used in place of a real value will be automatically converted to real.</p>\n<p>\r\nIntegers can be converted to strings and back using <b>intstr</b> and <b>strint</b>. Integers can be converted to corresponding ASCII (or EBCDIC) characters using <b>chr</b> and <b>ord</b>. See the descriptions of these functions.</p>\n<p>\r\nPseudo-random sequences of integers can be generated using <b>randint</b>. See <b>randint</b>.</p>\n<p>\r\nIn current implementations of Turing, the range of integers is from -2147483647 to 2147483647. In other words, the maximum size of integer is 2**31 - 1. See <b>maxint</b>. This range exists because integers are stored in 4 bytes. The remaining negative value, -2147483648 records uninitialization. The types <b>int1</b>, <b>int2</b> and <b>int4</b> specify integers that fit into 1, 2 or 4 bytes. The <b>int</b><i>n</i> types (<b>int1</b>, <b>int2</b> and <b>int4</b>) are not checked for initialization and allow all their bit patterns as numbers.</p>\n<p>\r\nThe natural number type <b>nat</b><i> </i>allows only the non-negative values: 0,1,2,3,&#133; Natural number values can be used whenever integer values are expected and vice versa, given that the value does not exceed the range of the expected type.</p>\n<p>\r\n</p>",
      "text_content": " See also explicitIntegerConstant. The real type is used instead of int when values have fractional parts as in 16.837. See the real type for details.\r\nThe operators on integers are +, -, * (multiply), div (truncating integer division), mod (integer remainder), ** (exponentiation), as well as comparisons (+, not=, >, >=, <, <=). The operators and, or and xor can be applied to non-negative integer values. The bit-wise boolean result is produced as an integer (actually, as a natural number). The shr (shift right) and shl (shift left) operators are also introduced.\r\nReal numbers can be converted to integers using ceil (ceiling), floor, and round (see descriptions of these functions). Integers can be converted to real numbers using intreal, but in practice this is rarely used, because an integer value used in place of a real value will be automatically converted to real.\r\nIntegers can be converted to strings and back using intstr and strint. Integers can be converted to corresponding ASCII (or EBCDIC) characters using chr and ord. See the descriptions of these functions.\r\nPseudo-random sequences of integers can be generated using randint. See randint.\r\nIn current implementations of Turing, the range of integers is from -2147483647 to 2147483647. In other words, the maximum size of integer is 2**31 - 1. See maxint. This range exists because integers are stored in 4 bytes. The remaining negative value, -2147483648 records uninitialization. The types int1, int2 and int4 specify integers that fit into 1, 2 or 4 bytes. The intn types (int1, int2 and int4) are not checked for initialization and allow all their bit patterns as numbers.\r\nThe natural number type nat allows only the non-negative values: 0,1,2,3, Natural number values can be used whenever integer values are expected and vice versa, given that the value does not exceed the range of the expected type.\r\n",
      "mdown_content": "See also _explicitIntegerConstant_. The **real** type is used instead of **int** when values have fractional parts as in 16.837. See the **real** type for details.\n\nThe operators on integers are +, -, * (multiply), **div** (truncating integer division), **mod** (integer remainder), ** (exponentiation), as well as comparisons (+, **not=**, >, >=, <, <=). The operators **and**, **or** and **xor** can be applied to non-negative integer values. The bit-wise boolean result is produced as an integer (actually, as a natural number). The **shr** (shift right) and **shl** (shift left) operators are also introduced.\n\nReal numbers can be converted to integers using **ceil** (ceiling), **floor**, and **round** (see descriptions of these functions). Integers can be converted to real numbers using **intreal**, but in practice this is rarely used, because an integer value used in place of a real value will be automatically converted to real.\n\nIntegers can be converted to strings and back using **intstr** and **strint**. Integers can be converted to corresponding ASCII (or EBCDIC) characters using **chr** and **ord**. See the descriptions of these functions.\n\nPseudo-random sequences of integers can be generated using **randint**. See **randint**.\n\nIn current implementations of Turing, the range of integers is from -2147483647 to 2147483647. In other words, the maximum size of integer is 2**31 - 1. See **maxint**. This range exists because integers are stored in 4 bytes. The remaining negative value, -2147483648 records uninitialization. The types **int1**, **int2** and **int4** specify integers that fit into 1, 2 or 4 bytes. The **int**_n_ types (**int1**, **int2** and **int4**) are not checked for initialization and allow all their bit patterns as numbers.\n\nThe natural number type **nat** allows only the non-negative values: 0,1,2,3,&#133; Natural number values can be used whenever integer values are expected and vice versa, given that the value does not exceed the range of the expected type.\n"
    },
    {
      "title": "See also",
      "links": [
        "nat",
        ""
      ],
      "raw_content": "<b><a href=\"nat.html\">nat</a></b> and <b><a href=\"\">int</a></b><i>n</i>.<p>\r\n</p>",
      "text_content": " nat and intn.\r\n",
      "mdown_content": "**[nat](nat.html)** and **[int]()**_n_.\n"
    }
  ],
  "dependencies": [

  ]
}
