{
  "title": "Pic.DrawSpecialBack",
  "fileName": "pic_drawspecialback",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Pic.DrawSpecialBack</b> (<i>picID</i>, <i>x</i>, <i>y</i>, <i>mode</i>, <i>transition</i>, <i>duration</i>  : <b>int</b>)<p></p></font>",
      "mdown_content": "**Pic.DrawSpecialBack** (*picID*, *x*, *y*, *mode*, *transition*, *duration*  : **int**)"
    },
    {
      "title": "Description",
      "links": [
        "pic_drawspecial"
      ],
      "raw_content": "<b>Pic.DrawSpecialBack</b> is very similar to \r\n          <b><a href=\"pic_drawspecial.html\">Pic.DrawSpecial</a></b>.  The only\r\n          difference is that <b>Pic.DrawSpecialBack</b> returns immediately\r\n          after being called and program execution continues while the special\r\n          effect continues.  This allows you to continue to draw other graphics\r\n          while the special effect is continuing.<p>\r\n          For example, this procedure is necessary if you want to have two \r\n          pictures being drawn using special effects simultaneously.</p>\n<p>\r\n    </p>",
      "mdown_content": "**Pic.DrawSpecialBack** is very similar to \n**[pic_drawspecial.html](Pic.DrawSpecial)**.  The only\ndifference is that **Pic.DrawSpecialBack** returns immediately\nafter being called and program execution continues while the special\neffect continues.  This allows you to continue to draw other graphics\nwhile the special effect is continuing.\nFor example, this procedure is necessary if you want to have two \npictures being drawn using special effects simultaneously.\n\n"
    },
    {
      "title": "Details",
      "raw_content": "If you are wish to have several images displayed at the same time\r\n          using special effects, you must use <b>Pic.DrawSpecialBack</b> to \r\n          display all the images but the last and then use \r\n          <b>Pic.DrawSpecial</b> to display the last image so that Turing will \r\n          wait until the special effects are completed before continuing \r\n          execution.<p>\r\n          If you want to draw the several special effects continuously over\r\n          the same location, do not use <b>Pic.DrawSpecialBack</b>.</p>\n<p>  \r\n          <tt><b>Pic.DrawSpecial</b> (<i>pic1</i>, 10, 10, <i>picCopy</i>, <i>picWipeLeftToRight</i>, 500)<br><b>Pic.DrawSpecial</b> (<i>pic2</i>, 10, 10, <i>picCopy</i>, <i>picFadeIn</i>, 1000)</tt></p>\n<p>\r\n          If you do, Turing will attempt to run each of the calls at the same\r\n          time, and most of the special effects will not be seen.</p>\n<p>\r\n    </p>",
      "mdown_content": "If you are wish to have several images displayed at the same time\nusing special effects, you must use **Pic.DrawSpecialBack** to \ndisplay all the images but the last and then use \n**Pic.DrawSpecial** to display the last image so that Turing will \nwait until the special effects are completed before continuing \nexecution.\nIf you want to draw the several special effects continuously over\nthe same location, do not use **Pic.DrawSpecialBack**.\n\n**Pic.DrawSpecial** (*pic1*, 10, 10, *picCopy*, *picWipeLeftToRight*, 500)**Pic.DrawSpecial** (*pic2*, 10, 10, *picCopy*, *picFadeIn*, 1000)\n\nIf you do, Turing will attempt to run each of the calls at the same\ntime, and most of the special effects will not be seen.\n\n"
    },
    {
      "title": "Description",
      "links": [
        "pic_drawspecial",
        "pic_drawspecial"
      ],
      "raw_content": "<b>Pic.DrawSpecialBack</b> is used to draw a picture on the screen\r\n          with a special effect such as a wipe, a slide, or a fade-in. Note that \r\n          all the parameters are identical to the parameters of\r\n          <b><a href=\"pic_drawspecial.html\">Pic.DrawSpecial</a></b>.\r\n          The picture is drawn with the lower left corner at \r\n          (<i>x</i>, <i>y</i>). The <i>duration</i> specifies how long the\r\n          transition should take in milliseconds.  For example, a fade-in could\r\n          be specified to last 1/2 a second by using a duration of 500.<p>\r\n\t  The <i>mode</i> parameter is the same as in <b>Pic.New</b> and has \r\n\t  one of the following values:</p>\n<p>\r\n\t  </p>\n<table>\n<tr valign=\"top\">\n<td><i>picCopy</i></td>\r\n\t      <td width=\"10\">&nbsp;</td>\r\n\t      <td>This draws the picture on top of what was underneath, \r\n\t          obscuring it completely.</td>\r\n\t    </tr>\n<tr valign=\"top\">\n<td><i>picXor</i></td>\r\n\t      <td width=\"10\">&nbsp;</td>\r\n\t      <td>This draws the picture XORing it with the background. \r\n\t          In DOS, you can use this function to do animation. \r\n\t\t  Drawing an object on top of itself with XOR erases \r\n\t\t  it and restores the background.</td>\r\n\t    </tr>\n<tr valign=\"top\">\n<td><i>picMerge</i></td>\r\n\t      <td width=\"10\">&nbsp;</td>\r\n\t      <td>This draws the picture like <i>picCopy</i> except \r\n\t          that any occurrence of the background color in the \r\n\t\t  picture is not drawn to the screen. This allows you \r\n\t\t  to draw an irregularly-shaped object and draw it to \r\n\t\t  the screen.</td>\r\n\t    </tr>\n<tr valign=\"top\">\n<td><i>picUnderMerge</i></td>\r\n\t      <td width=\"10\">&nbsp;</td>\r\n\t      <td>This draws the picture, but only where the background \r\n\t          color was displayed underneath it. The effect of this \r\n\t\t  is to make the picture appear to be displayed behind \r\n\t\t  the background.</td>\r\n\t    </tr>\n</table>\n<p>\r\n\t  See <b><a href=\"pic_drawspecial.html\">Pic.DrawSpecial</a></b> for the\r\n\t  list of possible values for the <i>transition</i> parameter.</p>\n<p>\r\n    </p>",
      "mdown_content": "**Pic.DrawSpecialBack** is used to draw a picture on the screen\nwith a special effect such as a wipe, a slide, or a fade-in. Note that \nall the parameters are identical to the parameters of\n**[pic_drawspecial.html](Pic.DrawSpecial)**.\nThe picture is drawn with the lower left corner at \n(*x*, *y*). The *duration* specifies how long the\ntransition should take in milliseconds.  For example, a fade-in could\nbe specified to last 1/2 a second by using a duration of 500.\nThe *mode* parameter is the same as in **Pic.New** and has \none of the following values:\n\n\n*picCopy*\n \nThis draws the picture on top of what was underneath, \nobscuring it completely.\n*picXor*\n \nThis draws the picture XORing it with the background. \nIn DOS, you can use this function to do animation. \nDrawing an object on top of itself with XOR erases \nit and restores the background.\n*picMerge*\n \nThis draws the picture like *picCopy* except \nthat any occurrence of the background color in the \npicture is not drawn to the screen. This allows you \nto draw an irregularly-shaped object and draw it to \nthe screen.\n*picUnderMerge*\n \nThis draws the picture, but only where the background \ncolor was displayed underneath it. The effect of this \nis to make the picture appear to be displayed behind \nthe background.\n\nSee **[pic_drawspecial.html](Pic.DrawSpecial)** for the\nlist of possible values for the *transition* parameter.\n\n"
    },
    {
      "title": "Details",
      "raw_content": "The <b>Pic.DrawSpecialBack</b> requires a moderately fast machine to \r\n          operate successfully (Pentium III or higher). The <i>picFadeIn</i>\r\n          and <i>picBlend</i> transitions do not work well on 8-bit (256 color)\r\n\t  displays.  On Microsoft Windows machines, you can determine the \r\n\t  bit-depth of the display (the number of colors available) by \r\n\t  selecting the <i>Display</i> control panel from the <i>Start</i> \r\n\t  menu.  You can also use the<p>\r\n\t  <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\t  <b>Config.Display</b> (<b>cdNumMaxColors</b>)</tt></p>\n<p>\r\n\t  function to determine the bit-depth of the display (anything \r\n\t  <b>over</b> 256 colors will produce acceptable results).</p>\n<p>\r\n    </p>",
      "mdown_content": "The **Pic.DrawSpecialBack** requires a moderately fast machine to \noperate successfully (Pentium III or higher). The *picFadeIn*\nand *picBlend* transitions do not work well on 8-bit (256 color)\ndisplays.  On Microsoft Windows machines, you can determine the \nbit-depth of the display (the number of colors available) by \nselecting the *Display* control panel from the *Start* \nmenu.  You can also use the\n      \n**Config.Display** (**cdNumMaxColors**)\n\nfunction to determine the bit-depth of the display (anything \n**over** 256 colors will produce acceptable results).\n\n"
    },
    {
      "title": "Details",
      "raw_content": "If the <b>Pic.DrawSpecialBack</b> call fails, <b>Error.Last</b> will return a \r\n          non-zero value indicating the reason for the failure. \r\n\t  <b>Error.LastMsg</b> will return a string which contains the textual \r\n\t  version of the error.<p>\r\n    </p>",
      "mdown_content": "If the **Pic.DrawSpecialBack** call fails, **Error.Last** will return a \nnon-zero value indicating the reason for the failure. \n**Error.LastMsg** will return a string which contains the textual \nversion of the error.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var redID, blueID: int\r\n        Draw.FillStar (0, 0, 100, 100, brightred)\r\n        redID := Pic.New (0, 0, 100, 100)\r\n        cls\r\n        Draw.FillOval (50, 50, 50, 50, brightblue)\r\n        blueID := Pic.New (0, 0, 100, 100)\r\n        cls\r\n\tPic.DrawSpecialBack (redID, 10, 10, picCopy, picWipeLeftToRightNoBar, 1000)\r\n\tPic.DrawSpecial (blueID, 160, 10, picCopy, picWipeRightToLeftNoBar, 1000)\r\n\tPic.DrawSpecialBack (blueID, 10, 10, picCopy, picSlideLeftToRightNoBar, 1000)\r\n\tPic.DrawSpecial (redID, 160, 10, picCopy, picSlideRightToLeftNoBar, 1000)\r\n\tPic.DrawSpecialBack (redID, 10, 10, picCopy, picGrowRightToLeftNoBar, 1000)\r\n\tPic.DrawSpecial (blueID, 160, 10, picCopy, picGrowLeftToRightNoBar, 1000)\r\n\tPic.DrawSpecialBack (blueID, 10, 10, picCopy, picWipeTopToBottomNoBar, 1000)\r\n\tPic.DrawSpecial (redID, 160, 10, picCopy, picWipeTopToBottomNoBar, 1000)\r\n\tPic.DrawSpecialBack (redID, 10, 10, picCopy, picFadeIn, 1000)\r\n\tPic.DrawSpecial (blueID, 160, 10, picCopy, picFadeIn, 1000)\r\n        Pic.Free (redID)\r\n        Pic.Free (blueID)"
      ],
      "raw_content": "The program draws a blue star on the screen, then a red circle, then\r\n          proceeds to have to have the two replace each simultaneously, \r\n          side-by-side.<p>\r\n</p>\n<p>\r\n    </p>",
      "mdown_content": "The program draws a blue star on the screen, then a red circle, then\nproceeds to have to have the two replace each simultaneously, \nside-by-side.\n\n\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Pic.DrawSpecialBack Example",
          "file": "Pic.DrawSpecialBack.t"
        }
      ]
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n\t  This means that you can only call the function by calling \r\n\t  <b>Pic.DrawSpecialBack</b>, not by calling <b>DrawSpecialBack</b>.</p>\n<p>\r\n    </p>",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling \n**Pic.DrawSpecialBack**, not by calling **DrawSpecialBack**.\n\n"
    },
    {
      "title": "See also",
      "links": [
        "pic_draw",
        "pic_drawspecial"
      ],
      "raw_content": "<b><a href=\"pic_draw.html\">Pic.Draw</a></b> for information on the meaning\r\n          of the <i>mode</i> argument.<p>\r\n          <b><a href=\"pic_drawspecial.html\">Pic.DrawSpecial</a></b> for \r\n          information on how to draw special effects and wait for completion\r\n          of the effect.</p>\n<p>\r\n    </p>",
      "mdown_content": "**[pic_draw.html](Pic.Draw)** for information on the meaning\nof the *mode* argument.\n**[pic_drawspecial.html](Pic.DrawSpecial)** for \ninformation on how to draw special effects and wait for completion\nof the effect.\n\n"
    }
  ]
}
