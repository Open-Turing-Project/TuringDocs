{
  "title": "GUI.CreateCheckBox[Full]",
  "fileName": "gui_createcheckboxfull",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>GUI.CreateCheckBox</b> (<i>x</i>, <i>y</i> : <b>int</b>, <i>text</i> : <b>string</b>,<br>\r\n          &nbsp;&nbsp;&nbsp;&nbsp;<i>actionProc</i> : <b>procedure</b> <i>x</i> (<i>filled</i> : <b>boolean</b>)) : <b>int</b><p>\r\n\t  <b>GUI.CreateCheckBoxFull</b> (<i>x</i>, <i>y</i> : <b>int</b>, <i>text</i> : <b>string</b>,<br>\r\n\t  &nbsp;&nbsp;&nbsp;&nbsp;<i>actionProc</i> : <b>procedure</b> <i>x</i> (<i>filled</i> : <b>boolean</b>), <i>alignment</i> : <b>int</b>, <i>shortcut</i> : <b>char</b>) : <b>int</b></p>\n<p></p></font>",
      "text_content": "GUI.CreateCheckBox (x, y : int, text : string,\r\n              actionProc : procedure x (filled : boolean)) : int\r\n\t  GUI.CreateCheckBoxFull (x, y : int, text : string,\r\n\t      actionProc : procedure x (filled : boolean), alignment : int, shortcut : char) : int\r\n    ",
      "mdown_content": "**GUI.CreateCheckBox** (_x_, _y_ : **int**, _text_ : **string**,    _actionProc_ : **procedure** _x_ (_filled_ : **boolean**)) : **int**\n**GUI.CreateCheckBoxFull** (_x_, _y_ : **int**, _text_ : **string**,    _actionProc_ : **procedure** _x_ (_filled_ : **boolean**), _alignment_ : **int**, _shortcut_ : **char**) : **int**"
    },
    {
      "title": "Description",
      "images": [
        "gui_createcheckbox_full01.gif"
      ],
      "raw_content": "Creates a check box (with accompanying text) and returns the check box's widget ID.<p>\r\n          The check box widget is used to implement a check box that can be set or unset. When you click on a check box, the status of the check box flips from set to unset and back again and the check box's <i>action procedure</i> is called with the new status as a parameter. If a check box is given a short cut, then entering the keystroke will cause the check box to change status and the <i>action procedure</i> to be called. The new status will be displayed immediately.</p>\n<p>\r\n          </p>\n<center></center>\r\n          <center><b>Two Check Boxes</b></center>\n<p>\r\n          The <i>x</i> and <i>y</i> parameters specify the lower-left corner of the check box (unless <i>alignment</i> is set to <i>GUI.RIGHT</i>, in which case they specify the lower-right corner of the check box). The <i>text</i> parameter specifies the text (or label) beside the check box. The <i>actionProc</i> parameter is the name of a procedure that is called when the status of the check box changes. The <i>actionProc</i>procedure must have one boolean parameter which is the new status of the check box. In <b>GUI.CreateCheckBox</b>, the check box's text is always to the right of the actual check box. In <b>GUI.CreateCheckBoxFull</b>, the text can be set to the right or left of the check box with the <i>alignment</i> parameter.</p>\n<p>\r\n          For <b>GUI.CreateCheckBoxFull</b>, the <i>alignment</i> parameter specifies the position of the check box in relation to the text as well as the meaning of the <i>x</i> and <i>y</i> parameters. The <i>alignment</i> parameter is one of 0, <i>GUI.LEFT</i>, or <i>GUI.RIGHT</i>. An <i>alignment</i> of 0 is the default and is the same as <i>GUI.LEFT</i>. <i>GUI.LEFT</i> means the actual box in the check box appears to the left of the check box's label and (<i>x</i>, <i>y</i>) specifies the lower-left corner. An <i>alignment</i> of <i>GUI.RIGHT</i> means that the actual box appears to the right of the check box's label and (<i>x</i>, <i>y</i>) specifies the lower-right corner of the check box. The <i>shortcut </i>parameter is the keystroke to be used as the button's shortcut. The <i>default</i> parameter is a boolean indicating whether the button should be the default button. If there is already a default button, and <i>default</i> is set to true, then this button becomes the new default button.</p>\n<p>\r\n          A check box's size is not specified during creation. It is determined based on the size of the text. Instead the user specifies the lower-left corner of the check box (or the lower-right if the check box is right justified).</p>\n<p>\r\n    </p>",
      "text_content": "Creates a check box (with accompanying text) and returns the check box's widget ID.\r\n          The check box widget is used to implement a check box that can be set or unset. When you click on a check box, the status of the check box flips from set to unset and back again and the check box's action procedure is called with the new status as a parameter. If a check box is given a short cut, then entering the keystroke will cause the check box to change status and the action procedure to be called. The new status will be displayed immediately.\r\n          \r\n          Two Check Boxes\r\n          The x and y parameters specify the lower-left corner of the check box (unless alignment is set to GUI.RIGHT, in which case they specify the lower-right corner of the check box). The text parameter specifies the text (or label) beside the check box. The actionProc parameter is the name of a procedure that is called when the status of the check box changes. The actionProcprocedure must have one boolean parameter which is the new status of the check box. In GUI.CreateCheckBox, the check box's text is always to the right of the actual check box. In GUI.CreateCheckBoxFull, the text can be set to the right or left of the check box with the alignment parameter.\r\n          For GUI.CreateCheckBoxFull, the alignment parameter specifies the position of the check box in relation to the text as well as the meaning of the x and y parameters. The alignment parameter is one of 0, GUI.LEFT, or GUI.RIGHT. An alignment of 0 is the default and is the same as GUI.LEFT. GUI.LEFT means the actual box in the check box appears to the left of the check box's label and (x, y) specifies the lower-left corner. An alignment of GUI.RIGHT means that the actual box appears to the right of the check box's label and (x, y) specifies the lower-right corner of the check box. The shortcut parameter is the keystroke to be used as the button's shortcut. The default parameter is a boolean indicating whether the button should be the default button. If there is already a default button, and default is set to true, then this button becomes the new default button.\r\n          A check box's size is not specified during creation. It is determined based on the size of the text. Instead the user specifies the lower-left corner of the check box (or the lower-right if the check box is right justified).\r\n    ",
      "mdown_content": "Creates a check box (with accompanying text) and returns the check box's widget ID.\nThe check box widget is used to implement a check box that can be set or unset. When you click on a check box, the status of the check box flips from set to unset and back again and the check box's _action procedure_ is called with the new status as a parameter. If a check box is given a short cut, then entering the keystroke will cause the check box to change status and the _action procedure_ to be called. The new status will be displayed immediately.\n\nThe _x_ and _y_ parameters specify the lower-left corner of the check box (unless _alignment_ is set to _GUI.RIGHT_, in which case they specify the lower-right corner of the check box). The _text_ parameter specifies the text (or label) beside the check box. The _actionProc_ parameter is the name of a procedure that is called when the status of the check box changes. The _actionProc_procedure must have one boolean parameter which is the new status of the check box. In **GUI.CreateCheckBox**, the check box's text is always to the right of the actual check box. In **GUI.CreateCheckBoxFull**, the text can be set to the right or left of the check box with the _alignment_ parameter.\nFor **GUI.CreateCheckBoxFull**, the _alignment_ parameter specifies the position of the check box in relation to the text as well as the meaning of the _x_ and _y_ parameters. The _alignment_ parameter is one of 0, _GUI.LEFT_, or _GUI.RIGHT_. An _alignment_ of 0 is the default and is the same as _GUI.LEFT_. _GUI.LEFT_ means the actual box in the check box appears to the left of the check box's label and (_x_, _y_) specifies the lower-left corner. An _alignment_ of _GUI.RIGHT_ means that the actual box appears to the right of the check box's label and (_x_, _y_) specifies the lower-right corner of the check box. The _shortcut_ parameter is the keystroke to be used as the button's shortcut. The _default_ parameter is a boolean indicating whether the button should be the default button. If there is already a default button, and _default_ is set to true, then this button becomes the new default button.\nA check box's size is not specified during creation. It is determined based on the size of the text. Instead the user specifies the lower-left corner of the check box (or the lower-right if the check box is right justified)."
    },
    {
      "title": "Example",
      "code": [
        "        import GUI\r\n        \r\n        procedure DoNothing (status : boolean)\r\n        end DoNothing \r\n        \r\n        View.Set (\"graphics:300;100,nobuttonbar\")\r\n        var cb1 : int := GUI.CreateCheckBox (10, 10, \"Check Box 1\",\r\n            DoNothing)\r\n        var cb2 : int := GUI.CreateCheckBoxFull (200, 10, \"Check Box 2\",\r\n            DoNothing, GUI.RIGHT, '2')\r\n        GUI.SetCheckBox (cb2, true)\r\n        var quitBtn : int := GUI.CreateButton (230, 10, 0, \"Quit\", GUI.Quit)\r\n        loop\r\n            exit when GUI.ProcessEvent\r\n        end loop\r\n        var cb1Status : boolean := GUI.GetCheckBox (cb1)\r\n        var cb2Status : boolean := GUI.GetCheckBox (cb2)\r\n        if cb1Status then\r\n            put \"Check box 1: filled\"\r\n        else\r\n            put \"Check box 1: empty\"\r\n        end if\r\n        if cb2Status then\r\n            put \"Check box 2: filled\"\r\n        else\r\n            put \"Check box 2: empty\"\r\n        end if"
      ],
      "raw_content": "The following program creates two buttons, one which draws a random circle on the screen and one which quits the program<p>\r\n</p>\n<p>\r\n    </p>",
      "text_content": "The following program creates two buttons, one which draws a random circle on the screen and one which quits the program\r\n\r\n    ",
      "mdown_content": "The following program creates two buttons, one which draws a random circle on the screen and one which quits the program\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "GUI.CreateCheckBoxFull Example",
          "file": "GUI.CreateCheckBoxFull.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "When <b>GUI.CreateButton</b><i> </i>or<i> </i><b>GUI.CreateButtonFull</b> is called, the newly created check box will be displayed immediately unless <b>GUI.DisplayWhenCreated</b> has been called with the <i>display</i> parameter set to false. <p>\r\n          When a check box is not enabled, the label beside the check box is grayed out and the check box no longer responds to any mouse clicks or keystrokes until the check box is enabled again.</p>\n<p>\r\n    </p>",
      "text_content": "When GUI.CreateButton or GUI.CreateButtonFull is called, the newly created check box will be displayed immediately unless GUI.DisplayWhenCreated has been called with the display parameter set to false. \r\n          When a check box is not enabled, the label beside the check box is grayed out and the check box no longer responds to any mouse clicks or keystrokes until the check box is enabled again.\r\n    ",
      "mdown_content": "When **GUI.CreateButton** or **GUI.CreateButtonFull** is called, the newly created check box will be displayed immediately unless **GUI.DisplayWhenCreated** has been called with the _display_ parameter set to false. \nWhen a check box is not enabled, the label beside the check box is grayed out and the check box no longer responds to any mouse clicks or keystrokes until the check box is enabled again."
    },
    {
      "title": "Details",
      "raw_content": "The following GUI subprograms can be called with a check box as the <i>widgetID</i> parameter:<p>\r\n          </p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<b>GUI.Show</b>,<b> GUI.Hide</b>,\r\n              <b> GUI.Enable</b>,<b> GUI.Disable</b>,<b> GUI.Dispose</b>,\r\n              <b> GUI.GetX</b>,<b> GUI.GetY</b>,<b> GUI.GetWidth</b>,\r\n              <b> GUI.GetHeight</b>,<b> GUI.SetPosition</b>,<b> GUI.SetSize</b>,\r\n              <b> GUI.SetPositionAndSize</b>,<b> GUI.SetLabel</b>,\r\n              <b> GUI.GetCheckBox</b>,<b> GUI.SetCheckBox</b>\n</td>\r\n            </tr></table>\n<p>\r\n    </p>",
      "text_content": "The following GUI subprograms can be called with a check box as the widgetID parameter:\r\n           GUI.Show, GUI.Hide,\r\n               GUI.Enable, GUI.Disable, GUI.Dispose,\r\n               GUI.GetX, GUI.GetY, GUI.GetWidth,\r\n               GUI.GetHeight, GUI.SetPosition, GUI.SetSize,\r\n               GUI.SetPositionAndSize, GUI.SetLabel,\r\n               GUI.GetCheckBox, GUI.SetCheckBox\r\n            \r\n    ",
      "mdown_content": "The following GUI subprograms can be called with a check box as the _widgetID_ parameter:\n\n\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n          This means that you can only call the function by calling <b>GUI.CreateCheckBox</b>, not by calling <b>CreateCheckBox</b>.</p>\n<p>\r\n    </p>",
      "text_content": "Exported qualified.\r\n          This means that you can only call the function by calling GUI.CreateCheckBox, not by calling CreateCheckBox.\r\n    ",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **GUI.CreateCheckBox**, not by calling **CreateCheckBox**."
    },
    {
      "title": "See also",
      "links": [
        "gui_setlabel",
        "gui_getcheckbox",
        "gui_setcheckbox"
      ],
      "raw_content": "<b><a href=\"gui_setlabel.html\">GUI.SetLabel</a></b> for changing the chec box's text and <b><a href=\"gui_getcheckbox.html\">GUI.GetCheckBox</a></b> and <b><a href=\"gui_setcheckbox.html\">GUI.SetCheckBox</a></b> for reading and setting the check box's state.<p>\r\n    </p>",
      "text_content": "GUI.SetLabel for changing the chec box's text and GUI.GetCheckBox and GUI.SetCheckBox for reading and setting the check box's state.\r\n    ",
      "mdown_content": "**[gui_setlabel.html](GUI.SetLabel)** for changing the chec box's text and **[gui_getcheckbox.html](GUI.GetCheckBox)** and **[gui_setcheckbox.html](GUI.SetCheckBox)** for reading and setting the check box's state."
    }
  ],
  "dependencies": [
    "gui_createcheckbox_full01.gif"
  ]
}
