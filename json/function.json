{
  "title": "function",
  "fileName": "function",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>functionDeclaration</i> is:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>function</b> <i>id </i>[ ( [<i>paramDeclaration </i>{, <i>paramDeclaration</i> } ] ) ]</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"2\"><font size=\"+1\">: <i>typeSpec</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"7\"><font size=\"+1\"><i>statementsAndDeclarations</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>end</b> <i>id</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A functionDeclaration is:\r\n function id [ ( [paramDeclaration {, paramDeclaration } ] ) ]       : typeSpec  statementsAndDeclarations end id",
      "mdown_content": "A _functionDeclaration_ is:\n\n**function** _id _[ ( [_paramDeclaration _{, _paramDeclaration_ } ] ) ]\n: _typeSpec_\n_statementsAndDeclarations_\n**end** _id_\n"
    },
    {
      "title": "Description",
      "raw_content": "A function declaration creates (but does not run) a new function. The name of the function (<i>id</i>) is given in two places, just after <b>function</b> and just after <b>end</b>.<p>\r\n</p>",
      "text_content": " A function declaration creates (but does not run) a new function. The name of the function (id) is given in two places, just after function and just after end.\r\n",
      "mdown_content": "A function declaration creates (but does not run) a new function. The name of the function (_id_) is given in two places, just after **function** and just after **end**."
    },
    {
      "title": "Example",
      "code": [
        "        function doubleIt ( x : real ) : real\r\n            result 2.0 * x\r\n        end doubleIt\r\n        \r\n        put doubleIt ( 5.3 )        % This outputs 10.6"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "code": [
        "        function [ pervasive ] id\r\n            [ ( [ paramDeclaration {,paramDeclaration } ] ) ] \r\n                [ resultId ] : typeSpec\r\n            [ pre trueFalseExpn ]\r\n            [ init id := expn {, id := expn } ]\r\n            [ post trueFalseExpn ]\r\n            [ exceptionHandler ]\r\n            statementsAndDeclarations\r\n        end id"
      ],
      "raw_content": "The set of parameters declared with the function are called <i>formal</i> parameters. For example, in the <i>doubleIt</i> function, <i>x</i> is a formal parameter. A function is called (invoked) by a <i>function call </i>which consists of the function's name followed by the parenthesized list of <i>actual </i>parameters (if any). For example, <i>doubleIt </i>(5.3) is a call having 5.3 as an actual parameter. If there are no parameters and no parentheses, the call does not have parentheses. The keyword <b>function</b> can be abbreviated to <b>fcn</b>. See also <i>functionCall </i>and <i>procedureDeclaration</i>.<p>\r\nEach actual non-<b>var</b> parameter must be assignable to the type of its corresponding formal parameter. See also <i>assignability</i>.</p>\n<p>\r\nA function must finish by executing a <b>result</b> statement, which produces the function's value. In the above example, the <b>result</b> statement computes and returns the value 2.0 * <i>x</i>.</p>\n<p>\r\nIn principle, a function (1) should not change any variables outside of itself (global variables) or (2) should not have <b>var</b> parameters. In other words, it should have no <i>side effects</i>. The original implementation prevented (1) and (2) and thereby prevented function side effects. Current implementations of Turing do not enforce this restriction.</p>\n<p>\r\nThe upper bounds of arrays and strings that are parameters may be declared to be an asterisk (<b>*</b>), meaning the bound is that of the actual parameter. See <i>paramDeclaration</i> for details about parameters.</p>\n<p>\r\nProcedures and functions cannot be declared inside other procedures and functions.</p>\n<p>\r\nThe syntax of a <i>functionDeclaration</i> presented above has been simplified by leaving out the optional result identifier, <b>import</b> list, <b>pre</b> condition, <b>init</b> clause, <b>post</b> condition and exception handler. The full syntax<i> </i>is</p>\n<p>\r\n</p>\r\nThe <i>resultId</i> is the name of the result of the function and can be used only in the <b>post</b> condition.<p>\r\nA function must be declared before being called; to allow for mutually recursive procedures and functions, there are <b>forward</b> declarations with later declaration of the procedure or function <b>body</b>. See <b>forward</b> and <b>body</b> declarations for explanations.</p>\n<p>\r\nYou declare parameterless functions using an empty parameter list. When this is done, a call to the function must include an empty parameter list.</p>\n<p>\r\n</p>",
      "text_content": " The set of parameters declared with the function are called formal parameters. For example, in the doubleIt function, x is a formal parameter. A function is called (invoked) by a function call which consists of the function's name followed by the parenthesized list of actual parameters (if any). For example, doubleIt (5.3) is a call having 5.3 as an actual parameter. If there are no parameters and no parentheses, the call does not have parentheses. The keyword function can be abbreviated to fcn. See also functionCall and procedureDeclaration.\r\nEach actual non-var parameter must be assignable to the type of its corresponding formal parameter. See also assignability.\r\nA function must finish by executing a result statement, which produces the function's value. In the above example, the result statement computes and returns the value 2.0 * x.\r\nIn principle, a function (1) should not change any variables outside of itself (global variables) or (2) should not have var parameters. In other words, it should have no side effects. The original implementation prevented (1) and (2) and thereby prevented function side effects. Current implementations of Turing do not enforce this restriction.\r\nThe upper bounds of arrays and strings that are parameters may be declared to be an asterisk (*), meaning the bound is that of the actual parameter. See paramDeclaration for details about parameters.\r\nProcedures and functions cannot be declared inside other procedures and functions.\r\nThe syntax of a functionDeclaration presented above has been simplified by leaving out the optional result identifier, import list, pre condition, init clause, post condition and exception handler. The full syntax is\r\n\r\nThe resultId is the name of the result of the function and can be used only in the post condition.\r\nA function must be declared before being called; to allow for mutually recursive procedures and functions, there are forward declarations with later declaration of the procedure or function body. See forward and body declarations for explanations.\r\nYou declare parameterless functions using an empty parameter list. When this is done, a call to the function must include an empty parameter list.\r\n",
      "mdown_content": "The set of parameters declared with the function are called _formal_ parameters. For example, in the _doubleIt_ function, _x_ is a formal parameter. A function is called (invoked) by a _function call _which consists of the function's name followed by the parenthesized list of _actual _parameters (if any). For example, _doubleIt _(5.3) is a call having 5.3 as an actual parameter. If there are no parameters and no parentheses, the call does not have parentheses. The keyword **function** can be abbreviated to **fcn**. See also _functionCall _and _procedureDeclaration_.\nEach actual non-**var** parameter must be assignable to the type of its corresponding formal parameter. See also _assignability_.\nA function must finish by executing a **result** statement, which produces the function's value. In the above example, the **result** statement computes and returns the value 2.0 * _x_.\nIn principle, a function (1) should not change any variables outside of itself (global variables) or (2) should not have **var** parameters. In other words, it should have no _side effects_. The original implementation prevented (1) and (2) and thereby prevented function side effects. Current implementations of Turing do not enforce this restriction.\nThe upper bounds of arrays and strings that are parameters may be declared to be an asterisk (__*__), meaning the bound is that of the actual parameter. See _paramDeclaration_ for details about parameters.\nProcedures and functions cannot be declared inside other procedures and functions.\nThe syntax of a _functionDeclaration_ presented above has been simplified by leaving out the optional result identifier, **import** list, **pre** condition, **init** clause, **post** condition and exception handler. The full syntax_ _is\nThe _resultId_ is the name of the result of the function and can be used only in the **post** condition.\nA function must be declared before being called; to allow for mutually recursive procedures and functions, there are **forward** declarations with later declaration of the procedure or function **body**. See **forward** and **body** declarations for explanations.\nYou declare parameterless functions using an empty parameter list. When this is done, a call to the function must include an empty parameter list."
    },
    {
      "title": "See also",
      "links": [
        "import",
        "pre",
        "condition",
        "init",
        "post",
        "condition",
        "pervasive"
      ],
      "raw_content": "<b><a href=\"import.html\">import</a></b> list, <b><a href=\"pre.html\">pre</a></b> <a href=\"condition.html\">condition</a>, <b><a href=\"init.html\">init</a></b> clause, <b><a href=\"post.html\">post</a></b> <a href=\"condition.html\">condition</a> and <i>exceptionHandler</i> for explanations of these additional features.<p>\r\nSee also <b><a href=\"pervasive.html\">pervasive</a></b>. </p>\n<p>\r\n</p>",
      "text_content": " import list, pre condition, init clause, post condition and exceptionHandler for explanations of these additional features.\r\nSee also pervasive. \r\n",
      "mdown_content": "**[import.html](import)** list, **[pre.html](pre)** [condition.html](condition), **[init.html](init)** clause, **[post.html](post)** [condition.html](condition) and _exceptionHandler_ for explanations of these additional features.\nSee also **[pervasive.html](pervasive)**. "
    }
  ],
  "dependencies": [

  ]
}
