{
  "title": "expn",
  "fileName": "expn",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "An <i>expn</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>explicitConstant</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% e.g.: 25</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>variableReference</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% e.g.: width</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(c)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>constantReference</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% e.g.: pi</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(d)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>expn</i> <i>infixOperator</i> <i>expn</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% e.g.: 3 <b>+</b> width</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(e)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>prefixOperator</i> <i>expn</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% e.g.: <b>-</b> width</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(f)</font></td>\n<td colspan=\"7\"><font size=\"+1\">(<i>expn</i>)</font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-3\"><font size=\"+1\"><i>% e.g.: (width - 7)</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(g)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>substring</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-3\"><font size=\"+1\"><i>% e.g.: s (3 .. 5)</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(h)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>functionCall</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% e.g.: sqrt (25)</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(i)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>setConstructor</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% e.g.: modes (4</i>,<i> 3)</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(j)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>enumeratedValue</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% e.g.: color . red</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " An expn is one of:\r\n (a)explicitConstant  % e.g.: 25 (b)variableReference  % e.g.: width (c)constantReference  % e.g.: pi (d)expn infixOperator expn % e.g.: 3 + width (e)prefixOperator expn % e.g.: - width (f)(expn)   % e.g.: (width - 7) (g)substring   % e.g.: s (3 .. 5) (h)functionCall  % e.g.: sqrt (25) (i)setConstructor  % e.g.: modes (4, 3) (j)enumeratedValue  % e.g.: color . red",
      "mdown_content": "An _expn_ is one of:   \n-  _explicitConstant_     _% e.g.: 25_   \n-  _variableReference_     _% e.g.: width_   \n-  _constantReference_     _% e.g.: pi_   \n-  _expn_ _infixOperator_ _expn_   _% e.g.: 3 **+** width_   \n-  _prefixOperator_ _expn_   _% e.g.: **-** width_   \n-  (_expn_)       _% e.g.: (width - 7)_   \n-  _substring_       _% e.g.: s (3 .. 5)_   \n-  _functionCall_     _% e.g.: sqrt (25)_   \n-  _setConstructor_     _% e.g.: modes (4_, _3)_   \n-  _enumeratedValue_     _% e.g.: color . red_"
    },
    {
      "title": "Description",
      "code": [
        "            3 + width"
      ],
      "raw_content": "An expression (<i>expn</i>)<i> </i>returns a value; in the general case, this may involve a calculation, such as addition, as in the expression:<p>\r\n</p>",
      "text_content": " An expression (expn) returns a value; in the general case, this may involve a calculation, such as addition, as in the expression:\r\n\r\n",
      "mdown_content": "An expression (_expn_) returns a value; in the general case, this may involve a calculation, such as addition, as in the expression:\n"
    },
    {
      "title": "Example",
      "code": [
        "        put \"Hello world\"           % \"Hello world\" is an expn\r\n        var diameter : real\r\n        const pi := 3.14159         % 3.14159 is an expn\r\n        diameter := pi * r ** 2         % pi * r ** 2 is an expn\r\n        var x := diameter               % diameter is an expn"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": "\n"
    },
    {
      "title": "Details",
      "raw_content": "In the simplest case, an expression (<i>expn</i>) is simply an explicit constant such as 25 or \"<i>Hello world</i>\". A variable by itself is considered to be an expression when its value is used. This is the case above, where the value of <i>diameter</i> is used to initialize <i>x</i>. More generally, an expression contains an operator such as <b>+</b> and carries out an actual calculation. An expression may also be a substring, function call, set constructor or enumerated value. For details, see the descriptions of these items.<p>\r\nThe Turing infix operators are: +, -, *, /, <b>div</b>, <b>mod</b>, **, &lt;, &gt;, =, &lt;=, &gt;=, <b>not=</b>, <b>not</b>, <b>and</b>, <b>or</b>, =&gt;, <b>in</b>, <b>not</b> <b>in</b>, <b>shr</b> (shift right), <b>shl</b> (shift left), and <b>xor</b> (exclusive <b>or</b>). For details, see <i>infixOperator</i>. The Turing prefix operators are +, - and <b>not</b>, ^ (pointer following) and # (see <b>cheat</b>). For details see <i>prefix </i>operator.</p>\n<p>\r\n</p>",
      "text_content": " In the simplest case, an expression (expn) is simply an explicit constant such as 25 or \"Hello world\". A variable by itself is considered to be an expression when its value is used. This is the case above, where the value of diameter is used to initialize x. More generally, an expression contains an operator such as + and carries out an actual calculation. An expression may also be a substring, function call, set constructor or enumerated value. For details, see the descriptions of these items.\r\nThe Turing infix operators are: +, -, *, /, div, mod, **, <, >, =, <=, >=, not=, not, and, or, =>, in, not in, shr (shift right), shl (shift left), and xor (exclusive or). For details, see infixOperator. The Turing prefix operators are +, - and not, ^ (pointer following) and # (see cheat). For details see prefix operator.\r\n",
      "mdown_content": "In the simplest case, an expression (_expn_) is simply an explicit constant such as 25 or \"_Hello world_\". A variable by itself is considered to be an expression when its value is used. This is the case above, where the value of _diameter_ is used to initialize _x_. More generally, an expression contains an operator such as **+** and carries out an actual calculation. An expression may also be a substring, function call, set constructor or enumerated value. For details, see the descriptions of these items.\n\nThe Turing infix operators are: +, -, *, /, **div**, **mod**, **, <, >, =, <=, >=, **not=**, **not**, **and**, **or**, =>, **in**, **not** **in**, **shr** (shift right), **shl** (shift left), and **xor** (exclusive **or**). For details, see _infixOperator_. The Turing prefix operators are +, - and **not**, ^ (pointer following) and # (see **cheat**). For details see _prefix_ operator.\n"
    },
    {
      "title": "See also",
      "links": [
        "precedence",
        "int",
        "real",
        "string1",
        "boolean"
      ],
      "raw_content": "<i><a href=\"precedence.html\">precedence</a> </i>of operators, as well as the <b><a href=\"int.html\">int</a></b>, <b><a href=\"real.html\">real</a></b>, <b><a href=\"string1.html\">string</a></b> and <b><a href=\"boolean.html\">boolean</a></b> types.<p>\r\n</p>",
      "text_content": " precedence of operators, as well as the int, real, string and boolean types.\r\n",
      "mdown_content": "_[precedence](precedence.html)_ of operators, as well as the **[int](int.html)**, **[real](real.html)**, **[string](string1.html)** and **[boolean](boolean.html)** types.\n"
    }
  ],
  "dependencies": [

  ]
}
