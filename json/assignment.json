{
  "title": "assignment",
  "fileName": "assignment",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "An <i>assignmentStatement</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><i>variableReference</i> := <i>expn</i></font></td>\n</tr></table>\n<p></p>",
      "mdown_content": "An *assignmentStatement* is:\n\n \n*variableReference* := *expn*"
    },
    {
      "title": "Description",
      "raw_content": "An assignment statement calculates the value of the expression (<i>expn</i>) and assigns that value to the variable (<i>variableReference</i>).<p>\r\n</p>",
      "mdown_content": "An assignment statement calculates the value of the expression (*expn*) and assigns that value to the variable (*variableReference*)."
    },
    {
      "title": "Example",
      "code": [
        "        var i : int\r\n        i := 24         % Variable i becomes 24\r\n        var a : array 1 .. 25 of string\r\n        a (i) := \"Ralph\"        % The i-th element of a becomes \"Ralph\"\r\n        \r\n        var b : array 1 .. 25 of string\r\n        b := a          % Array b becomes (is assigned) array a"
      ],
      "raw_content": "<p>\r\n</p>",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "raw_content": "The expression on the right of := must be <i>assignable </i>to the variable on the left. For example, in the above, any integer value, such as 24, is assignable to <i>i</i>,<i> </i>but a <b>real</b> value such as 3.14 would not be not assignable to <i>i</i>. Entire arrays, records and unions can be assigned. For example, in the above, array <i>a</i> is assigned to array <i>b</i>. See <i>assignability </i>for the exact rules of allowed assignments.<p>\r\nYou cannot assign a new value to a constant (<b>const</b>).</p>\n<p>\r\nThere are short forms that allow you to write assignment statements more compactly. For example,</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>i</i> := <i>i</i> + 1</td>\n</tr></table>\n<p>\r\ncan be shortened to</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>i</i> += 1</td>\n</tr></table>\n<p>\r\nIn Turing, there are short forms for combining +, = and * with assignment. For example, <i>i</i> *= 2 doubles <i>i</i>.</p>\n<p>\r\nThere are also short forms to allow any binary operator to be combined with assignment. For example, <i>i</i> <b>shl</b>= 2 shifts <i>i</i> by 2 to the left.</p>\n<p>\r\n</p>",
      "mdown_content": "The expression on the right of := must be *assignable *to the variable on the left. For example, in the above, any integer value, such as 24, is assignable to *i*,* *but a **real** value such as 3.14 would not be not assignable to *i*. Entire arrays, records and unions can be assigned. For example, in the above, array *a* is assigned to array *b*. See *assignability *for the exact rules of allowed assignments.\nYou cannot assign a new value to a constant (**const**).\n\nThere are short forms that allow you to write assignment statements more compactly. For example,\n\n\n \n\n*i* := *i* + 1\n\ncan be shortened to\n\n\n \n\n*i* += 1\n\nIn Turing, there are short forms for combining +, = and * with assignment. For example, *i* *= 2 doubles *i*.\n\nThere are also short forms to allow any binary operator to be combined with assignment. For example, *i* **shl**= 2 shifts *i* by 2 to the left.\n"
    }
  ]
}
