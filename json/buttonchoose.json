{
  "title": "buttonchoose",
  "fileName": "buttonchoose",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>buttonchoose</b> (<i>choice</i> : <b>string</b>)<p>\r\n</p></font>",
      "mdown_content": "**buttonchoose** (*choice* : **string**)"
    },
    {
      "title": "Description",
      "raw_content": "The <b>buttonchoose</b> procedure is used to change the mode of the mouse. In Turing, the mouse can either be in \"<i>single-button mode</i>\" or in \"<i>multi-button mode</i>\". In \"<i>single-button mode</i>\" the mouse is treated as a one button mouse. A button is considered pressed when any button is pressed and released only when all buttons have been released.<p>\r\nIn Turing, the mouse starts in \"<i>single-button mode</i>\".</p>\n<p>\r\nThe parameter <i>choice</i> can be one of \"singlebutton\", \"onebutton\" (which switch the mouse into \"<i>single-button mode</i>\") or \"multibutton\" (which switches the mouse into \"<i>multi-button mode</i>\").</p>\n<p>\r\n</p>",
      "mdown_content": "The **buttonchoose** procedure is used to change the mode of the mouse. In Turing, the mouse can either be in \"*single-button mode*\" or in \"*multi-button mode*\". In \"*single-button mode*\" the mouse is treated as a one button mouse. A button is considered pressed when any button is pressed and released only when all buttons have been released.\nIn Turing, the mouse starts in \"*single-button mode*\".\n\nThe parameter *choice* can be one of \"singlebutton\", \"onebutton\" (which switch the mouse into \"*single-button mode*\") or \"multibutton\" (which switches the mouse into \"*multi-button mode*\").\n"
    },
    {
      "title": "Example",
      "code": [
        "        buttonchoose (\"multibutton\")\r\n        var x, y, button, left, middle, right : int\r\n        mousewhere (x, y, button)\r\n        left := button mod 10           % left = 0 or 1\r\n        middle := (button - left) mod 100   % middle = 0 or 10\r\n        right := button - middle - left     % right = 0 or 100\r\n        if left = 1 then\r\n            put \"left button down\"\r\n        end if\r\n        if middle = 10 then\r\n            put \"middle button down\"\r\n        end if\r\n        if right = 100 then\r\n            put \"right button down\"\r\n        end if"
      ],
      "raw_content": "A program that displays the status of the mouse at the top left corner of the screen.<p>\r\n</p>",
      "mdown_content": "A program that displays the status of the mouse at the top left corner of the screen."
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "buttonchoose Example",
          "file": "buttonchoose.t"
        }
      ]
    },
    {
      "title": "See also",
      "links": [
        "buttonmoved",
        "buttonwait",
        "mousewhere",
        "mousemodule"
      ],
      "raw_content": "<b><a href=\"buttonmoved.html\">buttonmoved</a></b> and <b><a href=\"buttonwait.html\">buttonwait</a></b> to get mouse events saved in a queue. See also <b><a href=\"mousewhere.html\">mousewhere</a></b> to get the current status of mouse button(s).<p>\r\nSee also predefined unit <b><a href=\"mousemodule.html\">Mouse</a></b>.</p>\n<p>\r\n</p>",
      "mdown_content": "**[buttonmoved.html](buttonmoved)** and **[buttonwait.html](buttonwait)** to get mouse events saved in a queue. See also **[mousewhere.html](mousewhere)** to get the current status of mouse button(s).\nSee also predefined unit **[mousemodule.html](Mouse)**.\n"
    }
  ]
}
