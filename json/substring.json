{
  "title": "substring",
  "fileName": "substring",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>substring </i>is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringReference</i> ( <i>leftPosition</i> .. <i>rightPosition</i> )</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringReference</i> ( <i>charPosition</i> )</font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A substring is one of:\r\n (a)stringReference ( leftPosition .. rightPosition ) (b)stringReference ( charPosition )",
      "mdown_content": "A *substring *is one of:\n (a)*stringReference* ( *leftPosition* .. *rightPosition* ) (b)*stringReference* ( *charPosition* )"
    },
    {
      "title": "Description",
      "raw_content": "A substring selects a part of another string. In form (a) the substring starts at the left position and runs to the right position. In form (b), the substring is only a single character. Turing support substrings of <b>char</b>(<i>n</i>) values.<p>\r\n</p>",
      "text_content": " A substring selects a part of another string. In form (a) the substring starts at the left position and runs to the right position. In form (b), the substring is only a single character. Turing support substrings of char(n) values.\r\n",
      "mdown_content": "A substring selects a part of another string. In form (a) the substring starts at the left position and runs to the right position. In form (b), the substring is only a single character. Turing support substrings of **char**(*n*) values."
    },
    {
      "title": "Example",
      "code": [
        "        var word : string := \"bring\"\r\n        put word (2 .. 4)       % Outputs rin\r\n        put word (3)        % Outputs i\r\n        put word (2 .. *)       % Outputs ring; the star (*) means\r\n                        % the end of the string.\r\n        put word (* - 2 .. * - 1 )  % Outputs in"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "raw_content": "The leftmost possible position in a string is numbered 1. The last position in a string can be written as an asterisk (*). For example, <i>word</i> (2 .. *) is equivalent to <i>word</i> (2 .. <i>length</i>(<i>word</i>)).<p>\r\nEach of <i>leftPosition</i>,<i> rightPosition</i>,<i> </i>and <i>charPosition</i> must have one of these forms:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(a) <i>expn</i>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(b) <b>*</b>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(c) <b>*</b> <b>-</b> <i>expn</i>\n</td>\n</tr>\n</table>\n<p>\r\nThe exact rules for the allowed values of <i>leftPosition </i>and <i>rightPosition</i> are:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(1) <i>leftPosition</i> must be at least 1,</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(2) <i>rightPosition</i> must be at most <i>length </i>(<i>stringReference</i>), and</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(3) the length of the selected substring must zero or more.</td>\n</tr>\n</table>\n<p>\r\nThis specifically allows null substrings such as <i>word </i>(1, 0) in which <i>rightPosition </i>is 0 and <i>word </i>(6, 5) in which <i>leftPosition </i>is one more that <b>length</b> (<i>stringReference</i>).</p>\n<p>\r\nNote that substrings are not assignable. For example, if <i>s</i> is a string, the statement <i>s </i>(3) := \"a\" is illegal in Turing.</p>\n<p>\r\nTuring supports substrings of <b>char</b>(<i>n</i>) values. See <b>char</b>(<i>n</i>). If a substring of <b>char</b>(<i>n</i>) value <i>t</i> has two operands, as in <i>t</i>(2..77), the result type of this operation is a <b>string</b>. If the substring has one operand, as in <i>t</i>(7), this becomes, in effect,  a subscript into an array of characters. The result is a reference to a <b>char</b>, which can be assigned to or passed to a <b>var</b> parameter.</p>\n<p>\r\n</p>",
      "text_content": " The leftmost possible position in a string is numbered 1. The last position in a string can be written as an asterisk (*). For example, word (2 .. *) is equivalent to word (2 .. length(word)).\r\nEach of leftPosition, rightPosition, and charPosition must have one of these forms:\r\n (a) expn (b) * (c) * - expn\r\nThe exact rules for the allowed values of leftPosition and rightPosition are:\r\n (1) leftPosition must be at least 1, (2) rightPosition must be at most length (stringReference), and (3) the length of the selected substring must zero or more.\r\nThis specifically allows null substrings such as word (1, 0) in which rightPosition is 0 and word (6, 5) in which leftPosition is one more that length (stringReference).\r\nNote that substrings are not assignable. For example, if s is a string, the statement s (3) := \"a\" is illegal in Turing.\r\nTuring supports substrings of char(n) values. See char(n). If a substring of char(n) value t has two operands, as in t(2..77), the result type of this operation is a string. If the substring has one operand, as in t(7), this becomes, in effect,  a subscript into an array of characters. The result is a reference to a char, which can be assigned to or passed to a var parameter.\r\n",
      "mdown_content": "The leftmost possible position in a string is numbered 1. The last position in a string can be written as an asterisk (*). For example, *word* (2 .. *) is equivalent to *word* (2 .. *length*(*word*)).\nEach of *leftPosition*,* rightPosition*,* *and *charPosition* must have one of these forms:\n (a) *expn* (b) ***** (c) ***** **-** *expn*\nThe exact rules for the allowed values of *leftPosition *and *rightPosition* are:\n (1) *leftPosition* must be at least 1, (2) *rightPosition* must be at most *length *(*stringReference*), and (3) the length of the selected substring must zero or more.\nThis specifically allows null substrings such as *word *(1, 0) in which *rightPosition *is 0 and *word *(6, 5) in which *leftPosition *is one more that **length** (*stringReference*).\nNote that substrings are not assignable. For example, if *s* is a string, the statement *s *(3) := \"a\" is illegal in Turing.\nTuring supports substrings of **char**(*n*) values. See **char**(*n*). If a substring of **char**(*n*) value *t* has two operands, as in *t*(2..77), the result type of this operation is a **string**. If the substring has one operand, as in *t*(7), this becomes, in effect,  a subscript into an array of characters. The result is a reference to a **char**, which can be assigned to or passed to a **var** parameter."
    },
    {
      "title": "See also",
      "links": [
        "string1",
        "char",
        "char",
        "explicitstringconstant",
        "explicitcharconstant",
        "length"
      ],
      "raw_content": "<b><a href=\"string1.html\">string</a></b>, <b><a href=\"char.html\">char</a></b>, <b><a href=\"char.html\">char</a></b>(<i>n</i>), <i><a href=\"explicitstringconstant.html\">explicitStringConstant</a></i>, <i><a href=\"explicitcharconstant.html\">explicitCharConstant</a></i>, catenation and <b><a href=\"length.html\">length</a></b>.<p>\r\n</p>",
      "text_content": " string, char, char(n), explicitStringConstant, explicitCharConstant, catenation and length.\r\n",
      "mdown_content": "**[string1.html](string)**, **[char.html](char)**, **[char.html](char)**(*n*), *[explicitstringconstant.html](explicitStringConstant)*, *[explicitcharconstant.html](explicitCharConstant)*, catenation and **[length.html](length)**."
    }
  ],
  "dependencies": [

  ]
}
