{
  "title": "bits",
  "fileName": "bits",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>bits</b> (<i>expn</i>, <i>subrange</i>)<p>\r\n</p></font>",
      "text_content": " bits (expn, subrange)\r\n",
      "mdown_content": "**bits** (_expn_, _subrange_)"
    },
    {
      "title": "Description",
      "raw_content": "The <b>bits</b><i> </i>operator is used to extract a sequence of bits from a natural (non-negative) number expression. The bits are numbered from right to left as 0, 1, 2 &#133;<p>\r\n</p>",
      "text_content": " The bits operator is used to extract a sequence of bits from a natural (non-negative) number expression. The bits are numbered from right to left as 0, 1, 2 \r\n",
      "mdown_content": "The **bits** operator is used to extract a sequence of bits from a natural (non-negative) number expression. The bits are numbered from right to left as 0, 1, 2 &#133;\n"
    },
    {
      "title": "Example",
      "code": [
        "        type T12 : 1 .. 2           % Use to specify bit range\r\n        var d : nat2 := 2#1100      % Two byte natural number\r\n        % At this point bits(d, T12) = 2#10\r\n        bits (d, T12) := 2#01\r\n        % At this point d = 2#1010"
      ],
      "raw_content": "Set bits 2 and 1 (third and second from the right) in the variable <i>d</i> to be 01. We first set <i>b</i> to be the bit string 1100.<p>\r\n</p>",
      "text_content": " Set bits 2 and 1 (third and second from the right) in the variable d to be 01. We first set b to be the bit string 1100.\r\n\r\n",
      "mdown_content": "Set bits 2 and 1 (third and second from the right) in the variable _d_ to be 01. We first set _b_ to be the bit string 1100.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var n : nat1 := 0       % A one byte variable set to zero\r\n        bits (n, 7) := 1        % n now contains the pattern 10000000"
      ],
      "raw_content": "Set bit 7 in variable <i>n</i> to be 1. As a result, <i>n</i> will equal 2#10000000.<p>\r\n</p>",
      "text_content": " Set bit 7 in variable n to be 1. As a result, n will equal 2#10000000.\r\n\r\n",
      "mdown_content": "Set bit 7 in variable _n_ to be 1. As a result, _n_ will equal 2#10000000.\n"
    },
    {
      "title": "Details",
      "raw_content": "The form of <i>subrange</i> must be one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(a)</td>\n<td width=\"10\">&nbsp;</td>\n<td><i>typeSpec</i></td>\n<td width=\"10\">&nbsp;</td>\n<td><i>% Subrange type</i></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(b)</td>\n<td width=\"10\">&nbsp;</td>\n<td><i>compileTimeIntegerExpression</i></td>\n</tr>\n</table>\n<p>\r\nIn form (a) the subrange type specifies a range from <i>L</i> to <i>M</i> (for <i>least</i> and <i>most</i> significant). This is a little confusing because the subrange is written <i>L</i> .. <i>M</i> with <i>L</i> on the left and <i>M</i> on the right, but in a number, the least significant bit is on the right and the most significant is on the left. The subrange type can be either the name of a type, for example <i>T12</i>, or an explicit subrange, for example 3 .. 7. The values in the explicit subrange must be compile time values.</p>\n<p>\r\nForm (b) represents the range <i>n</i> .. <i>n</i> where <i>n</i> is the non-negative value of the expression. In other words, both <i>L</i> and <i>M</i> equal <i>n</i>. The expression can be any non-negative integer value or natural number value.</p>\n<p>\r\nIf the expression <i>expn</i> is a variable reference, the <b>bits</b> operation can be assigned to, but cannot be passed to, a <b>var</b> parameter. For example, in the above, <b>bits</b> (<i>d</i>, <i>T12</i>) has the value 2#01 assigned to it. For this assignment to be allowed, the expression <i>expn</i> must be a natural number type (<b>nat</b>, <b>nat1</b>, <b>nat2</b> or <b>nat4</b>).</p>\n<p>\r\n</p>",
      "text_content": " The form of subrange must be one of:\r\n (a) typeSpec % Subrange type (b) compileTimeIntegerExpression\r\nIn form (a) the subrange type specifies a range from L to M (for least and most significant). This is a little confusing because the subrange is written L .. M with L on the left and M on the right, but in a number, the least significant bit is on the right and the most significant is on the left. The subrange type can be either the name of a type, for example T12, or an explicit subrange, for example 3 .. 7. The values in the explicit subrange must be compile time values.\r\nForm (b) represents the range n .. n where n is the non-negative value of the expression. In other words, both L and M equal n. The expression can be any non-negative integer value or natural number value.\r\nIf the expression expn is a variable reference, the bits operation can be assigned to, but cannot be passed to, a var parameter. For example, in the above, bits (d, T12) has the value 2#01 assigned to it. For this assignment to be allowed, the expression expn must be a natural number type (nat, nat1, nat2 or nat4).\r\n",
      "mdown_content": "The form of _subrange_ must be one of:\n\n\n(a)   _typeSpec_   _% Subrange type_  \n(b)   _compileTimeIntegerExpression_  \n\n\nIn form (a) the subrange type specifies a range from _L_ to _M_ (for _least_ and _most_ significant). This is a little confusing because the subrange is written _L_ .. _M_ with _L_ on the left and _M_ on the right, but in a number, the least significant bit is on the right and the most significant is on the left. The subrange type can be either the name of a type, for example _T12_, or an explicit subrange, for example 3 .. 7. The values in the explicit subrange must be compile time values.\n\nForm (b) represents the range _n_ .. _n_ where _n_ is the non-negative value of the expression. In other words, both _L_ and _M_ equal _n_. The expression can be any non-negative integer value or natural number value.\n\nIf the expression _expn_ is a variable reference, the **bits** operation can be assigned to, but cannot be passed to, a **var** parameter. For example, in the above, **bits** (_d_, _T12_) has the value 2#01 assigned to it. For this assignment to be allowed, the expression _expn_ must be a natural number type (**nat**, **nat1**, **nat2** or **nat4**).\n"
    },
    {
      "title": "See also",
      "links": [
        "explicitintegerconstant",
        "ord",
        "chr",
        "intstr",
        "strint",
        "natstr",
        "strnat",
        "shr",
        "shl"
      ],
      "raw_content": "<i><a href=\"explicitintegerconstant.html\">explicitIntegerConstant</a></i> (for description of constants such as 16#FFFF) and the following functions that convert one type to another in a machine-independent manner: <b><a href=\"ord.html\">ord</a></b>, <b><a href=\"chr.html\">chr</a></b>, <b><a href=\"intstr.html\">intstr</a></b>, <b><a href=\"strint.html\">strint</a></b>, <b><a href=\"natstr.html\">natstr</a></b>, and <b><a href=\"strnat.html\">strnat</a></b>. See also <b><a href=\"shr.html\">shr</a></b> and <b><a href=\"shl.html\">shl</a></b> (shift right and left).<p>\r\n</p>",
      "text_content": " explicitIntegerConstant (for description of constants such as 16#FFFF) and the following functions that convert one type to another in a machine-independent manner: ord, chr, intstr, strint, natstr, and strnat. See also shr and shl (shift right and left).\r\n",
      "mdown_content": "_[explicitIntegerConstant](explicitintegerconstant.html)_ (for description of constants such as 16#FFFF) and the following functions that convert one type to another in a machine-independent manner: **[ord](ord.html)**, **[chr](chr.html)**, **[intstr](intstr.html)**, **[strint](strint.html)**, **[natstr](natstr.html)**, and **[strnat](strnat.html)**. See also **[shr](shr.html)** and **[shl](shl.html)** (shift right and left).\n"
    }
  ],
  "dependencies": [

  ]
}
