{
  "title": "deferred",
  "fileName": "deferred",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A deferredDeclaration is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>deferred</b> subprogramHeader</font></td>\n</tr></table>\n<p></p>",
      "text_content": " A deferredDeclaration is:\r\n deferred subprogramHeader",
      "mdown_content": "A deferredDeclaration is:\n\n\n**deferred** subprogramHeader\n\n"
    },
    {
      "title": "Description",
      "raw_content": "A procedure or function is declared to be <b>deferred</b> when you want to be able to override the subprogram in an expansion. The procedure or function must be in a module, monitor or class.<p>\r\n</p>",
      "text_content": " A procedure or function is declared to be deferred when you want to be able to override the subprogram in an expansion. The procedure or function must be in a module, monitor or class.\r\n",
      "mdown_content": "A procedure or function is declared to be **deferred** when you want to be able to override the subprogram in an expansion. The procedure or function must be in a module, monitor or class.\n"
    },
    {
      "title": "Example",
      "code": [
        "        class stack\r\n            export push, pop\r\n             local declarations \r\n             declarations of the push and pop procedures \r\n            deferred procedure display (howbig : int)\r\n        end stack",
        "        class stackWithSimpleDisplay\r\n            body procedure display      % (howbig : int)\r\n                    graphically display the stack on the screen \r\n            end display\r\n        end stackWithSimpleDisplay",
        "        var p : ^stackWithSimpleDisplay\r\n        new p\r\n        \r\n        p -> display (25)       % Display the stack on the screen"
      ],
      "raw_content": "The <i>display</i> procedure is deferred in this class of stacks to allow various ways of graphically displaying the stack on the screen:<p>\r\n</p>\r\nAn expansion to the <i>stack</i> class can give a body for <i>display</i>, as in:<p>\r\n</p>\r\nThe following creates a stack that can be displayed and displays it:<p>\r\n</p>",
      "text_content": " The display procedure is deferred in this class of stacks to allow various ways of graphically displaying the stack on the screen:\r\n\r\nAn expansion to the stack class can give a body for display, as in:\r\n\r\nThe following creates a stack that can be displayed and displays it:\r\n\r\n",
      "mdown_content": "The _display_ procedure is deferred in this class of stacks to allow various ways of graphically displaying the stack on the screen:\n\nAn expansion to the _stack_ class can give a body for _display_, as in:\n\nThe following creates a stack that can be displayed and displays it:\n"
    },
    {
      "title": "Details",
      "raw_content": "A deferred procedure is <i>resolved</i> by giving its body. This can be done in the scope (<b>module</b>, <b>monitor</b> or <b>class</b>) containing the <b>deferred</b> declaration (following the <b>deferred</b> declaration) or in any expansion of that scope. Only one resolution per scope is allowed. Unresolved subprograms can be called, but they immediately abort.<p>\r\nAll exported subprograms are implicitly deferred and can be overridden in expansions. </p>\n<p>\r\nDuring initialization of a <b>module</b>, <b>monitor</b> or <b>object</b> of a <b>class</b>, deferred subprograms (including exported subprograms) cannot be called. This restriction prevents accessing an object before it is fully initialized.</p>\n<p>\r\nA <b>deferred</b> declaration must not appear in the main program.</p>\n<p>\r\n</p>",
      "text_content": " A deferred procedure is resolved by giving its body. This can be done in the scope (module, monitor or class) containing the deferred declaration (following the deferred declaration) or in any expansion of that scope. Only one resolution per scope is allowed. Unresolved subprograms can be called, but they immediately abort.\r\nAll exported subprograms are implicitly deferred and can be overridden in expansions. \r\nDuring initialization of a module, monitor or object of a class, deferred subprograms (including exported subprograms) cannot be called. This restriction prevents accessing an object before it is fully initialized.\r\nA deferred declaration must not appear in the main program.\r\n",
      "mdown_content": "A deferred procedure is _resolved_ by giving its body. This can be done in the scope (**module**, **monitor** or **class**) containing the **deferred** declaration (following the **deferred** declaration) or in any expansion of that scope. Only one resolution per scope is allowed. Unresolved subprograms can be called, but they immediately abort.\n\nAll exported subprograms are implicitly deferred and can be overridden in expansions. \n\nDuring initialization of a **module**, **monitor** or **object** of a **class**, deferred subprograms (including exported subprograms) cannot be called. This restriction prevents accessing an object before it is fully initialized.\n\nA **deferred** declaration must not appear in the main program.\n"
    },
    {
      "title": "See also",
      "links": [
        "module",
        "monitor",
        "class",
        "export",
        "import",
        "inherit",
        "implement",
        "implement_by"
      ],
      "raw_content": "<b><a href=\"module.html\">module</a></b>, <b><a href=\"monitor.html\">monitor</a></b> and <b><a href=\"class.html\">class</a></b>. See also <b><a href=\"export.html\">export</a></b> list, <b><a href=\"import.html\">import</a></b> list, <b><a href=\"inherit.html\">inherit</a></b> list, <b><a href=\"implement.html\">implement</a></b> list and <b><a href=\"implement_by.html\">implement by</a></b> list.<p>\r\n</p>",
      "text_content": " module, monitor and class. See also export list, import list, inherit list, implement list and implement by list.\r\n",
      "mdown_content": "**[module.html](module)**, **[monitor.html](monitor)** and **[class.html](class)**. See also **[export.html](export)** list, **[import.html](import)** list, **[inherit.html](inherit)** list, **[implement.html](implement)** list and **[implement_by.html](implement by)** list.\n"
    }
  ],
  "dependencies": [

  ]
}
