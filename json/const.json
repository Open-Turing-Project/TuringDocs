{
  "title": "const",
  "fileName": "const",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>constantDeclaration</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>const</b> <i>id</i> [ : <i>typeSpec</i> ] := <i>initializingValue</i></font></td>\n</tr></table>\n<p></p>",
      "text_content": " A constantDeclaration is:\r\n const id [ : typeSpec ] := initializingValue",
      "mdown_content": "A *constantDeclaration* is:\n **const** *id* [ : *typeSpec* ] := *initializingValue*"
    },
    {
      "title": "Description",
      "raw_content": "A const declaration creates a name <i>id</i> for a value.<p>\r\n</p>",
      "text_content": " A const declaration creates a name id for a value.\r\n",
      "mdown_content": "A const declaration creates a name *id* for a value."
    },
    {
      "title": "Example",
      "code": [
        "        const c := 3\r\n        const s := \"Hello\"      % The type of s is string\r\n        const x := sin (y) ** 2\r\n        const a : array 1..3 of int := init (1, 2, 3)\r\n        const b : array 1..3 of int := a\r\n        const c : array 1..2, 1..2 of int := init (1, 2, 3, 4)\r\n                % So c(1,1)=1, c(1,2)=2, c(2,1)=3, c(2,2)=4"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "code": [
        "        const [pervasive] [register] id [ : typeSpec ] := initializingValue"
      ],
      "raw_content": "The initializing value can be an arbitrary value or else a list of items separated by commas inside <b>init</b> (&#133;). The syntax of <i>initializingValue </i>is:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>a.</td>\n<td width=\"10\">&nbsp;</td>\n<td><i>expn</i></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>b.</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<b>init</b> (initializingValue, initializingValue)</td>\n</tr>\n</table>\n<p>\r\nEach <b>init</b> (&#133;) corresponds to an array, record or union value that is being initialized. These must be nested for initialization of nested types. In the Pascal language, constants must have values known at compile time; Turing has no such restriction.</p>\n<p>\r\nWhen the typeSpec is omitted, the variable's type is taken to be the (root) type of the initializing expression, for example, <b>int</b> or <b>string</b>. The typeSpec cannot be omitted for dynamic arrays or when the initializing value is of the form <b>init</b> (&#133;). The values inside <b>init</b> (&#133;) must be known at compile time.</p>\n<p>\r\nThe keyword <b>pervasive</b> can be inserted just after <b>const</b>. When this is done, the constant is visible inside all subconstructs of the constant's scope. Without <b>pervasive</b>, the constant is not visible inside modules, monitors or classes unless explicitly imported. Pervasive constants need not be imported. You can abbreviate <b>pervasive</b> as an asterisk (<b>*</b>).</p>\n<p>\r\nYou can also optionally use the <b>register</b> keyword to request that the constant be placed in a machine register. The syntax for constantDeclaration is actually:</p>\n<p>\r\n</p>\r\nIn the current (2002) implementation, programs are run interpretively using pseudo-code, which has no machine registers, and the <b>register</b> keyword is ignored. See also <b>register</b> for restrictions on the use of register constants.<p>\r\n</p>",
      "text_content": " The initializing value can be an arbitrary value or else a list of items separated by commas inside init (). The syntax of initializingValue is:\r\n a. expn b. init (initializingValue, initializingValue)\r\nEach init () corresponds to an array, record or union value that is being initialized. These must be nested for initialization of nested types. In the Pascal language, constants must have values known at compile time; Turing has no such restriction.\r\nWhen the typeSpec is omitted, the variable's type is taken to be the (root) type of the initializing expression, for example, int or string. The typeSpec cannot be omitted for dynamic arrays or when the initializing value is of the form init (). The values inside init () must be known at compile time.\r\nThe keyword pervasive can be inserted just after const. When this is done, the constant is visible inside all subconstructs of the constant's scope. Without pervasive, the constant is not visible inside modules, monitors or classes unless explicitly imported. Pervasive constants need not be imported. You can abbreviate pervasive as an asterisk (*).\r\nYou can also optionally use the register keyword to request that the constant be placed in a machine register. The syntax for constantDeclaration is actually:\r\n\r\nIn the current (2002) implementation, programs are run interpretively using pseudo-code, which has no machine registers, and the register keyword is ignored. See also register for restrictions on the use of register constants.\r\n",
      "mdown_content": "The initializing value can be an arbitrary value or else a list of items separated by commas inside **init** (). The syntax of *initializingValue *is:\n a. *expn* b. **init** (initializingValue, initializingValue)\nEach **init** () corresponds to an array, record or union value that is being initialized. These must be nested for initialization of nested types. In the Pascal language, constants must have values known at compile time; Turing has no such restriction.\nWhen the typeSpec is omitted, the variable's type is taken to be the (root) type of the initializing expression, for example, **int** or **string**. The typeSpec cannot be omitted for dynamic arrays or when the initializing value is of the form **init** (). The values inside **init** () must be known at compile time.\nThe keyword **pervasive** can be inserted just after **const**. When this is done, the constant is visible inside all subconstructs of the constant's scope. Without **pervasive**, the constant is not visible inside modules, monitors or classes unless explicitly imported. Pervasive constants need not be imported. You can abbreviate **pervasive** as an asterisk (*****).\nYou can also optionally use the **register** keyword to request that the constant be placed in a machine register. The syntax for constantDeclaration is actually:\nIn the current (2002) implementation, programs are run interpretively using pseudo-code, which has no machine registers, and the **register** keyword is ignored. See also **register** for restrictions on the use of register constants."
    }
  ]
}
