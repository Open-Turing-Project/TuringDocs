{
  "title": "Dir.GetLong",
  "fileName": "dir_getlong",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Dir.GetLong</b> (<i>streamNumber</i> : <b>int</b>, <b>var</b> <i>entryName</i> : <b>string</b>,</font><br><table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>  <td colspan=\"7\"><font size=\"+1\"><b>var</b> <i>size</i>, <i>attribute</i>, <i>fileTime</i> : <b>int</b>)</font></td>\n</tr></table>\n<p></p>",
      "text_content": "Dir.GetLong (streamNumber : int, var entryName : string,    var size, attribute, fileTime : int)",
      "mdown_content": "**Dir.GetLong** (*streamNumber* : **int**, **var** *entryName* : **string**,    **var** *size*, *attribute*, *fileTime* : **int**)"
    },
    {
      "title": "Description",
      "raw_content": "<b>Dir.GetLong</b> is part of a series of four subprograms that help users get directory listings. <b>Dir.GetLong</b> is used to get the names and assorted information of the files in the directory. Each time the function is called, it returns the name and information of the next file in the directory. The names are not sorted. When there are no more file names in the directory, <b>Dir.GetLong</b> returns the empty string in the <i>entryName</i> parameter.<p>\r\nThe <i>size</i> parameter is the size of the file in bytes. The <i>attribute</i> parameter has its individual bits set as follows (the individual bits can be extracted using the <b>bits</b> operator):</p>\n<p>\r\nBit 0  <i>attrDir</i>   set to 1 if entry is a directory.</p>\n<p>\r\nBit 1  <i>attrRead</i>  set to 1 if the program can read the file.</p>\n<p>\r\nBit 2  <i>attrWrite</i>  set to 1 if the program can write the file.</p>\n<p>\r\nBit 3  <i>attrExecute</i>  set to 1 if the program can execute the file.</p>\n<p>\r\nBit 4  <i>attrHidden</i>  set to 1 if the entry if a hidden file (PC, Mac).</p>\n<p>\r\nBit 5  <i>attrSystem</i>  set to 1 if the entry is a system file (PC only).</p>\n<p>\r\nBit 6  <i>attrVolume</i>  set to 1 if the entry is a volume name (PC only).</p>\n<p>\r\nBit 7  <i>attrArchive</i>  set to 1 if the entry has archive bit set (PC only).</p>\n<p>\r\nThe <i>attr...</i> constants are defined in the <b>Dir</b> unit. They correspond to the values of <i>attribute</i> if a specified bit is set.  For example, <i>attrSystem</i> is the value of the <i>attribute</i> parameter if bit 5 is set to 1. You can <b>and</b> or <b>or </b>these constants to get combinations of specific file attributes. </p>\n<p>\r\nThe <i>fileTime</i> is the time of last modification of the file. It is returned as the number of seconds since 00:00:00 GMT 1/1/1970. To convert this to a string, use <b>Time.SecDate</b></p>\n<p>\r\n</p>",
      "text_content": " Dir.GetLong is part of a series of four subprograms that help users get directory listings. Dir.GetLong is used to get the names and assorted information of the files in the directory. Each time the function is called, it returns the name and information of the next file in the directory. The names are not sorted. When there are no more file names in the directory, Dir.GetLong returns the empty string in the entryName parameter.\r\nThe size parameter is the size of the file in bytes. The attribute parameter has its individual bits set as follows (the individual bits can be extracted using the bits operator):\r\nBit 0  attrDir   set to 1 if entry is a directory.\r\nBit 1  attrRead  set to 1 if the program can read the file.\r\nBit 2  attrWrite  set to 1 if the program can write the file.\r\nBit 3  attrExecute  set to 1 if the program can execute the file.\r\nBit 4  attrHidden  set to 1 if the entry if a hidden file (PC, Mac).\r\nBit 5  attrSystem  set to 1 if the entry is a system file (PC only).\r\nBit 6  attrVolume  set to 1 if the entry is a volume name (PC only).\r\nBit 7  attrArchive  set to 1 if the entry has archive bit set (PC only).\r\nThe attr... constants are defined in the Dir unit. They correspond to the values of attribute if a specified bit is set.  For example, attrSystem is the value of the attribute parameter if bit 5 is set to 1. You can and or or these constants to get combinations of specific file attributes. \r\nThe fileTime is the time of last modification of the file. It is returned as the number of seconds since 00:00:00 GMT 1/1/1970. To convert this to a string, use Time.SecDate\r\n",
      "mdown_content": "**Dir.GetLong** is part of a series of four subprograms that help users get directory listings. **Dir.GetLong** is used to get the names and assorted information of the files in the directory. Each time the function is called, it returns the name and information of the next file in the directory. The names are not sorted. When there are no more file names in the directory, **Dir.GetLong** returns the empty string in the *entryName* parameter.\nThe *size* parameter is the size of the file in bytes. The *attribute* parameter has its individual bits set as follows (the individual bits can be extracted using the **bits** operator):\nBit 0  *attrDir*   set to 1 if entry is a directory.\nBit 1  *attrRead*  set to 1 if the program can read the file.\nBit 2  *attrWrite*  set to 1 if the program can write the file.\nBit 3  *attrExecute*  set to 1 if the program can execute the file.\nBit 4  *attrHidden*  set to 1 if the entry if a hidden file (PC, Mac).\nBit 5  *attrSystem*  set to 1 if the entry is a system file (PC only).\nBit 6  *attrVolume*  set to 1 if the entry is a volume name (PC only).\nBit 7  *attrArchive*  set to 1 if the entry has archive bit set (PC only).\nThe *attr...* constants are defined in the **Dir** unit. They correspond to the values of *attribute* if a specified bit is set.  For example, *attrSystem* is the value of the *attribute* parameter if bit 5 is set to 1. You can **and** or **or **these constants to get combinations of specific file attributes. \nThe *fileTime* is the time of last modification of the file. It is returned as the number of seconds since 00:00:00 GMT 1/1/1970. To convert this to a string, use **Time.SecDate**"
    },
    {
      "title": "Details",
      "raw_content": "If the <b>Dir.GetLong</b> call fails, then <b>Error.Last</b> will return a non-zero value indicating the reason for the failure. <b>Error.LastMsg</b> will return a string which contains the textual version of the error.<p>\r\n</p>",
      "text_content": " If the Dir.GetLong call fails, then Error.Last will return a non-zero value indicating the reason for the failure. Error.LastMsg will return a string which contains the textual version of the error.\r\n",
      "mdown_content": "If the **Dir.GetLong** call fails, then **Error.Last** will return a non-zero value indicating the reason for the failure. **Error.LastMsg** will return a string which contains the textual version of the error."
    },
    {
      "title": "Example",
      "code": [
        "        var streamNumber : int\r\n        var fileName : string\r\n        var size, attribute, fileTime : int\r\n        streamNumber := Dir.Open (\"datafiles\")\r\n        assert streamNumber > 0\r\n        loop\r\n            Dir.GetLong (streamNumber, fileName, size, attribute, fileTime)\r\n            exit when fileName = \"\"\r\n            put fileName, \"  \", Time.SecDate (fileTime)\r\n        end loop\r\n        Dir.Close (streamNumber)"
      ],
      "raw_content": "This program prints a listing of all the files in the directory <i>datafiles</i>.<p>\r\n</p>",
      "text_content": " This program prints a listing of all the files in the directory datafiles.\r\n\r\n",
      "mdown_content": "This program prints a listing of all the files in the directory *datafiles*."
    },
    {
      "title": "Example",
      "code": [
        "        var streamNumber : int\r\n        var fileName : string\r\n        var size, attribute, fileTime : int\r\n        streamNumber := Dir.Open (Dir.Current)\r\n        assert streamNumber > 0\r\n        loop\r\n            Dir.GetLong (streamNumber, fileName, size, attribute, fileTime)\r\n            exit when fileName = \"\"\r\n            put fileName, \"  \"..\r\n            if (attribute and attrDir) not= 0 then\r\n                put \"Directory  \"..\r\n            end if\r\n            if (attribute and attrRead) not= 0 then\r\n                put \"Readable  \"..\r\n            end if\r\n            if (attribute and attrWrite) not= 0 then\r\n                put \"Writeable  \"..\r\n            end if\r\n            if (attribute and attrExecute) not= 0 then\r\n                put \"Executable  \"..\r\n            end if\r\n            put \"\"\r\n        end loop\r\n        Dir.Close (streamNumber)"
      ],
      "raw_content": "This program prints a listing of the attributes of all the files in the current directory.<p>\r\n</p>",
      "text_content": " This program prints a listing of the attributes of all the files in the current directory.\r\n\r\n",
      "mdown_content": "This program prints a listing of the attributes of all the files in the current directory."
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Full Directory Listing Example",
          "file": "FullDirectoryListing.t"
        }
      ]
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>Dir.GetLong</b>, not by calling <b>GetLong</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling Dir.GetLong, not by calling GetLong.\r\n",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **Dir.GetLong**, not by calling **GetLong**."
    }
  ]
}
