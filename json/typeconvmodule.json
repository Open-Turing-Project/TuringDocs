{
  "title": "TypeConv",
  "fileName": "typeconvmodule",
  "sections": [
    {
      "title": "Description",
      "raw_content": "This unit contains the predefined subprograms that convert between different Turing standard types. There are also six routines that are part of the language, rather than part of the unit, but are conceptually part of this unit.<p>\r\nAll routines in the <b>TypeConv</b> unit are exported unqualified.</p>\n<p>\r\nDescription of the routines in the <b>TypeConv</b> module can be found in this chapter.</p>\n<p>\r\n</p>",
      "text_content": " This unit contains the predefined subprograms that convert between different Turing standard types. There are also six routines that are part of the language, rather than part of the unit, but are conceptually part of this unit.\r\nAll routines in the TypeConv unit are exported unqualified.\r\nDescription of the routines in the TypeConv module can be found in this chapter.\r\n",
      "mdown_content": "This unit contains the predefined subprograms that convert between different Turing standard types. There are also six routines that are part of the language, rather than part of the unit, but are conceptually part of this unit.\n\nAll routines in the **TypeConv** unit are exported unqualified.\n\nDescription of the routines in the **TypeConv** module can be found in this chapter.\n"
    },
    {
      "title": "Entry Points",
      "links": [
        "typeconv_intreal",
        "typeconv_intstr",
        "typeconv_natreal",
        "typeconv_natstr",
        "typeconv_round",
        "typeconv_floor",
        "typeconv_ceil",
        "typeconv_realstr",
        "typeconv_erealstr",
        "typeconv_frealstr",
        "typeconv_strint",
        "typeconv_strintok",
        "typeconv_strnat",
        "typeconv_strnatok",
        "typeconv_strreal",
        "typeconv_strrealok",
        "typeconv_chr",
        "typeconv_ord"
      ],
      "raw_content": "<table>\n<tr valign=\"top\">\n<td><a href=\"typeconv_intreal.html\"><b>intreal</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts an integer to a real.</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_intstr.html\"><b>intstr</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts an integer to a string.</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_natreal.html\"><b>natreal</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a natural number to a real.</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_natstr.html\"><b>natstr</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a natural number to a string.</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_round.html\"><b>round</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a real to an integer (rounding).</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_floor.html\"><b>floor</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a real to an integer (round down).</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_ceil.html\"><b>ceil</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a real to an integer (round up).</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_realstr.html\"><b>realstr</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a real to a string.</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_erealstr.html\"><b>erealstr</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a real to a string (exponential notation).</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_frealstr.html\"><b>frealstr</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a real to a string (no exponent).</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_strint.html\"><b>strint</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a string to an integer.</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_strintok.html\"><b>strintok</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Returns whether a string can legally be converted to an integer.</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_strnat.html\"><b>strnat</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a string to a natural number.</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_strnatok.html\"><b>strnatok</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Returns whether a string can legally be converted to a natural number.</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_strreal.html\"><b>strreal</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Converts a string to a real.</td>\n</tr>\n<tr valign=\"top\">\n<td><a href=\"typeconv_strrealok.html\"><b>strrealok</b></a></td>\n<td width=\"20\">&nbsp;</td>\n<td>Returns whether a string can legally be converted to a real.</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_chr.html\"><b>chr</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Returns the ASCII value of a specified string of length one.</td>\n</tr>\n<tr valign=\"top\">\n<td>\n<a href=\"typeconv_ord.html\"><b>ord</b></a>*</td>\n<td width=\"20\">&nbsp;</td>\n<td>Returns a string of length one with the ASCII value specified.</td>\n</tr>\n</table>\n<p>\r\n* Part of the language, conceptually part of the <b>TypeConv</b> unit.</p>\n<p>\r\n</p>",
      "text_content": "intreal Converts an integer to a real.intstr* Converts an integer to a string.natreal Converts a natural number to a real.natstr* Converts a natural number to a string.round Converts a real to an integer (rounding).floor Converts a real to an integer (round down).ceil Converts a real to an integer (round up).realstr Converts a real to a string.erealstr Converts a real to a string (exponential notation).frealstr Converts a real to a string (no exponent).strint* Converts a string to an integer.strintok* Returns whether a string can legally be converted to an integer.strnat* Converts a string to a natural number.strnatok* Returns whether a string can legally be converted to a natural number.strreal Converts a string to a real.strrealok Returns whether a string can legally be converted to a real.chr* Returns the ASCII value of a specified string of length one.ord* Returns a string of length one with the ASCII value specified.\r\n* Part of the language, conceptually part of the TypeConv unit.\r\n",
      "mdown_content": "\n[**intreal**](typeconv_intreal.html)   Converts an integer to a real.  \n[**intstr**](typeconv_intstr.html)*   Converts an integer to a string.  \n[**natreal**](typeconv_natreal.html)   Converts a natural number to a real.  \n[**natstr**](typeconv_natstr.html)*   Converts a natural number to a string.  \n[**round**](typeconv_round.html)   Converts a real to an integer (rounding).  \n[**floor**](typeconv_floor.html)   Converts a real to an integer (round down).  \n[**ceil**](typeconv_ceil.html)   Converts a real to an integer (round up).  \n[**realstr**](typeconv_realstr.html)   Converts a real to a string.  \n[**erealstr**](typeconv_erealstr.html)   Converts a real to a string (exponential notation).  \n[**frealstr**](typeconv_frealstr.html)   Converts a real to a string (no exponent).  \n[**strint**](typeconv_strint.html)*   Converts a string to an integer.  \n[**strintok**](typeconv_strintok.html)*   Returns whether a string can legally be converted to an integer.  \n[**strnat**](typeconv_strnat.html)*   Converts a string to a natural number.  \n[**strnatok**](typeconv_strnatok.html)*   Returns whether a string can legally be converted to a natural number.  \n[**strreal**](typeconv_strreal.html)   Converts a string to a real.  \n[**strrealok**](typeconv_strrealok.html)   Returns whether a string can legally be converted to a real.  \n[**chr**](typeconv_chr.html)*   Returns the ASCII value of a specified string of length one.  \n[**ord**](typeconv_ord.html)*   Returns a string of length one with the ASCII value specified.  \n\n\n* Part of the language, conceptually part of the **TypeConv** unit.\n"
    }
  ],
  "dependencies": [

  ]
}
