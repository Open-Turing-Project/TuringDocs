{
  "title": "string",
  "fileName": "string",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>stringComparison</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringExpn</i> = <i>stringExpn</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringExpn</i> <b>not=</b> <i>stringExpn</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(c)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringExpn</i> <b>&gt;</b> <i>stringExpn</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(d)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringExpn</i> <b>&lt;</b> <i>stringExpn</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(e)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringExpn</i> <b>&gt;</b>= <i>stringExpn</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(f)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>stringExpn</i> <b>&lt;</b>= <i>stringExpn</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A stringComparison is one of:\r\n (a)stringExpn = stringExpn (b)stringExpn not= stringExpn (c)stringExpn > stringExpn (d)stringExpn < stringExpn (e)stringExpn >= stringExpn (f)stringExpn <= stringExpn",
      "mdown_content": "A _stringComparison_ is one of:   (a) _stringExpn_ = _stringExpn_   (b) _stringExpn_ **not=** _stringExpn_   (c) _stringExpn_ **>** _stringExpn_   (d) _stringExpn_ **<** _stringExpn_   (e) _stringExpn_ **>**= _stringExpn_   (f) _stringExpn_ **<**= _stringExpn_"
    },
    {
      "title": "Description",
      "raw_content": "Strings (<i>stringExpns</i>) can be compared for equality (= and <b>not=</b>) and for ordering (&gt;, &lt;, &gt;= and &lt;=).<p>\r\n</p>",
      "text_content": " Strings (stringExpns) can be compared for equality (= and not=) and for ordering (>, <, >= and <=).\r\n",
      "mdown_content": "Strings (_stringExpns_) can be compared for equality (= and **not=**) and for ordering (>, <, >= and <=).\n"
    },
    {
      "title": "Example",
      "code": [
        "        var name : string := \"Nancy\"\r\n        var licenceNumber : string ( 6 )\r\n        licenceNumber := \"175AJN\""
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": "\n"
    },
    {
      "title": "Details",
      "raw_content": "Two strings are considered to be equal (=) if they have the same length and are made up, character by character, of the same characters. If they differ,  they are considered to be unequal (<b>not=</b>).<p>\r\nOrdering among strings is essentially alphabetic order. String <i>S</i> is considered to come before string <i>T</i>, that is <i>S</i> <b>&lt;</b> <i>T</i>, if the two are identical up to a certain position and after that position, either the next character of <i>S</i> comes before the next character of <i>T</i>, or else there are no more characters in <i>S</i> while <i>T</i> contains more characters.</p>\n<p>\r\n<i>S </i>&gt; <i>T</i> (<i>S</i> comes after <i>T </i>) means the same thing as <i>T </i>&lt; <i>S</i>. <i>S </i>&gt;= <i>T </i>means the same thing as <i>S </i>&gt; <i>T </i><b>or</b> <i>S </i>= <i>T</i>. <i>S </i>&lt;= <i>T</i> means the same thing as <i>S </i>&lt; <i>T </i><b>or</b> <i>S</i>=<i>T</i>.</p>\n<p>\r\nASCII gives the ordering among individual characters. It specifies, among other things, that letter capital <i>L</i>  comes alphabetically before capital letter <i>M</i> and similarly for small (lower case) letters.</p>\n<p>\r\nOn IBM mainframe computers, the EBCDIC specification of characters may be used instead of ASCII.</p>\n<p>\r\n</p>",
      "text_content": " Two strings are considered to be equal (=) if they have the same length and are made up, character by character, of the same characters. If they differ,  they are considered to be unequal (not=).\r\nOrdering among strings is essentially alphabetic order. String S is considered to come before string T, that is S < T, if the two are identical up to a certain position and after that position, either the next character of S comes before the next character of T, or else there are no more characters in S while T contains more characters.\r\nS > T (S comes after T ) means the same thing as T < S. S >= T means the same thing as S > T or S = T. S <= T means the same thing as S < T or S=T.\r\nASCII gives the ordering among individual characters. It specifies, among other things, that letter capital L  comes alphabetically before capital letter M and similarly for small (lower case) letters.\r\nOn IBM mainframe computers, the EBCDIC specification of characters may be used instead of ASCII.\r\n",
      "mdown_content": "Two strings are considered to be equal (=) if they have the same length and are made up, character by character, of the same characters. If they differ,  they are considered to be unequal (**not=**).\n\nOrdering among strings is essentially alphabetic order. String _S_ is considered to come before string _T_, that is _S_ **<** _T_, if the two are identical up to a certain position and after that position, either the next character of _S_ comes before the next character of _T_, or else there are no more characters in _S_ while _T_ contains more characters.\n\n_S_ > _T_ (_S_ comes after _T_ ) means the same thing as _T_ < _S_. _S_ >= _T_ means the same thing as _S_ > _T_ **or** _S_ = _T_. _S_ <= _T_ means the same thing as _S_ < _T_ **or** _S_=_T_.\n\nASCII gives the ordering among individual characters. It specifies, among other things, that letter capital _L_  comes alphabetically before capital letter _M_ and similarly for small (lower case) letters.\n\nOn IBM mainframe computers, the EBCDIC specification of characters may be used instead of ASCII.\n"
    }
  ],
  "dependencies": [

  ]
}
