{
  "title": "buttonwait",
  "fileName": "buttonwait",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>buttonwait</b> (<i>motion</i> : <b>string</b>, <br></font><table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>var</b> <i>x</i>, <i>y</i>, <i>buttonnumber</i>, <i>buttonupdown</i> : <b>int</b>)</font></td>\n</tr></table>\n<p></p>",
      "text_content": " buttonwait (motion : string, Â var x, y, buttonnumber, buttonupdown : int)",
      "mdown_content": "**buttonwait** (_motion_ : **string**, \n**var** _x_, _y_, _buttonnumber_, _buttonupdown_ : **int**)\n\n"
    },
    {
      "title": "Description",
      "raw_content": "The <b>buttonwait</b> procedure gets information about a mouse event and removes it from the queue.<p>\r\nThe parameter <i>motion</i> must be one of \"up\", \"down\", \"updown\" or \"downup\". If an event of the type requested is in the queue, <b>buttonwait</b> returns instantly. If there isn't such an event, <b>buttonwait</b> waits until there is one and then returns (much like <b>getch</b> handles keystrokes).</p>\n<p>\r\nIn \"<i>single-button mode</i>\" (where the mouse is treated like a one-button mouse), a \"down\" event occurs whenever all the buttons are up and a button is pressed. An \"up\" event takes place when the last button is released so that no buttons remain pressed.</p>\n<p>\r\nIn \"<i>multi-button mode</i>\", a \"down\" event occurs whenever any button is pressed, and an \"up\" event occurs whenever any button is released.</p>\n<p>\r\nThe parameters <i>x</i> and <i>y</i> are set to the position of the mouse cursor when the button was pressed. The parameter <i>buttonnumber</i> is set to 1 when in \"<i>single-button mode</i>\". In  \"<i>multi-button mode</i>\", it is set to 1 if the left button was pressed, 2 if the middle button was pressed, and 3 if the right button was pressed. The parameter <i>buttonupdown</i> is set to 1, if a button was pressed and 0 if a button was released. </p>\n<p>\r\n</p>",
      "text_content": " The buttonwait procedure gets information about a mouse event and removes it from the queue.\r\nThe parameter motion must be one of \"up\", \"down\", \"updown\" or \"downup\". If an event of the type requested is in the queue, buttonwait returns instantly. If there isn't such an event, buttonwait waits until there is one and then returns (much like getch handles keystrokes).\r\nIn \"single-button mode\" (where the mouse is treated like a one-button mouse), a \"down\" event occurs whenever all the buttons are up and a button is pressed. An \"up\" event takes place when the last button is released so that no buttons remain pressed.\r\nIn \"multi-button mode\", a \"down\" event occurs whenever any button is pressed, and an \"up\" event occurs whenever any button is released.\r\nThe parameters x and y are set to the position of the mouse cursor when the button was pressed. The parameter buttonnumber is set to 1 when in \"single-button mode\". In  \"multi-button mode\", it is set to 1 if the left button was pressed, 2 if the middle button was pressed, and 3 if the right button was pressed. The parameter buttonupdown is set to 1, if a button was pressed and 0 if a button was released. \r\n",
      "mdown_content": "The **buttonwait** procedure gets information about a mouse event and removes it from the queue.\n\nThe parameter _motion_ must be one of \"up\", \"down\", \"updown\" or \"downup\". If an event of the type requested is in the queue, **buttonwait** returns instantly. If there isn't such an event, **buttonwait** waits until there is one and then returns (much like **getch** handles keystrokes).\n\nIn \"_single-button mode_\" (where the mouse is treated like a one-button mouse), a \"down\" event occurs whenever all the buttons are up and a button is pressed. An \"up\" event takes place when the last button is released so that no buttons remain pressed.\n\nIn \"_multi-button mode_\", a \"down\" event occurs whenever any button is pressed, and an \"up\" event occurs whenever any button is released.\n\nThe parameters _x_ and _y_ are set to the position of the mouse cursor when the button was pressed. The parameter _buttonnumber_ is set to 1 when in \"_single-button mode_\". In  \"_multi-button mode_\", it is set to 1 if the left button was pressed, 2 if the middle button was pressed, and 3 if the right button was pressed. The parameter _buttonupdown_ is set to 1, if a button was pressed and 0 if a button was released. \n"
    },
    {
      "title": "Example",
      "code": [
        "        var x, y, buttonnumber, buttonupdown, buttons : int\r\n        var nx, ny : int\r\n        loop\r\n            buttonwait (\"down\", x, y, buttonnumber, buttonupdown)\r\n            nx := x\r\n            ny := y\r\n            loop\r\n                drawline (x, y, nx, ny, 0)  % Erase previous line\r\n                exit when buttonmoved (\"up\")\r\n                mousewhere (nx, ny, buttons)\r\n                drawline (x, y, nx, ny, 1)  % Draw line to position\r\n            end loop\r\n            buttonwait (\"up\", nx, ny, buttonnumber, buttonupdown)\r\n            drawline (x, y, nx, ny, 2)  % Draw line to final position\r\n        end loop"
      ],
      "raw_content": "This program draws lines. It starts a line where the user presses down and continues to update the line while the mouse button is held down. When the button is released, the line is permanently draw and the user can draw another line.<p>\r\n</p>",
      "text_content": " This program draws lines. It starts a line where the user presses down and continues to update the line while the mouse button is held down. When the button is released, the line is permanently draw and the user can draw another line.\r\n\r\n",
      "mdown_content": "This program draws lines. It starts a line where the user presses down and continues to update the line while the mouse button is held down. When the button is released, the line is permanently draw and the user can draw another line.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "buttonwait Example",
          "file": "buttonwait.t"
        }
      ]
    },
    {
      "title": "Example",
      "raw_content": "In the previous example, when the mouse moves, the line is erased by drawing it in white. This erases anything that\r\nthe line was drawn on top of, including previous lines. A more complete example involving the clicking and dragging \r\nof filled rectangles using the mouse is available. In this example, the background is fully restored when the \r\nrectangle is moved by using \"xor\".<p>\r\n<object id=\"launch\" type=\"application/x-oleobject\" classid=\"clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11\" width=\"120\" height=\"40\">\r\n  <param name=\"Command\" value=\"TCard\">\n<param name=\"Button\" value=\"Text: Launch Mouse Dragging Example\">\n<param name=\"Item1\" value=\"-1,MouseDrag.t;Click and Drag Example\"></object></p>\n<p></p>",
      "text_content": "In the previous example, when the mouse moves, the line is erased by drawing it in white. This erases anything that\r\nthe line was drawn on top of, including previous lines. A more complete example involving the clicking and dragging \r\nof filled rectangles using the mouse is available. In this example, the background is fully restored when the \r\nrectangle is moved by using \"xor\".\r\n\r\n  ",
      "mdown_content": "In the previous example, when the mouse moves, the line is erased by drawing it in white. This erases anything thatthe line was drawn on top of, including previous lines. A more complete example involving the clicking and dragging of filled rectangles using the mouse is available. In this example, the background is fully restored when the rectangle is moved by using \"xor\".\n\n\n"
    },
    {
      "title": "Example",
      "code": [
        "        var ch : string (1)\r\n        var x, y, btnnum, btnupdown : int\r\n        loop\r\n            if hasch then\r\n                getch (ch)\r\n                locate (1, 1)\r\n                put \"The character entered is a: \", ch\r\n            end if\r\n            if buttonmoved (\"down\") then\r\n                buttonwait (\"down\", x, y, btnnum, btnupdown)\r\n                locate (1, 1)\r\n                put \"The button was clicked at position: \", x, \", \",y\r\n            end if\r\n        end loop"
      ],
      "raw_content": "This is an example demonstrating how to check for both character and mouse input at the same time.<p>\r\n</p>",
      "text_content": " This is an example demonstrating how to check for both character and mouse input at the same time.\r\n\r\n",
      "mdown_content": "This is an example demonstrating how to check for both character and mouse input at the same time.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Keyboard and Mouse Example",
          "file": "KeyboardAndMouse.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "<b>buttonwait </b>can be thought of as the mouse equivalent of <b>getch</b> in that they both read something in a queue and both wait until they get the thing they're looking for.<p>\r\n</p>",
      "text_content": " buttonwait can be thought of as the mouse equivalent of getch in that they both read something in a queue and both wait until they get the thing they're looking for.\r\n",
      "mdown_content": "**buttonwait** can be thought of as the mouse equivalent of **getch** in that they both read something in a queue and both wait until they get the thing they're looking for.\n"
    },
    {
      "title": "See also",
      "links": [
        "",
        "buttonchoose",
        "mousemodule"
      ],
      "raw_content": "<b><a href=\"\">buttonwait</a></b> to see if an appropriate event is in the queue. See also <b><a href=\"buttonchoose.html\">buttonchoose</a></b> to switch between \"<i>single-button mode</i>\" and \"<i>multi-button mode</i>\".<p>\r\nSee also predefined unit <b><a href=\"mousemodule.html\">Mouse</a></b>.</p>\n<p>\r\n</p>",
      "text_content": " buttonwait to see if an appropriate event is in the queue. See also buttonchoose to switch between \"single-button mode\" and \"multi-button mode\".\r\nSee also predefined unit Mouse.\r\n",
      "mdown_content": "**[](buttonwait)** to see if an appropriate event is in the queue. See also **[buttonchoose.html](buttonchoose)** to switch between \"_single-button mode_\" and \"_multi-button mode_\".\n\nSee also predefined unit **[mousemodule.html](Mouse)**.\n"
    }
  ],
  "dependencies": [

  ]
}
