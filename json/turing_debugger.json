{
  "title": "Turing Debugger Guide",
  "fileName": "turing_debugger",
  "sections": [

  ],
  "dependencies": [

  ],
  "htmlcontent": "\r\n<h1>Turing Debugger Guide</h1>\r\n<h2>Introduction</h2>\r\nTuring supports a number of tools to enable users to debug their programs and\r\nexamine program execution.  Some of the available tools are:\r\n<ul>\n<li>\n<a href=\"\">Stepping execution</a> a line at a time.\r\n  </li>\n<li>\n<a href=\"\">Tracing execution</a> with a set pause between \r\n      lines of execution\r\n  </li>\n<li>\n<a href=\"\">Setting breakpoints</a> to pause execution at \r\n      specified points in the program.\r\n  </li>\n<li>\n<a href=\"\">Viewing all open resources</a> of a program including files, fonts,\r\n      pictures, etc.\r\n</li>\n</ul>\r\nAs of May 2002, the Turing 4.1 software does not contain the following feature:\r\n<ul><li>View variables.\r\n</li></ul>\r\nThis feature will be implemented as time and developer resources permit.\r\n\r\n<h2>Displaying The Debugger Menu</h2>\r\nIn order to use any of the debugger commands, you need to have the Debugger\r\nmenu showing in the Editor window.  By default, the Debugger menu is hidden\r\nin order to simplify the Turing environment for the majority of students not\r\nusing the debugger.\r\n<p>\r\nThere are two ways that the Debugger menu can be displayed.  You can select\r\nthe <b>Show Debugger Menu</b> command in the <b>Run</b> menu.\r\n</p>\n<p> \r\n</p>\n<center>\r\n  <img src=\"turing_debugger01.gif\"><br><b><b>Show Debugger Menu</b> command in the <b>Run</b> menu</b>\r\n</center>\r\n<p> \r\nIf you are consistenly using the debugger, then you should change the \r\nPreferences so that the Debugger menu is always displayed.  This can\r\nbe done by bringing up the <b>Editor Window</b> pane of the <b>Preferences</b>\r\ndialog box and setting the <b>Always Show 'Debugger' Menu</b> check box.\r\n</p>\n<p> \r\n</p>\n<center>\r\n  <img src=\"turing_admin10.gif\"><br><b>Always Show 'Debugger' Menu in the Editor Window Pane</b>\r\n</center>\r\n<p> \r\n\r\n</p>\n<h2>Using The Debugger Menu</h2>\r\n<p> \r\n</p>\n<center>\r\n  <img src=\"turing_debugger02.gif\"><br><b><b>Show Debugger Menu</b> command in the <b>Run</b> menu</b>\r\n</center>\r\n<p> \r\nThe Debugger menu gives you access to all the debugging features in Turing 4.0.\r\nThe following menu options are available:\r\n</p>\n<ul>\n<li>\n<b>Show Debugger Controls</b><br>\r\n      This command causes each Editor window to display a second row of \r\n      controls at the top of the window (called the Debugger controls) \r\n      that allow the user to step through a program and trace execution \r\n      of the program.  When the Debugger controls are visible, then this\r\n      menu item changes to <b>Hide Debugger Controls</b>.\r\n      <p> \r\n      </p>\n<center>\r\n        <img src=\"turing_debugger03.gif\"><br><b>Window with Debugger Controls Visible</b>\r\n      </center>\r\n      <p> \r\n  </p>\n</li>\n<li>\n<b>Show Breakpoints</b>\r\n      This command causes each Editor window to dislay an area on the left\r\n      where breakpoints can be placed.  A breakpoint is a marker that causes\r\n      the program to pause when execution reaches the marked line.\r\n      <p> \r\n      </p>\n<center>\r\n        <img src=\"turing_debugger04.gif\"><br><b>Window with Breakpoint Visible</b>\r\n      </center>\r\n      <p> \r\n  </p>\n</li>\n<li>\n<b>Clear Breakpoints</b>\r\n      This command quickly eliminates all breakpoints that have been set in \r\n      any Editor window.       \r\n  </li>\n<li>\n<b>Show Allocated Objects</b>\r\n      This command shows all the files, fonts, pictures, etc that have been\r\n      opened or created by the program but have not been closed. As the program\r\n      executes, this window updates every time a resource is allocated or freed.\r\n      <p> \r\n      </p>\n<center>\r\n        <img src=\"turing_debugger05.gif\"><br><b>Allocated Objects Window</b>\r\n      </center>\r\n</li>\n</ul>\n<h2>Turing Execution</h2>\r\nThe rest of this document will use some terms that must be understood properly.\r\n<ul>\n<li>\n<b>Running</b> - A Turing program is running when statements are being\r\n      continuously executed without human intervention.  However, running\r\n      may be stalled while the program is waiting for keyboard input, executing\r\n      a delay statement, etc.\r\n  </li>\n<li>\n<b>Paused</b> - A Turing program is paused when execution is \r\n      temporarily halted.  No input is accepted by the program while\r\n      it is paused.  A program can become paused in a variety of ways including:\r\n      <ul>\n<li>The user pressing the <b>Pause</b> button.\r\n        </li>\n<li>The user pressing a <b>Step</b>, <b>Step Over</b> or \r\n            <b>Step Return</b> button.\r\n        </li>\n<li>Execution reaching a breakpoint.\r\n        </li>\n<li>Execution reaching the <b>break</b> statement in a program.\r\n      </li>\n</ul>\r\n      When a Turing program is paused, the line in the source code on which \r\n      the Turing program was about to execute is highlighted.<br>\r\n      In each case, the program can resume running by clicking the \r\n      <b>Resume</b> button.  The program can also temporarily resume running\r\n      by the user pressing the <b>Step</b>, <b>Step Over</b> or \r\n      <b>Step Return</b> button.  Once the statement or statements are finished\r\n      running, the program is paused again.\r\n  </li>\n<li>\n<b>Executing</b> - A program is executing when it is either <b>Running</b>\r\n      or <b>Paused</b>.\r\n  </li>\n<li>\n<b>Halted</b> - A Turing program is halted when it can no longer \r\n      executing.  It cannot be resumed and must be started from the beginning\r\n      in order to run it again.  A program can be halted by:\r\n      <ul>\n<li>The user pressing the <b>Stop</b> button.\r\n        </li>\n<li>A run-time error.\r\n        </li>\n<li>The user closing a Run window.\r\n      </li>\n</ul>\n</li>\n</ul>\n<h2>\n<a name=\"step\"></a>Stepping a Program</h2>\r\nStepping a program consists of executing a Turing program a line at a time.\r\nAfter each step command, execution pauses, highlighting the next line to be \r\nexecuted.  To step a program, the program must not be running.  The Debugger\r\ncontrols in the Editor window must be visible.  To step the program, the \r\nuser clicks one of the three buttons in the Debugger Controls:\r\n<ul>\n<li>\n<b>Step</b> - If the program is halted, this executes the very first\r\n      line of code and then pauses.  If the program is paused, it executes\r\n      the highlighted line of code and then pauses.  If it line of code to\r\n      be executed is a subprogram call, then it enters the subprogram and \r\n      pauses at the first line of code in the subprogram.  If it is at the\r\n      end of the subprogram, then it leaves the subprogram and pauses at\r\n      the subprogram call.  This command is sometimes called <b>Step Into</b>.\r\n  </li>\n<li>\n<b>Step Over</b> - This executes a single line of code.  However, if\r\n      the program is paused at a subprogram call, then the entire subprogram\r\n      is executed and execution is paused at the next line after the subprogram\r\n      call.\r\n  </li>\n<li>\n<b>Step Return</b> - This resumes execution until the execution returns\r\n      from a subprogram. The next line after the subprogram call.  Note that\r\n      if this command is given in the main program, then execution will continue\r\n      until the program terminates.\r\n</li>\n</ul>\n<h2>\n<a name=\"trace\"></a>Tracing a Program</h2>\r\nTracing a program is simply executing a program slowly with each line of code\r\nin the program being highlighted as it is executed.  Tracing allows users\r\nto see how control constructs operate.  Unlike stepping, with tracing, execution\r\ncontinues until it is paused or halted in some other fashion.\r\n<p>\r\nTo start a program tracing, the Debugger Controls must be visible.  The user\r\nthen clicks the <b>Trace Execution</b> check box.  When the program is next \r\nrunning, each time a statement is executed, the line in the source code will be\r\nhighlighted.  The speed at which the tracing occurs is controlled by the \r\n<b>Trace Speed</b> slider found in the Debugger Controls.  When the slider is\r\non the left, there is essentially no delay between execution of statements.  \r\n(Note that execution will still be much slower than not tracing due to the time\r\ntaken to highlight each executing statement.)  When the slider is on the right,\r\neach statement will wait for about 5 seconds after executing before the next\r\nstatement is executed.\r\n\r\n</p>\n<h2>\n<a name=\"bp\"></a>Setting Breakpoints</h2>\r\nOften only a particular section of code is of interest to the user. Breakpoints \r\nprovide a mechanism for pausing a program only when execution reaches a \r\nspecified statement.  To set breakpoints, they need to be displayed in the \r\nEditor window.  This is done with the <b>Show Breakpoints</b> command in the \r\n<b>Debugger</b> menu.  Once breakpoints are visible, they can be set (and \r\nremoved) by simply clicking the mouse in the breakpoint area.  When the mouse\r\nis over the breakpoint area, it turns into a diamond.  When the breakpoint is\r\nset, a red diamond appears in the breakpoint area.  To remove the breakpoint,\r\nsimply click the red diamond and the breakpoint disappears.\r\n<p> \r\n</p>\n<center>\r\n  <img src=\"turing_debugger04.gif\"><br><b>Window with Two Breakpoints Set</b>\r\n</center>\r\n<p>\r\nWhen execution reaches a line with a breakpoint on it, the program pauses\r\nand the line is highlighted.  The program can then be resumed or stepped as\r\ndesired.  Note that it is possible to set a breakpoint on a line that is not\r\nexecuted.  If you place a breakpoint on a blank line, it is quite likely that\r\nexecution will not stop.  Likewise, in lines broken over multiple lines, it\r\nis best to put the breakpoint on the last line in the statement.\r\n</p>\n<p>\r\nTo clear all the breakpoints, select <b>Clear Breakpoints</b> from the \r\n<b>Debugger</b> menu.\r\n\r\n</p>\n<h2>\n<a name=\"alloc\"></a>Viewing Open Files/Pictures/Fonts, etc.</h2>\r\nA common error in Turing programs is to neglect to close open files (using \r\nthe <b>Close</b> statement) or free pictures or fonts (using the <b>Pic.Free</b>\r\nor <b>Font.Free</b> procedures).  The <b>Allocated Objects</b> window displays\r\nall allocated resources until they are freed. This window is displayed by\r\nselecting the <b>Show Allocated Objects</b> command from the <b>Debugger</b>\r\nmenu. The command can be given even after a program has halted.  It is a\r\nuseful command to use when am <b>open</b>, Pic.New or Font.New has failed\r\nbecause of too many open files, pictures or fonts.\r\n<p>\r\nThe window will also display just how much memory each picture takes up.\r\n</p>\n<p> \r\n</p>\n<center>\r\n  <img src=\"turing_debugger05.gif\"><br><b>Allocated Objects Window</b>\r\n</center>\r\n<p>\r\nClicking on the line containing the allocated object will highlight the line in\r\nthe code where the object was allocated.  The headings on each of the columns\r\ncan be clicked allowing the objects to be sorted either by their ID, or by\r\nwhere in the program they were allocated.\r\n</p>\n<p>\r\n\r\n\r\n</p>\n"
}
