{
  "title": "Stream.eof",
  "fileName": "stream_eof",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>eof</b> ( <i>streamNumber</i> <b>: int</b> ) : <b>boolean</b><p>\r\n</p></font>",
      "text_content": " eof ( streamNumber : int ) : boolean\r\n",
      "mdown_content": "**eof** ( _streamNumber_ **: int** ) : **boolean**"
    },
    {
      "title": "Description",
      "raw_content": "The <b>eof </b>(end of file) function is used to determine if there is any more input. It returns <b>true </b>when there are no more characters to be read. The parameter and its parentheses are omitted when referring to the standard input (usually this is the keyboard); otherwise the parameter specifies the number of a stream. The stream number has been determined (in most cases) by an <b>open </b>statement.<p>\r\n</p>",
      "text_content": " The eof (end of file) function is used to determine if there is any more input. It returns true when there are no more characters to be read. The parameter and its parentheses are omitted when referring to the standard input (usually this is the keyboard); otherwise the parameter specifies the number of a stream. The stream number has been determined (in most cases) by an open statement.\r\n",
      "mdown_content": "The **eof **(end of file) function is used to determine if there is any more input. It returns **true **when there are no more characters to be read. The parameter and its parentheses are omitted when referring to the standard input (usually this is the keyboard); otherwise the parameter specifies the number of a stream. The stream number has been determined (in most cases) by an **open **statement."
    },
    {
      "title": "Example",
      "code": [
        "        var line : string\r\n        var fileNumber : int\r\n        open : fileNumber, \"info\", get\r\n        loop\r\n            exit when eof (fileNumber)\r\n            get : fileNumber, line : *\r\n            put line\r\n        end loop"
      ],
      "raw_content": "This program reads and outputs all the lines in the file called \"info\".<p>\r\n</p>",
      "text_content": " This program reads and outputs all the lines in the file called \"info\".\r\n\r\n",
      "mdown_content": "This program reads and outputs all the lines in the file called \"info\"."
    },
    {
      "title": "Details",
      "raw_content": "See also the description of the <b>get </b>statement, which gives more examples of the use of <b>eof</b>. See also the <b>open </b>and <b>read </b>statements.<p>\r\nWhen the input is from the keyboard, the user can signal end-of-file by typing control-Z on a PC (or control-D on UNIX). If a program tests for <b>eof </b>on the keyboard, and the user has not typed control-Z (or control-D) and the user has typed no characters beyond those that have been read, the program must wait until the next character is typed. Once this character is typed, the program knows whether it is at the end of the input, and returns the corresponding <b>true </b>or <b>false </b>value for <b>eof</b>.</p>\n<p>\r\n</p>",
      "text_content": " See also the description of the get statement, which gives more examples of the use of eof. See also the open and read statements.\r\nWhen the input is from the keyboard, the user can signal end-of-file by typing control-Z on a PC (or control-D on UNIX). If a program tests for eof on the keyboard, and the user has not typed control-Z (or control-D) and the user has typed no characters beyond those that have been read, the program must wait until the next character is typed. Once this character is typed, the program knows whether it is at the end of the input, and returns the corresponding true or false value for eof.\r\n",
      "mdown_content": "See also the description of the **get **statement, which gives more examples of the use of **eof**. See also the **open **and **read **statements.\nWhen the input is from the keyboard, the user can signal end-of-file by typing control-Z on a PC (or control-D on UNIX). If a program tests for **eof **on the keyboard, and the user has not typed control-Z (or control-D) and the user has typed no characters beyond those that have been read, the program must wait until the next character is typed. Once this character is typed, the program knows whether it is at the end of the input, and returns the corresponding **true **or **false **value for **eof**."
    },
    {
      "title": "Status",
      "raw_content": "Part of the language and only conceptually part of the <b>Stream</b> unit. <p>\r\nThis means that you can only call the function by calling <b>eof</b>, not by calling <b>Stream.eof</b>.</p>\n<p>\r\n</p>",
      "text_content": " Part of the language and only conceptually part of the Stream unit. \r\nThis means that you can only call the function by calling eof, not by calling Stream.eof.\r\n",
      "mdown_content": "Part of the language and only conceptually part of the **Stream** unit. \nThis means that you can only call the function by calling **eof**, not by calling **Stream.eof**."
    }
  ],
  "dependencies": [

  ]
}
