{
  "title": "quit",
  "fileName": "quit",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>quitStatement</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>quit</b> [ <i>guiltyParty</i> ] [ : <i>quitReason</i> ]</font></td>\n</tr></table>\n<p></p>",
      "text_content": " A quitStatement is:\r\n quit [ guiltyParty ] [ : quitReason ]",
      "mdown_content": "A _quitStatement_ is:   **quit** [ _guiltyParty_ ] [ : _quitReason_ ]"
    },
    {
      "title": "Description",
      "raw_content": "The <b>quit</b> statement causes a program (or concurrent process) to fail. The failure (called an <i>exception</i>) either aborts the program (or process) or causes control to be passed to an exception handler.<p>\r\n</p>",
      "text_content": " The quit statement causes a program (or concurrent process) to fail. The failure (called an exception) either aborts the program (or process) or causes control to be passed to an exception handler.\r\n",
      "mdown_content": "The **quit** statement causes a program (or concurrent process) to fail. The failure (called an _exception_) either aborts the program (or process) or causes control to be passed to an exception handler.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var line : array 1 .. 50 of string\r\n        \r\n        procedure inputLines\r\n            var i : int := 0\r\n            loop\r\n                if eof then\r\n                    put \"Missing 'stop' in input\"\r\n                    quit        % Halt entire program\r\n                end if\r\n                i := i + 1\r\n                get line ( i )\r\n                exit when line ( i ) = \"stop\"\r\n            end loop\r\n        end inputLines\r\n        \r\n        inputLines"
      ],
      "raw_content": "In the <i>inputLines</i> procedure, halt the program if end of file is encountered before the string \"stop\" is read. Note that a <b>return</b> statement in the procedure would terminate the procedure but not the entire program.<p>\r\n</p>",
      "text_content": " In the inputLines procedure, halt the program if end of file is encountered before the string \"stop\" is read. Note that a return statement in the procedure would terminate the procedure but not the entire program.\r\n\r\n",
      "mdown_content": "In the _inputLines_ procedure, halt the program if end of file is encountered before the string \"stop\" is read. Note that a **return** statement in the procedure would terminate the procedure but not the entire program.\n"
    },
    {
      "title": "Details",
      "raw_content": "In the simple case, the optional <i>guiltyParty</i> and <i>quitReason</i> are omitted. The <i>guiltyParty </i>option is used to specify the position of failure. See <i>exceptionHandler</i> for an example of a <b>quit</b> statement used in conjunction with a handler. A handler, which is located at the beginning of a subprogram body, is given control when a <b>quit</b> is executed or a failure, such as division by zero, occurs in the subprogram.<p>\r\nThe <i>guiltyParty</i> option is used to designate the location of the failure, for example, to tell the debugger what line is considered to be the location of the failure. A <i>guiltyParty</i> is one of:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(a)</td>\n<td width=\"10\">&nbsp;</td>\n<td>&lt;</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(b)</td>\n<td width=\"10\">&nbsp;</td>\n<td>&gt;</td>\n</tr>\n</table>\n<p>\r\nIf <i>guiltyParty</i> is omitted, the failure is considered to occur at the <b>quit</b> statement. If it is &lt;, the failure is considered to occur at the call to the present subprogram. For example, if the present subprogram implements square root <i>sqrt</i> and is passed a negative argument, it can use &lt; to specify that the caller provided a faulty argument. If <i>guiltyParty</i> is &gt;, this means the failure has already occurred and is being passed on to the next handler or to the system. To summarize, the three possibilities for designating the location of the failure are:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(a)</td>\n<td width=\"10\">&nbsp;</td>\n<td>&lt;</td>\n<td width=\"10\">&nbsp;</td>\n<td>Caller is cause of failure</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(b)</td>\n<td width=\"10\">&nbsp;</td>\n<td>&gt;</td>\n<td width=\"10\">&nbsp;</td>\n<td>The exception being handled is the cause.</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(c)</td>\n<td width=\"10\">&nbsp;</td>\n<td>(omitted <i>guiltyParty</i>)  The present <b>quit</b> is the cause.</td>\n</tr>\n</table>\n<p>\r\nThe <i>quitReason</i> is an integer expression which is used to identify the kind of failure. If it is omitted, a default value is chosen in the following manner. If <i>guiltyParty</i> is omitted or is &lt;, the default is 1. If <i>guiltyParty</i> is &gt; and an exception handler is active, the default is the <i>quitReason</i> of the exception being handled. If no exception is being handled, the default is 1. In the case of program abortion, the implementation may pass the <i>quitReason</i> to the operating system or programming environment.</p>\n<p>\r\n</p>",
      "text_content": " In the simple case, the optional guiltyParty and quitReason are omitted. The guiltyParty option is used to specify the position of failure. See exceptionHandler for an example of a quit statement used in conjunction with a handler. A handler, which is located at the beginning of a subprogram body, is given control when a quit is executed or a failure, such as division by zero, occurs in the subprogram.\r\nThe guiltyParty option is used to designate the location of the failure, for example, to tell the debugger what line is considered to be the location of the failure. A guiltyParty is one of:\r\n (a) < (b) >\r\nIf guiltyParty is omitted, the failure is considered to occur at the quit statement. If it is <, the failure is considered to occur at the call to the present subprogram. For example, if the present subprogram implements square root sqrt and is passed a negative argument, it can use < to specify that the caller provided a faulty argument. If guiltyParty is >, this means the failure has already occurred and is being passed on to the next handler or to the system. To summarize, the three possibilities for designating the location of the failure are:\r\n (a) < Caller is cause of failure (b) > The exception being handled is the cause. (c) (omitted guiltyParty)  The present quit is the cause.\r\nThe quitReason is an integer expression which is used to identify the kind of failure. If it is omitted, a default value is chosen in the following manner. If guiltyParty is omitted or is <, the default is 1. If guiltyParty is > and an exception handler is active, the default is the quitReason of the exception being handled. If no exception is being handled, the default is 1. In the case of program abortion, the implementation may pass the quitReason to the operating system or programming environment.\r\n",
      "mdown_content": "In the simple case, the optional _guiltyParty_ and _quitReason_ are omitted. The _guiltyParty_ option is used to specify the position of failure. See _exceptionHandler_ for an example of a **quit** statement used in conjunction with a handler. A handler, which is located at the beginning of a subprogram body, is given control when a **quit** is executed or a failure, such as division by zero, occurs in the subprogram.\n\nThe _guiltyParty_ option is used to designate the location of the failure, for example, to tell the debugger what line is considered to be the location of the failure. A _guiltyParty_ is one of:\n\n\n(a)   <  \n(b)   >  \n\n\nIf _guiltyParty_ is omitted, the failure is considered to occur at the **quit** statement. If it is <, the failure is considered to occur at the call to the present subprogram. For example, if the present subprogram implements square root _sqrt_ and is passed a negative argument, it can use < to specify that the caller provided a faulty argument. If _guiltyParty_ is >, this means the failure has already occurred and is being passed on to the next handler or to the system. To summarize, the three possibilities for designating the location of the failure are:\n\n\n(a)   <   Caller is cause of failure  \n(b)   >   The exception being handled is the cause.  \n(c)   (omitted _guiltyParty_)  The present **quit** is the cause.  \n\n\nThe _quitReason_ is an integer expression which is used to identify the kind of failure. If it is omitted, a default value is chosen in the following manner. If _guiltyParty_ is omitted or is <, the default is 1. If _guiltyParty_ is > and an exception handler is active, the default is the _quitReason_ of the exception being handled. If no exception is being handled, the default is 1. In the case of program abortion, the implementation may pass the _quitReason_ to the operating system or programming environment.\n"
    },
    {
      "title": "See also",
      "links": [
        "return",
        "result"
      ],
      "raw_content": "<i>exceptionHandler</i>, <b><a href=\"return.html\">return</a></b> and <b><a href=\"result.html\">result</a></b>.<p>\r\n</p>",
      "text_content": " exceptionHandler, return and result.\r\n",
      "mdown_content": "_exceptionHandler_, **[return](return.html)** and **[result](result.html)**.\n"
    }
  ],
  "dependencies": [

  ]
}
