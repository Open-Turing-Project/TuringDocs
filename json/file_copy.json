{
  "title": "File.Copy",
  "fileName": "file_copy",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>File.Copy</b> (<i>srcPathName</i>, <i>destPathName</i> : <b>string</b>)<p></p></font>",
      "text_content": "File.Copy (srcPathName, destPathName : string)\r\n    ",
      "mdown_content": "**File.Copy** (_srcPathName_, _destPathName_ : **string**)"
    },
    {
      "title": "Description",
      "raw_content": "<b>File.Copy</b> copies a file named by the <i>srcPathName</i> parameter to the file named by the <i>destPathName</i> parameter. The copy can be between different disks or file systems.<p>\r\n    </p>",
      "text_content": "File.Copy copies a file named by the srcPathName parameter to the file named by the destPathName parameter. The copy can be between different disks or file systems.\r\n    ",
      "mdown_content": "**File.Copy** copies a file named by the _srcPathName_ parameter to the file named by the _destPathName_ parameter. The copy can be between different disks or file systems.\n"
    },
    {
      "title": "Details",
      "raw_content": "The source file name must be an actual file. This procedure will not \r\n          copy directories. <p>\r\n          If the <b>File.Copy </b>call fails, then <b>Error.Last</b> will \r\n          return a non-zero value indicating the reason for the failure. \r\n          <b>Error.LastMsg</b> will return a string which contains the textual \r\n          version of the error.</p>\n<p>\r\n          Note that you can use either forward or backward slashes to separate\r\n          components in a path. If you use backward slashes, you must double\r\n          them in a string literal.  (i.e.  \"d:\\\\west\\\\example.t\")</p>\n<p>\r\n    </p>",
      "text_content": "The source file name must be an actual file. This procedure will not \r\n          copy directories. \r\n          If the File.Copy call fails, then Error.Last will \r\n          return a non-zero value indicating the reason for the failure. \r\n          Error.LastMsg will return a string which contains the textual \r\n          version of the error.\r\n          Note that you can use either forward or backward slashes to separate\r\n          components in a path. If you use backward slashes, you must double\r\n          them in a string literal.  (i.e.  \"d:\\\\west\\\\example.t\")\r\n    ",
      "mdown_content": "The source file name must be an actual file. This procedure will not copy directories. \n\nIf the **File.Copy** call fails, then **Error.Last** will return a non-zero value indicating the reason for the failure. **Error.LastMsg** will return a string which contains the textual version of the error.\n\nNote that you can use either forward or backward slashes to separatecomponents in a path. If you use backward slashes, you must doublethem in a string literal.  (i.e.  \"d:\\\\west\\\\example.t\")\n"
    },
    {
      "title": "Example",
      "code": [
        "        File.Copy (\"d:/west/example.dat\", \"new_example.t\")\r\n        if Error.Last = eNoError then\r\n            put \"File copied\"\r\n        else\r\n            put \"Did not copy the file.\"\r\n            put \"Error: \", Error.LastMsg\r\n        end if"
      ],
      "raw_content": "This program copies the file \"<i>d:\\west\\example.dat</i>\" to \r\n          \"<i>new_example.t</i>\". in the current directory.<p>\r\n</p>\n<p>\r\n    </p>",
      "text_content": "This program copies the file \"d:\\west\\example.dat\" to \r\n          \"new_example.t\". in the current directory.\r\n\r\n    ",
      "mdown_content": "This program copies the file \"_d:\\west\\example.dat_\" to \"_new_example.t_\". in the current directory.\n\n\n"
    },
    {
      "title": "Execute",
      "raw_content": "An example program is available that copies a file to the current \r\n          directory using <b>File.Copy</b>, displays its contents to the run \r\n          window, and then deletes the file using <b>File.Delete</b>.<p>\r\n          <object id=\"launch\" type=\"application/x-oleobject\" classid=\"clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11\" width=\"120\" height=\"40\">\r\n            <param name=\"Command\" value=\"TCard\">\n<param name=\"Button\" value=\"Text: Launch Example Program\">\n<param name=\"Item1\" value=\"-1,File.Copy.t;File.Copy Example\"></object></p>\n<p></p>",
      "text_content": "An example program is available that copies a file to the current \r\n          directory using File.Copy, displays its contents to the run \r\n          window, and then deletes the file using File.Delete.\r\n          \r\n            ",
      "mdown_content": "An example program is available that copies a file to the current directory using **File.Copy**, displays its contents to the run window, and then deletes the file using **File.Delete**.\n\n\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n          This means that you can only call the function by calling \r\n          <b>File.Copy</b>, not by calling <b>Copy</b>.</p>\n<p>\r\n    </p>",
      "text_content": "Exported qualified.\r\n          This means that you can only call the function by calling \r\n          File.Copy, not by calling Copy.\r\n    ",
      "mdown_content": "Exported qualified.\n\nThis means that you can only call the function by calling **File.Copy**, not by calling **Copy**.\n"
    }
  ],
  "dependencies": [

  ]
}
