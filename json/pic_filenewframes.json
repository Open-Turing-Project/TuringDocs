{
  "title": "Pic.FileNewFrames",
  "fileName": "pic_filenewframes",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Pic.FileNewFrames</b> (<i>pathName</i> : <b>string</b>, <b>var</b> <i>picIDs</i> : <b>array</b> 1 .. * <b>of int</b>, <b>var</b> <i>delayTime</i> : <b>int</b>)<p></p></font>",
      "text_content": "Pic.FileNewFrames (pathName : string, var picIDs : array 1 .. * of int, var delayTime : int)\r\n    ",
      "mdown_content": "**Pic.FileNewFrames** (_pathName_ : **string**, **var** _picIDs_ : **array** 1 .. * **of int**, **var** _delayTime_ : **int**)\n"
    },
    {
      "title": "Description",
      "raw_content": "<b>Pic.FileNewFrames</b> loads multiple pictures stored in a single\r\n          multiframe GIF image file into an array of integers.",
      "text_content": "Pic.FileNewFrames loads multiple pictures stored in a single\r\n          multiframe GIF image file into an array of integers.\r\n    ",
      "mdown_content": "**Pic.FileNewFrames** loads multiple pictures stored in a singlemultiframe GIF image file into an array of integers."
    },
    {
      "title": "Details",
      "links": [
        "pic_frames"
      ],
      "raw_content": "GIF files can contain multiple frames (pictures).  Animated GIFs \r\n          function by displaying each frame in the GIF one after another \r\n          with a delay between them.  This delay can also be specified in \r\n          the GIF file.\r\n          <p>\r\n          <b>Pic.FileNewFrames</b> reads the series of frames from the \r\n          multiframe GIF file, and turns each frame into a picture.  The\r\n          picture is then assigned to an element in the <i>picIDs</i> array.\r\n          If the array is not large enough, then an error occurs and no\r\n          pictures are loaded.\r\n          </p>\n<p>\r\n          <b>Pic.FileNewFrames</b> also reads the delay specified in the GIF \r\n          file and sets <i>delayTime</i> to the delay in milliseconds.  Note \r\n          that many multiple frame GIF files do not specify a delay, in which \r\n          case <i>delayTime</i> will be set to 0.\r\n          </p>\n<p>\r\n          In order to determine the number of frames in multiple frame GIF\r\n          file, you must use the <b><a href=\"pic_frames.html\">Pic.Frames</a></b>\r\n          function.  This returns a number that can be used to declare the\r\n          array that will be passed to <b>Pic.FileNewFrames</b>.\r\n          </p>\n<p>\r\n          <tt><b>var</b> <i>numFrames</i> = <b>Pic.Frames</b> (\"mypic.gif\")<br><b>var</b> <i>pics</i> : <b>array</b> 1 .. <i>numFrames</i> <b>of int</b><br><b>var</b> <i>delayTime</i> : <b>int</b><br><b>Pic.FileNewFrames</b> (\"mypic.gif\", <i>pics</i>, <i>delayTime</i>)</tt>\r\n          </p>\n<p>\r\n          The frames can be sequentially displayed using either \r\n          <b>Pic.DrawFrames</b> or <b>Pic.DrawFramesBack</b> which display the \r\n          images one at a time. (<b>Pic.DrawFrames</b> returns once all the \r\n          images have been displayed, <b>Pic.DrawFramesBack</b> returns \r\n          immediately allowing the program to continue execution while the \r\n          frames are being displayed.</p>\n<p>\r\n    </p>",
      "text_content": "GIF files can contain multiple frames (pictures).  Animated GIFs \r\n          function by displaying each frame in the GIF one after another \r\n          with a delay between them.  This delay can also be specified in \r\n          the GIF file.\r\n          \r\n          Pic.FileNewFrames reads the series of frames from the \r\n          multiframe GIF file, and turns each frame into a picture.  The\r\n          picture is then assigned to an element in the picIDs array.\r\n          If the array is not large enough, then an error occurs and no\r\n          pictures are loaded.\r\n          \r\n          Pic.FileNewFrames also reads the delay specified in the GIF \r\n          file and sets delayTime to the delay in milliseconds.  Note \r\n          that many multiple frame GIF files do not specify a delay, in which \r\n          case delayTime will be set to 0.\r\n          \r\n          In order to determine the number of frames in multiple frame GIF\r\n          file, you must use the Pic.Frames\r\n          function.  This returns a number that can be used to declare the\r\n          array that will be passed to Pic.FileNewFrames.\r\n          \r\n          var numFrames = Pic.Frames (\"mypic.gif\")var pics : array 1 .. numFrames of intvar delayTime : intPic.FileNewFrames (\"mypic.gif\", pics, delayTime)\r\n          \r\n          The frames can be sequentially displayed using either \r\n          Pic.DrawFrames or Pic.DrawFramesBack which display the \r\n          images one at a time. (Pic.DrawFrames returns once all the \r\n          images have been displayed, Pic.DrawFramesBack returns \r\n          immediately allowing the program to continue execution while the \r\n          frames are being displayed.\r\n    ",
      "mdown_content": "GIF files can contain multiple frames (pictures).  Animated GIFs function by displaying each frame in the GIF one after another with a delay between them.  This delay can also be specified in the GIF file.\n\n**Pic.FileNewFrames** reads the series of frames from the multiframe GIF file, and turns each frame into a picture.  Thepicture is then assigned to an element in the _picIDs_ array.If the array is not large enough, then an error occurs and nopictures are loaded.\n\n**Pic.FileNewFrames** also reads the delay specified in the GIF file and sets _delayTime_ to the delay in milliseconds.  Note that many multiple frame GIF files do not specify a delay, in which case _delayTime_ will be set to 0.\n\nIn order to determine the number of frames in multiple frame GIFfile, you must use the **[pic_frames.html](Pic.Frames)**function.  This returns a number that can be used to declare thearray that will be passed to **Pic.FileNewFrames**.\n\n`**var** _numFrames_ = **Pic.Frames** (\"mypic.gif\")**var** _pics_ : **array** 1 .. _numFrames_ **of int****var** _delayTime_ : **int****Pic.FileNewFrames** (\"mypic.gif\", _pics_, _delayTime_)`\n\nThe frames can be sequentially displayed using either **Pic.DrawFrames** or **Pic.DrawFramesBack** which display the images one at a time. (**Pic.DrawFrames** returns once all the images have been displayed, **Pic.DrawFramesBack** returns immediately allowing the program to continue execution while the frames are being displayed.\n"
    },
    {
      "title": "Details",
      "raw_content": "GIF files can have a transparent color.  This color will be added to\r\n          the color palette, if not already present.  Thus you may notice that\r\n          <b>maxcolor</b> changes after calling <b>Pic.FileNew</b> or\r\n          <b>Pic.FileNewFrames</b>.  The GIF image will be be displayed without\r\n          the transparent color if <i>mode</i> parameter in any of the \r\n           <b>Pic.Draw...</b> procedures is set to <i>picMerge</i>.<p>\r\n    </p>",
      "text_content": "GIF files can have a transparent color.  This color will be added to\r\n          the color palette, if not already present.  Thus you may notice that\r\n          maxcolor changes after calling Pic.FileNew or\r\n          Pic.FileNewFrames.  The GIF image will be be displayed without\r\n          the transparent color if mode parameter in any of the \r\n           Pic.Draw... procedures is set to picMerge.\r\n    ",
      "mdown_content": "GIF files can have a transparent color.  This color will be added tothe color palette, if not already present.  Thus you may notice that**maxcolor** changes after calling **Pic.FileNew** or**Pic.FileNewFrames**.  The GIF image will be be displayed withoutthe transparent color if _mode_ parameter in any of the **Pic.Draw...** procedures is set to _picMerge_.\n"
    },
    {
      "title": "Details",
      "raw_content": "Each picture is in the array has been allocated by the system and\r\n          should be freed separately once the program is finished with the\r\n          pictures.  Failing to do so can use up the system's memory.<p>\r\n    </p>",
      "text_content": "Each picture is in the array has been allocated by the system and\r\n          should be freed separately once the program is finished with the\r\n          pictures.  Failing to do so can use up the system's memory.\r\n    ",
      "mdown_content": "Each picture is in the array has been allocated by the system andshould be freed separately once the program is finished with thepictures.  Failing to do so can use up the system's memory.\n"
    },
    {
      "title": "Example",
      "code": [
        "        % Determine the number of frames in \"globe.gif\"\r\n        % Create the original picture\r\n        var numFrames := Pic.Frames (\"globe.gif\")\r\n        % Load the picture\r\n        var delayTime : int\r\n        var pics : array 1 .. numFrames of int\r\n\r\n\tPic.FileNewFrames (\"globe.gif\", pics, delayTime)\r\n\tPic.DrawFrames (pics, 10, 10, picCopy, numFrames, 50, false)"
      ],
      "raw_content": "The program loads a multiple frame GIF called \"globe.gif\" and \r\n          displays it.\r\n<p>\r\n    </p>",
      "text_content": "The program loads a multiple frame GIF called \"globe.gif\" and \r\n          displays it.\r\n\r\n    ",
      "mdown_content": "The program loads a multiple frame GIF called \"globe.gif\" and displays it.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Pic.FileNewFrames Example",
          "file": "Pic.DrawFrames.t"
        }
      ]
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n\t  This means that you can only call the function by calling \r\n\t  <b>Pic.FileNewFrames</b>, not by calling <b>FileNewFrames</b>.</p>\n<p>\r\n    </p>",
      "text_content": "Exported qualified.\r\n\t  This means that you can only call the function by calling \r\n\t  Pic.FileNewFrames, not by calling FileNewFrames.\r\n    ",
      "mdown_content": "Exported qualified.\n\nThis means that you can only call the function by calling **Pic.FileNewFrames**, not by calling **FileNewFrames**.\n"
    },
    {
      "title": "See also",
      "links": [
        "pic_frames",
        "pic_drawframes",
        "pic_drawframesback"
      ],
      "raw_content": "<b><a href=\"pic_frames.html\">Pic.Frames</a></b> for information on how\r\n          to determine the number of frames in a GIF image.<p>\r\n          <b><a href=\"pic_drawframes.html\">Pic.DrawFrames</a></b> for information on\r\n          how to sequentially display the images stored in array of pictures.</p>\n<p>\r\n          <b><a href=\"pic_drawframesback.html\">Pic.DrawFramesBack</a></b> for \r\n          information on how to sequentially display the images stored in array \r\n          of pictures while continuing to execute the program.</p>\n<p>\r\n    </p>",
      "text_content": "Pic.Frames for information on how\r\n          to determine the number of frames in a GIF image.\r\n          Pic.DrawFrames for information on\r\n          how to sequentially display the images stored in array of pictures.\r\n          Pic.DrawFramesBack for \r\n          information on how to sequentially display the images stored in array \r\n          of pictures while continuing to execute the program.\r\n    ",
      "mdown_content": "**[pic_frames.html](Pic.Frames)** for information on howto determine the number of frames in a GIF image.\n\n**[pic_drawframes.html](Pic.DrawFrames)** for information onhow to sequentially display the images stored in array of pictures.\n\n**[pic_drawframesback.html](Pic.DrawFramesBack)** for information on how to sequentially display the images stored in array of pictures while continuing to execute the program.\n"
    }
  ],
  "dependencies": [

  ]
}
