{
  "title": "declaration",
  "fileName": "declaration",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>declaration</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>variableDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>constantDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(c)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>typeDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(d)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>bindDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(e)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>procedureDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(f)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>functionDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(g)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>moduleDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(h)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>classDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(i)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>processDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(j)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>monitorDeclaration</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(k)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>conditionDeclaration</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A declaration is one of:\r\n (a)variableDeclaration (b)constantDeclaration (c)typeDeclaration (d)bindDeclaration (e)procedureDeclaration (f)functionDeclaration (g)moduleDeclaration (h)classDeclaration (i)processDeclaration (j)monitorDeclaration (k)conditionDeclaration",
      "mdown_content": "A _declaration_ is one of:   (a) _variableDeclaration_   (b) _constantDeclaration_   (c) _typeDeclaration_   (d) _bindDeclaration_   (e) _procedureDeclaration_   (f) _functionDeclaration_   (g) _moduleDeclaration_   (h) _classDeclaration_   (i) _processDeclaration_   (j) _monitorDeclaration_   (k) _conditionDeclaration_"
    },
    {
      "title": "Description",
      "raw_content": "A <i>declaration</i> creates a new name (or names) for a variable, constant, type, procedure, function, module, class, process, monitor, or condition. These names are called <i>identifiers</i>,<i> </i>where <i>id</i> is the abbreviation for <i>identifier</i>.<p>\r\n</p>",
      "text_content": " A declaration creates a new name (or names) for a variable, constant, type, procedure, function, module, class, process, monitor, or condition. These names are called identifiers, where id is the abbreviation for identifier.\r\n",
      "mdown_content": "A _declaration_ creates a new name (or names) for a variable, constant, type, procedure, function, module, class, process, monitor, or condition. These names are called _identifiers_, where _id_ is the abbreviation for _identifier_.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var width : int         % Variable declaration\r\n        const pi := 3.14159     % Constant declaration\r\n        type range : 0 .. 150       % Type declaration\r\n        \r\n        procedure greet         % Procedure declaration\r\n            put \"Hello  world\"\r\n        end greet"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": "\n"
    },
    {
      "title": "Details",
      "raw_content": "Ordinarily, each new name must be distinct from names that are already visible; that is, redeclaration is not allowed. There are certain exceptions to this rule, for example, names of parameters and fields of records can be the same as existing visible variables. Variables declared inside a subprogram (a procedure and function) are allowed to be the same as variables global to (outside of) the subprogram.<p>\r\nThe effect of a declaration (its <i>scope</i>) lasts to the end of the construct in which the declaration occurs; this will be the end of the program, the <b>end</b> of the surrounding procedure, function or module, the <b>end</b> of a <b>loop</b>, <b>for</b>, <b>case</b> or <b>begin</b> statement, or the end of the <b>then</b>, <b>elsif</b>, or <b>else</b> clause of an <b>if</b> statement, or the end of the <b>case</b> statement alternative.</p>\n<p>\r\nA name must be declared before it can be used; this is called the <i>DBU </i>(<i>Declaration Before Use</i>) rule. The exceptions to this rule use the keyword <b>forward</b>, as in <b>import</b> lists and in <b>collection</b> declarations.</p>\n<p>\r\nA <i>declaration</i> can appear any place a <i>statement</i> can appear. This differs from the Pascal language, in which declarations are allowed only at the beginning of the program or at the beginning of a procedure or function. Each declaration can optionally be followed by a semicolon (;).</p>\n<p>\r\nThere are certain restrictions on the placement of declarations. Procedures and functions cannot be declared inside other procedures and functions nor inside statements (for example, not inside an <b>if</b> statement). A <b>bind</b> declaration cannot appear at the outer level of either the main program or a module. A <b>condition</b> declaration can appear only inside a monitor. Processes cannot be declared inside procedures, functions, monitors or classes. Classes cannot be declared inside classes. However, modules and monitors can be declared inside classes and vice versa. Monitors can be declared inside modules, not vice versa.</p>\n<p>\r\n</p>",
      "text_content": " Ordinarily, each new name must be distinct from names that are already visible; that is, redeclaration is not allowed. There are certain exceptions to this rule, for example, names of parameters and fields of records can be the same as existing visible variables. Variables declared inside a subprogram (a procedure and function) are allowed to be the same as variables global to (outside of) the subprogram.\r\nThe effect of a declaration (its scope) lasts to the end of the construct in which the declaration occurs; this will be the end of the program, the end of the surrounding procedure, function or module, the end of a loop, for, case or begin statement, or the end of the then, elsif, or else clause of an if statement, or the end of the case statement alternative.\r\nA name must be declared before it can be used; this is called the DBU (Declaration Before Use) rule. The exceptions to this rule use the keyword forward, as in import lists and in collection declarations.\r\nA declaration can appear any place a statement can appear. This differs from the Pascal language, in which declarations are allowed only at the beginning of the program or at the beginning of a procedure or function. Each declaration can optionally be followed by a semicolon (;).\r\nThere are certain restrictions on the placement of declarations. Procedures and functions cannot be declared inside other procedures and functions nor inside statements (for example, not inside an if statement). A bind declaration cannot appear at the outer level of either the main program or a module. A condition declaration can appear only inside a monitor. Processes cannot be declared inside procedures, functions, monitors or classes. Classes cannot be declared inside classes. However, modules and monitors can be declared inside classes and vice versa. Monitors can be declared inside modules, not vice versa.\r\n",
      "mdown_content": "Ordinarily, each new name must be distinct from names that are already visible; that is, redeclaration is not allowed. There are certain exceptions to this rule, for example, names of parameters and fields of records can be the same as existing visible variables. Variables declared inside a subprogram (a procedure and function) are allowed to be the same as variables global to (outside of) the subprogram.\n\nThe effect of a declaration (its _scope_) lasts to the end of the construct in which the declaration occurs; this will be the end of the program, the **end** of the surrounding procedure, function or module, the **end** of a **loop**, **for**, **case** or **begin** statement, or the end of the **then**, **elsif**, or **else** clause of an **if** statement, or the end of the **case** statement alternative.\n\nA name must be declared before it can be used; this is called the _DBU_ (_Declaration Before Use_) rule. The exceptions to this rule use the keyword **forward**, as in **import** lists and in **collection** declarations.\n\nA _declaration_ can appear any place a _statement_ can appear. This differs from the Pascal language, in which declarations are allowed only at the beginning of the program or at the beginning of a procedure or function. Each declaration can optionally be followed by a semicolon (;).\n\nThere are certain restrictions on the placement of declarations. Procedures and functions cannot be declared inside other procedures and functions nor inside statements (for example, not inside an **if** statement). A **bind** declaration cannot appear at the outer level of either the main program or a module. A **condition** declaration can appear only inside a monitor. Processes cannot be declared inside procedures, functions, monitors or classes. Classes cannot be declared inside classes. However, modules and monitors can be declared inside classes and vice versa. Monitors can be declared inside modules, not vice versa.\n"
    }
  ],
  "dependencies": [

  ]
}
