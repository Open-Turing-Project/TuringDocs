{
  "title": "cheat",
  "fileName": "cheat",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>typeCheat</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>cheat</b> (<i>targetType</i>, <i>expn</i> <b>[</b> : <i>sizeSpec</i> <b>]</b> )</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>#</b> <i>expn</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(c)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>id</i> : <b>cheat</b> <i>typeSpec</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A typeCheat is one of:\r\n (a)cheat (targetType, expn [ : sizeSpec ] ) (b)# expn (c)id : cheat typeSpec",
      "mdown_content": "A _typeCheat_ is one of:\n\n\n(a) **cheat** (_targetType_, _expn_ **[** : _sizeSpec_ **]** )\n(b) **#** _expn_\n(c) _id_ : **cheat** _typeSpec_\n\n"
    },
    {
      "title": "Description",
      "raw_content": "A type cheat interprets the representation (bits) of one type as another type. Type cheats are dirty (machine-dependent) and sometimes dangerous (arbitrary corruption) and should be used only by programmers who know the underlying computer representation of values. <p>\r\nForm (b) is a short form type cheat in which the target type is a natural number.</p>\n<p>\r\nForm (c) is used as a parameter in a subprogram declaration. It causes whatever is passed in to the parameter to be interpreted as <i>typeSpec</i>. </p>\n<p>\r\n</p>",
      "text_content": " A type cheat interprets the representation (bits) of one type as another type. Type cheats are dirty (machine-dependent) and sometimes dangerous (arbitrary corruption) and should be used only by programmers who know the underlying computer representation of values. \r\nForm (b) is a short form type cheat in which the target type is a natural number.\r\nForm (c) is used as a parameter in a subprogram declaration. It causes whatever is passed in to the parameter to be interpreted as typeSpec. \r\n",
      "mdown_content": "A type cheat interprets the representation (bits) of one type as another type. Type cheats are dirty (machine-dependent) and sometimes dangerous (arbitrary corruption) and should be used only by programmers who know the underlying computer representation of values. \n\nForm (b) is a short form type cheat in which the target type is a natural number.\n\nForm (c) is used as a parameter in a subprogram declaration. It causes whatever is passed in to the parameter to be interpreted as _typeSpec_. \n"
    },
    {
      "title": "Example",
      "code": [
        "        var i : int1        % One byte integer\r\n        cheat (char, i) := 'B'",
        "        i := cheat (int1, 'B')\r\n        i := ord ('B')"
      ],
      "raw_content": "The character 'B' is assigned to variable <i>i</i>, whose type is considered to be <b>char</b> (although it is really <b>int1</b>).<p>\r\n</p>\r\nThis assignment is equivalent (on byte oriented computers) to either of the following:<p>\r\n</p>",
      "text_content": " The character 'B' is assigned to variable i, whose type is considered to be char (although it is really int1).\r\n\r\nThis assignment is equivalent (on byte oriented computers) to either of the following:\r\n\r\n",
      "mdown_content": "The character 'B' is assigned to variable _i_, whose type is considered to be **char** (although it is really **int1**).\n\nThis assignment is equivalent (on byte oriented computers) to either of the following:\n"
    },
    {
      "title": "Details",
      "raw_content": "The form of <i>targetType</i> must be one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(a)</td>\n<td width=\"10\">&nbsp;</td>\n<td>[ <i>id</i> . ] <i>typeId</i>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(b)</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<b>int</b>, <b>int1</b>, <b>int2</b> or <b>int4</b>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(c)</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<b>nat</b>, <b>nat1</b>, <b>nat2</b> or <b>nat4</b>\n</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(d)</td>\n<td width=\"10\">&nbsp;</td>\n<td><b>boolean</b></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(e)</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<b>char</b> [ (<i>numberOfCharacters</i> ) ]</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(f)</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<b>string</b> [ (<i>maximumLength</i> ) ]</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(g)</td>\n<td width=\"10\">&nbsp;</td>\n<td><b>addressint</b></td>\n</tr>\n</table>\n<p>\r\nIn form (a) the beginning identifier <i>id</i> must be the name of a module, monitor or class that exports the <i>typeId</i>. Each of <i>numberOfCharacters</i> and <i>maximumLength</i> must be compile time integer expressions.</p>\n<p>\r\nIf the <i>expn</i> in a type cheat is a variable reference and the <i>sizeSpec</i> is omitted, the type cheat is considered to be a variable whose type is <i>targetType</i>. This allows, for example, the type cheat to be assigned to, as in:</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<b>cheat</b> (<b>char</b>, <i>i</i>) := 'B'</td>\n</tr></table>\n<p>\r\nIf the <i>expn</i> is a value that is not a variable reference, or if <i>sizeSpec</i> is present, the type cheat is an expression value whose type is <i>targetType</i>.</p>\n<p>\r\nThe <i>sizeSpec</i> is a compile time integer expression giving the size of the <i>expn'</i>s value. It can be specified only for integer or natural number values (where it must be 1, 2 or 4) or real values (where it must be 4 or 8).</p>\n<p>\r\nA type cheat is carried out in two steps. The first step converts the value if necessary to the size given by <i>sizeSpec</i>. The second step, which involves no generated code, interprets the value as the target type.</p>\n<p>\r\nThe prefix operator # is a short form for a class of type cheats. It interprets its argument as a natural number. In general, # <i>expn</i> is the same as <b>cheat</b> (<b>nat</b><i>n</i>, <i>expn</i>) where <i>n</i> is determined as follows. If the <i>expn</i> is a variable or expression of size 1, 2 or 4, <i>n</i> is the size of the item, otherwise <i>n </i>is 4.</p>\n<p>\r\n</p>",
      "text_content": " The form of targetType must be one of:\r\n (a) [ id . ] typeId (b) int, int1, int2 or int4 (c) nat, nat1, nat2 or nat4 (d) boolean (e) char [ (numberOfCharacters ) ] (f) string [ (maximumLength ) ] (g) addressint\r\nIn form (a) the beginning identifier id must be the name of a module, monitor or class that exports the typeId. Each of numberOfCharacters and maximumLength must be compile time integer expressions.\r\nIf the expn in a type cheat is a variable reference and the sizeSpec is omitted, the type cheat is considered to be a variable whose type is targetType. This allows, for example, the type cheat to be assigned to, as in:\r\n cheat (char, i) := 'B'\r\nIf the expn is a value that is not a variable reference, or if sizeSpec is present, the type cheat is an expression value whose type is targetType.\r\nThe sizeSpec is a compile time integer expression giving the size of the expn's value. It can be specified only for integer or natural number values (where it must be 1, 2 or 4) or real values (where it must be 4 or 8).\r\nA type cheat is carried out in two steps. The first step converts the value if necessary to the size given by sizeSpec. The second step, which involves no generated code, interprets the value as the target type.\r\nThe prefix operator # is a short form for a class of type cheats. It interprets its argument as a natural number. In general, # expn is the same as cheat (natn, expn) where n is determined as follows. If the expn is a variable or expression of size 1, 2 or 4, n is the size of the item, otherwise n is 4.\r\n",
      "mdown_content": "The form of _targetType_ must be one of:\n\n\n(a)   [ _id_ . ] _typeId_\n(b)   **int**, **int1**, **int2** or **int4**\n(c)   **nat**, **nat1**, **nat2** or **nat4**\n(d)   **boolean**\n(e)   **char** [ (_numberOfCharacters_ ) ]\n(f)   **string** [ (_maximumLength_ ) ]\n(g)   **addressint**\n\n\nIn form (a) the beginning identifier _id_ must be the name of a module, monitor or class that exports the _typeId_. Each of _numberOfCharacters_ and _maximumLength_ must be compile time integer expressions.\n\nIf the _expn_ in a type cheat is a variable reference and the _sizeSpec_ is omitted, the type cheat is considered to be a variable whose type is _targetType_. This allows, for example, the type cheat to be assigned to, as in:\n\n\n**cheat** (**char**, _i_) := 'B'\n\n\nIf the _expn_ is a value that is not a variable reference, or if _sizeSpec_ is present, the type cheat is an expression value whose type is _targetType_.\n\nThe _sizeSpec_ is a compile time integer expression giving the size of the _expn'_s value. It can be specified only for integer or natural number values (where it must be 1, 2 or 4) or real values (where it must be 4 or 8).\n\nA type cheat is carried out in two steps. The first step converts the value if necessary to the size given by _sizeSpec_. The second step, which involves no generated code, interprets the value as the target type.\n\nThe prefix operator # is a short form for a class of type cheats. It interprets its argument as a natural number. In general, # _expn_ is the same as **cheat** (**nat**_n_, _expn_) where _n_ is determined as follows. If the _expn_ is a variable or expression of size 1, 2 or 4, _n_ is the size of the item, otherwise _n_ is 4.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var d : char (3)\r\n        #d (2) := 24        % Same as d(2) := chr(24)"
      ],
      "raw_content": "Set the second character of <i>d</i> so it has the numeric representation 24. In general, if <i>c</i> is a character, then #<i>c</i> = <b>ord</b><i>(c)</i>. Note that #<i>c</i> can have a number value assigned to it, but <i>ord(c)</i> cannot.<p>\r\n</p>",
      "text_content": " Set the second character of d so it has the numeric representation 24. In general, if c is a character, then #c = ord(c). Note that #c can have a number value assigned to it, but ord(c) cannot.\r\n\r\n",
      "mdown_content": "Set the second character of _d_ so it has the numeric representation 24. In general, if _c_ is a character, then #_c_ = **ord**_(c)_. Note that #_c_ can have a number value assigned to it, but _ord(c)_ cannot.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var i : int2\r\n        #i := 16#FFFF       % Equivalent to i := -1"
      ],
      "raw_content": "The notation 16#FFFF means FFFF in base 16, which is 32767 in base 10 and is 16 1's in a row in base 2. This same pattern is the two's complement representation of the value -1 in a 2-byte integer.<p>\r\n</p>",
      "text_content": " The notation 16#FFFF means FFFF in base 16, which is 32767 in base 10 and is 16 1's in a row in base 2. This same pattern is the two's complement representation of the value -1 in a 2-byte integer.\r\n\r\n",
      "mdown_content": "The notation 16#FFFF means FFFF in base 16, which is 32767 in base 10 and is 16 1's in a row in base 2. This same pattern is the two's complement representation of the value -1 in a 2-byte integer.\n"
    },
    {
      "title": "Example",
      "code": [
        "        procedure PrintString (str : cheat string)\r\n            put str\r\n        end PrintString \r\n        \r\n        var myAddr : addressint\r\n        ...             % Assigned a value to myAddr\r\n        PrintString (myAddr)    % myAddr will be treated as a string"
      ],
      "raw_content": "The following example prints out a string located at addressint <i>myAddr</i>.<p>\r\n</p>",
      "text_content": " The following example prints out a string located at addressint myAddr.\r\n\r\n",
      "mdown_content": "The following example prints out a string located at addressint _myAddr_.\n"
    },
    {
      "title": "Details",
      "raw_content": "An implementation may prohibit certain type cheats. Memory alignment requirements may render some type cheats unfeasible. It is dangerous to consider a value to have a <i>targetType</i> larger than the value's type. An implementation may prohibit certain type cheats on <b>register</b> scalar items.<p>\r\n</p>",
      "text_content": " An implementation may prohibit certain type cheats. Memory alignment requirements may render some type cheats unfeasible. It is dangerous to consider a value to have a targetType larger than the value's type. An implementation may prohibit certain type cheats on register scalar items.\r\n",
      "mdown_content": "An implementation may prohibit certain type cheats. Memory alignment requirements may render some type cheats unfeasible. It is dangerous to consider a value to have a _targetType_ larger than the value's type. An implementation may prohibit certain type cheats on **register** scalar items.\n"
    },
    {
      "title": "See also",
      "links": [
        "explicitintegerconstant",
        "ord",
        "chr",
        "intstr",
        "strint",
        "natstr",
        "strnat"
      ],
      "raw_content": "<i><a href=\"explicitintegerconstant.html\">explicitIntegerConstant</a></i> (for description of constants such as 16#FFFF) and the following functions that convert one type to another in a machine-independent manner: <b><a href=\"ord.html\">ord</a></b>, <b><a href=\"chr.html\">chr</a></b>, <b><a href=\"intstr.html\">intstr</a></b>, <b><a href=\"strint.html\">strint</a></b>, <b><a href=\"natstr.html\">natstr</a></b>, and <b><a href=\"strnat.html\">strnat</a></b>.<p>\r\n</p>",
      "text_content": " explicitIntegerConstant (for description of constants such as 16#FFFF) and the following functions that convert one type to another in a machine-independent manner: ord, chr, intstr, strint, natstr, and strnat.\r\n",
      "mdown_content": "_[explicitintegerconstant.html](explicitIntegerConstant)_ (for description of constants such as 16#FFFF) and the following functions that convert one type to another in a machine-independent manner: **[ord.html](ord)**, **[chr.html](chr)**, **[intstr.html](intstr)**, **[strint.html](strint)**, **[natstr.html](natstr)**, and **[strnat.html](strnat)**.\n"
    }
  ],
  "dependencies": [

  ]
}
