{
  "title": "scalar",
  "fileName": "scalar",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>scalarType</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>standardType</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-1\"><font size=\"+1\"><i>% int</i>,<i> real</i>,<i> boolean or string</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>enumeratedType</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(c)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>subrangeType</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(d)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>pointerType</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(e)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>char</b></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(f)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>int</b><i>n</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(g)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>nat</b><i>n</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(h)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>real</b><i>n</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(i)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>namedType</i></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% Must name one of the above types</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A scalarType is one of:\r\n (a)standardType % int, real, boolean or string (b)enumeratedType (c)subrangeType (d)pointerType (e)char (f)intn (g)natn (h)realn (i)namedType  % Must name one of the above types",
      "mdown_content": "A _scalarType_ is one of:   \n-  _standardType_   _% int_, _real_, _boolean or string_   \n-  _enumeratedType_   \n-  _subrangeType_   \n-  _pointerType_   \n-  **char**   \n-  **int**_n_   \n-  **nat**_n_   \n-  **real**_n_   \n-  _namedType_     _% Must name one of the above types_"
    },
    {
      "title": "Description",
      "raw_content": "Scalar types are sometimes called <i>simple</i> or <i>primitive</i> types. The non-scalar types are strings, sets, arrays, records, unions and in OOT <b>char</b>(<i>n</i>). They are defined using scalar types. Scalar types are passed by value to parameters, while non-scalars are passed by reference (by passing an implicit pointer to the non-scalar value).<p>\r\n</p>",
      "text_content": " Scalar types are sometimes called simple or primitive types. The non-scalar types are strings, sets, arrays, records, unions and in OOT char(n). They are defined using scalar types. Scalar types are passed by value to parameters, while non-scalars are passed by reference (by passing an implicit pointer to the non-scalar value).\r\n",
      "mdown_content": "Scalar types are sometimes called _simple_ or _primitive_ types. The non-scalar types are strings, sets, arrays, records, unions and in OOT **char**(_n_). They are defined using scalar types. Scalar types are passed by value to parameters, while non-scalars are passed by reference (by passing an implicit pointer to the non-scalar value).\n"
    },
    {
      "title": "Description",
      "raw_content": "In current Turing implementations scalar types are directly represented in 1, 2, 4 or 8 bytes in a computer's memory. This implies that they can be efficiently passed by value.<p>\r\n</p>",
      "text_content": " In current Turing implementations scalar types are directly represented in 1, 2, 4 or 8 bytes in a computer's memory. This implies that they can be efficiently passed by value.\r\n",
      "mdown_content": "In current Turing implementations scalar types are directly represented in 1, 2, 4 or 8 bytes in a computer's memory. This implies that they can be efficiently passed by value.\n"
    }
  ],
  "dependencies": [

  ]
}
