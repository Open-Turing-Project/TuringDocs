{
  "title": "GUI.CreateTextBoxChoice",
  "fileName": "gui_createtextboxchoice",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>GUI.CreateTextBoxChoice</b> (<i>x</i>, <i>y</i>, <i>width</i>, <i>height</i> : <b>int</b>,<br>\r\n          &nbsp;&nbsp;&nbsp;&nbsp;<i>border</i>, <i>fontID</i> : <b>int</b>, <i>actionProc</i> : <b>procedure</b> <i>x</i> (<i>line</i> : <b>int</b>)) : <b>int</b><p></p></font>",
      "mdown_content": "**GUI.CreateTextBoxChoice** (*x*, *y*, *width*, *height* : **int**,\n    *border*, *fontID* : **int**, *actionProc* : **procedure** *x* (*line* : **int**)) : **int**"
    },
    {
      "title": "Description",
      "images": [
        "gui_createtextboxchoice01.gif"
      ],
      "raw_content": "Creates a text box that can be used for selecting individual items \r\n          and returns the text box's widget ID. <p>\r\n\t  A text box is a box used for displaying text. By using \r\n\t  <b>GUI.AddLine</b> to add lines of text, the program can then wait\r\n\t  for the user to double click on lines in the text box.  The line\r\n\t  highlights when the user clicks the line once, and calls the action\r\n\t  procedure when the user clicks the highlighted line a second time.\r\n\t  Like a text box, the text box choice has scroll bars that activate \r\n\t  when text appears outside the border of the text box. The user \r\n\t  cannot directly edit or modify the text in the text box choice.</p>\n<p>\r\n\t  The <i>x</i> and<i> y</i> parameters specify the lower-left corner of \r\n\t  the area in which the text will be drawn. The <i>width</i> and \r\n\t  <i>height</i> parameters specify the width and height of the text \r\n\t  drawing area The text box border is just outside the text drawing \r\n\t  area. Because of this, <b>GUI.GetX</b> and <b>GUI.GetY</b> will \r\n\t  return a value slightly smaller than <i>x</i> and <i>y</i> and \r\n\t  <b>GUI.GetWidth</b><i> </i>and <b>GUI.GetHeight</b> will return \r\n\t  values slightly larger than <i>width</i> and <i>height</i>.</p>\n<p>\r\n\t  For <b>GUI.CreateTextBox</b>, the border around the text box is \r\n\t  always a line. For <b>GUI.CreateTextBoxFull</b>, the type of border \r\n\t  is specified by the <i>border</i> parameter. The <i>border</i> \r\n\t  parameter is one of 0, <i>GUI.LINE</i>, <i>GUI.INDENT</i>, or \r\n\t  <i>GUI.EXDENT</i>. A border of 0 is the default and is the same \r\n\t  as <i>GUI.LINE</i>. <i>GUI.INDENT</i> and <i>GUI.EXDENT</i> only \r\n\t  display properly if the background colour has been set to <i>gray</i> \r\n\t  using <b>GUI.SetBackgroundColor</b>. <i>GUI.INDENT</i> makes the text \r\n\t  box appear indented or recessed. <i>GUI.EXDENT</i> makes the text box \r\n\t  appear to stand out from the window. The <i>fontID</i> parameter \r\n\t  specifies the font ID of the font to be used in the text box. The \r\n\t  font ID is received from a <i>Font.New</i> call. Do not call \r\n\t  <i>Font.Free</i> for this font ID until the label has been disposed \r\n\t  of by calling <b>GUI.Dispose</b>.</p>\n<p>\r\n\t  By using the <i>fontID</i> parameter, text boxes can have any size \r\n\t  or typeface.</p>\n<p>\r\n\t  </p>\n<center></center>\r\n\t  <center><b>A text box choice after a user double clicked a line.</b></center>\n<p>\r\n    </p>",
      "mdown_content": "Creates a text box that can be used for selecting individual items \nand returns the text box's widget ID. \nA text box is a box used for displaying text. By using \n**GUI.AddLine** to add lines of text, the program can then wait\nfor the user to double click on lines in the text box.  The line\nhighlights when the user clicks the line once, and calls the action\nprocedure when the user clicks the highlighted line a second time.\nLike a text box, the text box choice has scroll bars that activate \nwhen text appears outside the border of the text box. The user \ncannot directly edit or modify the text in the text box choice.\n\nThe *x* and* y* parameters specify the lower-left corner of \nthe area in which the text will be drawn. The *width* and \n*height* parameters specify the width and height of the text \ndrawing area The text box border is just outside the text drawing \narea. Because of this, **GUI.GetX** and **GUI.GetY** will \nreturn a value slightly smaller than *x* and *y* and \n**GUI.GetWidth*** *and **GUI.GetHeight** will return \nvalues slightly larger than *width* and *height*.\n\nFor **GUI.CreateTextBox**, the border around the text box is \nalways a line. For **GUI.CreateTextBoxFull**, the type of border \nis specified by the *border* parameter. The *border* \nparameter is one of 0, *GUI.LINE*, *GUI.INDENT*, or \n*GUI.EXDENT*. A border of 0 is the default and is the same \nas *GUI.LINE*. *GUI.INDENT* and *GUI.EXDENT* only \ndisplay properly if the background colour has been set to *gray* \nusing **GUI.SetBackgroundColor**. *GUI.INDENT* makes the text \nbox appear indented or recessed. *GUI.EXDENT* makes the text box \nappear to stand out from the window. The *fontID* parameter \nspecifies the font ID of the font to be used in the text box. The \nfont ID is received from a *Font.New* call. Do not call \n*Font.Free* for this font ID until the label has been disposed \nof by calling **GUI.Dispose**.\n\nBy using the *fontID* parameter, text boxes can have any size \nor typeface.\n\n\n\n**A text box choice after a user double clicked a line.**\n\n"
    },
    {
      "title": "Example",
      "code": [
        "        import GUI \r\n\r\n        procedure ChoseLine (line : int)\r\n            location (1, 1)\r\n            put \"The user chose \", line\r\n        end ChoseLine\r\n        \r\n        var x : int := GUI.CreateTextBoxChoice (20, 20, 200, 100, 0, 0, ChoseLine)\r\n\r\n\tGUI.AddLine (x, \"Choose A\")\r\n\tGUI.AddLine (x, \"Choose B\")\r\n\tGUI.AddLine (x, \"Choose C\")\r\n\tGUI.AddLine (x, \"Choose D\")\r\n\tGUI.AddLine (x, \"Choose E\")\r\n\tGUI.AddLine (x, \"Choose F\")\r\n\tGUI.AddLine (x, \"Choose G\")\r\n\tGUI.AddLine (x, \"Choose H\")\r\n\tGUI.AddLine (x, \"Choose I\")\r\n\tGUI.AddLine (x, \"Choose J\")\r\n\r\n        loop\r\n            exit when GUI.ProcessEvent\r\n        end loop"
      ],
      "raw_content": "The following program displays the contents of a file in a text box.<p>\r\n</p>\n<p>\r\n    </p>",
      "mdown_content": "The following program displays the contents of a file in a text box.\n\n\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "GUI.CreateTextBoxChoice Example",
          "file": "GUI.CreateTextBoxChoice.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "When <b>GUI.CreateTextBox </b>or <b>GUI.CreateTextBoxFull</b> is \r\n      called, the newly created text box choice will be displayed immediately \r\n      unless <b>GUI.DisplayWhenCreated</b> has been called with the \r\n      <i>display</i> parameter set to false. <p>\r\n    </p>",
      "mdown_content": "When **GUI.CreateTextBox **or **GUI.CreateTextBoxFull** is \ncalled, the newly created text box choice will be displayed immediately \nunless **GUI.DisplayWhenCreated** has been called with the \n*display* parameter set to false. \n"
    },
    {
      "title": "Details",
      "raw_content": "The following GUI subprograms can be called with a text box as the <i>widgetID</i> parameter:<p>\r\n\t  </p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\r\n\t      <td>\n<b>GUI.Show</b>, <b>GUI.Hide</b>, <b>GUI.Dispose</b>,\r\n\t\t  <b>GUI.GetX</b>, <b>GUI.GetY</b>, <b>GUI.GetWidth</b>,\r\n\t\t  <b>GUI.GetHeight</b>, <b>GUI.SetPosition</b>,\r\n\t\t  <b>GUI.SetSize</b>, <b>GUI.SetPositionAndSize</b>,\r\n\t\t  <b>GUI.AddLine</b>, <b>GUI.AddText</b>, \r\n\t\t  <b>GUI.ClearText</b>, <b>GUI.SetTopLine</b>, \r\n\t\t  <b>GUI.SetScrollOnAdd</b> </td>\n<p>\r\n\t    </p>\n</tr></table>",
      "mdown_content": "The following GUI subprograms can be called with a text box as the *widgetID* parameter:\n\n \n\n**GUI.Show**, **GUI.Hide**, **GUI.Dispose**,\n**GUI.GetX**, **GUI.GetY**, **GUI.GetWidth**,\n**GUI.GetHeight**, **GUI.SetPosition**,\n**GUI.SetSize**, **GUI.SetPositionAndSize**,\n**GUI.AddLine**, **GUI.AddText**, \n**GUI.ClearText**, **GUI.SetTopLine**, \n**GUI.SetScrollOnAdd** \n\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n\t  This means that you can only call the function by calling <b>GUI.CreateTextBoxChoice</b>, not by calling <b>CreateTextBoxChoice</b>.</p>\n<p>\r\n    </p>",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **GUI.CreateTextBoxChoice**, not by calling **CreateTextBoxChoice**.\n\n"
    },
    {
      "title": "See also",
      "links": [
        "gui_addline",
        "gui_settopline",
        "gui_setscrollonadd",
        "gui_cleartext"
      ],
      "raw_content": "<b><a href=\"gui_addline.html\">GUI.AddLine</a></b> \r\n          for adding text to the text box.\r\n\t  See also <b><a href=\"gui_settopline.html\">GUI.SetTopLine</a></b>\r\n\t  to set the top line of text in the text box.\r\n\t  See also <b><a href=\"gui_setscrollonadd.html\">GUI.SetScrollOnAdd</a></b>\r\n\t  to set stop the text box from scrolling when text \r\n\t  is added to the text box.\r\n\t  See also <b><a href=\"gui_cleartext.html\">GUI.ClearText</a></b> \r\n\t  for clearing the text box.<p>\r\n    </p>",
      "mdown_content": "**[gui_addline.html](GUI.AddLine)** \nfor adding text to the text box.\nSee also **[gui_settopline.html](GUI.SetTopLine)**\nto set the top line of text in the text box.\nSee also **[gui_setscrollonadd.html](GUI.SetScrollOnAdd)**\nto set stop the text box from scrolling when text \nis added to the text box.\nSee also **[gui_cleartext.html](GUI.ClearText)** \nfor clearing the text box.\n"
    }
  ]
}
