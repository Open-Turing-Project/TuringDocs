{
  "title": "GUI.CreateTextBoxChoice",
  "fileName": "gui_createtextboxchoice",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>GUI.CreateTextBoxChoice</b> (<i>x</i>, <i>y</i>, <i>width</i>, <i>height</i> : <b>int</b>,<br>\r\n          &nbsp;&nbsp;&nbsp;&nbsp;<i>border</i>, <i>fontID</i> : <b>int</b>, <i>actionProc</i> : <b>procedure</b> <i>x</i> (<i>line</i> : <b>int</b>)) : <b>int</b><p></p></font>",
      "text_content": "GUI.CreateTextBoxChoice (x, y, width, height : int,\r\n              border, fontID : int, actionProc : procedure x (line : int)) : int\r\n    ",
      "mdown_content": "**GUI.CreateTextBoxChoice** (_x_, _y_, _width_, _height_ : **int**,    _border_, _fontID_ : **int**, _actionProc_ : **procedure** _x_ (_line_ : **int**)) : **int**"
    },
    {
      "title": "Description",
      "images": [
        "gui_createtextboxchoice01.gif"
      ],
      "raw_content": "Creates a text box that can be used for selecting individual items \r\n          and returns the text box's widget ID. <p>\r\n\t  A text box is a box used for displaying text. By using \r\n\t  <b>GUI.AddLine</b> to add lines of text, the program can then wait\r\n\t  for the user to double click on lines in the text box.  The line\r\n\t  highlights when the user clicks the line once, and calls the action\r\n\t  procedure when the user clicks the highlighted line a second time.\r\n\t  Like a text box, the text box choice has scroll bars that activate \r\n\t  when text appears outside the border of the text box. The user \r\n\t  cannot directly edit or modify the text in the text box choice.</p>\n<p>\r\n\t  The <i>x</i> and<i> y</i> parameters specify the lower-left corner of \r\n\t  the area in which the text will be drawn. The <i>width</i> and \r\n\t  <i>height</i> parameters specify the width and height of the text \r\n\t  drawing area The text box border is just outside the text drawing \r\n\t  area. Because of this, <b>GUI.GetX</b> and <b>GUI.GetY</b> will \r\n\t  return a value slightly smaller than <i>x</i> and <i>y</i> and \r\n\t  <b>GUI.GetWidth</b><i> </i>and <b>GUI.GetHeight</b> will return \r\n\t  values slightly larger than <i>width</i> and <i>height</i>.</p>\n<p>\r\n\t  For <b>GUI.CreateTextBox</b>, the border around the text box is \r\n\t  always a line. For <b>GUI.CreateTextBoxFull</b>, the type of border \r\n\t  is specified by the <i>border</i> parameter. The <i>border</i> \r\n\t  parameter is one of 0, <i>GUI.LINE</i>, <i>GUI.INDENT</i>, or \r\n\t  <i>GUI.EXDENT</i>. A border of 0 is the default and is the same \r\n\t  as <i>GUI.LINE</i>. <i>GUI.INDENT</i> and <i>GUI.EXDENT</i> only \r\n\t  display properly if the background colour has been set to <i>gray</i> \r\n\t  using <b>GUI.SetBackgroundColor</b>. <i>GUI.INDENT</i> makes the text \r\n\t  box appear indented or recessed. <i>GUI.EXDENT</i> makes the text box \r\n\t  appear to stand out from the window. The <i>fontID</i> parameter \r\n\t  specifies the font ID of the font to be used in the text box. The \r\n\t  font ID is received from a <i>Font.New</i> call. Do not call \r\n\t  <i>Font.Free</i> for this font ID until the label has been disposed \r\n\t  of by calling <b>GUI.Dispose</b>.</p>\n<p>\r\n\t  By using the <i>fontID</i> parameter, text boxes can have any size \r\n\t  or typeface.</p>\n<p>\r\n\t  </p>\n<center></center>\r\n\t  <center><b>A text box choice after a user double clicked a line.</b></center>\n<p>\r\n    </p>",
      "text_content": "Creates a text box that can be used for selecting individual items \r\n          and returns the text box's widget ID. \r\n\t  A text box is a box used for displaying text. By using \r\n\t  GUI.AddLine to add lines of text, the program can then wait\r\n\t  for the user to double click on lines in the text box.  The line\r\n\t  highlights when the user clicks the line once, and calls the action\r\n\t  procedure when the user clicks the highlighted line a second time.\r\n\t  Like a text box, the text box choice has scroll bars that activate \r\n\t  when text appears outside the border of the text box. The user \r\n\t  cannot directly edit or modify the text in the text box choice.\r\n\t  The x and y parameters specify the lower-left corner of \r\n\t  the area in which the text will be drawn. The width and \r\n\t  height parameters specify the width and height of the text \r\n\t  drawing area The text box border is just outside the text drawing \r\n\t  area. Because of this, GUI.GetX and GUI.GetY will \r\n\t  return a value slightly smaller than x and y and \r\n\t  GUI.GetWidth and GUI.GetHeight will return \r\n\t  values slightly larger than width and height.\r\n\t  For GUI.CreateTextBox, the border around the text box is \r\n\t  always a line. For GUI.CreateTextBoxFull, the type of border \r\n\t  is specified by the border parameter. The border \r\n\t  parameter is one of 0, GUI.LINE, GUI.INDENT, or \r\n\t  GUI.EXDENT. A border of 0 is the default and is the same \r\n\t  as GUI.LINE. GUI.INDENT and GUI.EXDENT only \r\n\t  display properly if the background colour has been set to gray \r\n\t  using GUI.SetBackgroundColor. GUI.INDENT makes the text \r\n\t  box appear indented or recessed. GUI.EXDENT makes the text box \r\n\t  appear to stand out from the window. The fontID parameter \r\n\t  specifies the font ID of the font to be used in the text box. The \r\n\t  font ID is received from a Font.New call. Do not call \r\n\t  Font.Free for this font ID until the label has been disposed \r\n\t  of by calling GUI.Dispose.\r\n\t  By using the fontID parameter, text boxes can have any size \r\n\t  or typeface.\r\n\t  \r\n\t  A text box choice after a user double clicked a line.\r\n    ",
      "mdown_content": "Creates a text box that can be used for selecting individual items and returns the text box's widget ID. \nA text box is a box used for displaying text. By using **GUI.AddLine** to add lines of text, the program can then waitfor the user to double click on lines in the text box.  The linehighlights when the user clicks the line once, and calls the actionprocedure when the user clicks the highlighted line a second time.Like a text box, the text box choice has scroll bars that activate when text appears outside the border of the text box. The user cannot directly edit or modify the text in the text box choice.\nThe _x_ and_ y_ parameters specify the lower-left corner of the area in which the text will be drawn. The _width_ and _height_ parameters specify the width and height of the text drawing area The text box border is just outside the text drawing area. Because of this, **GUI.GetX** and **GUI.GetY** will return a value slightly smaller than _x_ and _y_ and **GUI.GetWidth**_ _and **GUI.GetHeight** will return values slightly larger than _width_ and _height_.\nFor **GUI.CreateTextBox**, the border around the text box is always a line. For **GUI.CreateTextBoxFull**, the type of border is specified by the _border_ parameter. The _border_ parameter is one of 0, _GUI.LINE_, _GUI.INDENT_, or _GUI.EXDENT_. A border of 0 is the default and is the same as _GUI.LINE_. _GUI.INDENT_ and _GUI.EXDENT_ only display properly if the background colour has been set to _gray_ using **GUI.SetBackgroundColor**. _GUI.INDENT_ makes the text box appear indented or recessed. _GUI.EXDENT_ makes the text box appear to stand out from the window. The _fontID_ parameter specifies the font ID of the font to be used in the text box. The font ID is received from a _Font.New_ call. Do not call _Font.Free_ for this font ID until the label has been disposed of by calling **GUI.Dispose**.\nBy using the _fontID_ parameter, text boxes can have any size or typeface.\n"
    },
    {
      "title": "Example",
      "code": [
        "        import GUI \r\n\r\n        procedure ChoseLine (line : int)\r\n            location (1, 1)\r\n            put \"The user chose \", line\r\n        end ChoseLine\r\n        \r\n        var x : int := GUI.CreateTextBoxChoice (20, 20, 200, 100, 0, 0, ChoseLine)\r\n\r\n\tGUI.AddLine (x, \"Choose A\")\r\n\tGUI.AddLine (x, \"Choose B\")\r\n\tGUI.AddLine (x, \"Choose C\")\r\n\tGUI.AddLine (x, \"Choose D\")\r\n\tGUI.AddLine (x, \"Choose E\")\r\n\tGUI.AddLine (x, \"Choose F\")\r\n\tGUI.AddLine (x, \"Choose G\")\r\n\tGUI.AddLine (x, \"Choose H\")\r\n\tGUI.AddLine (x, \"Choose I\")\r\n\tGUI.AddLine (x, \"Choose J\")\r\n\r\n        loop\r\n            exit when GUI.ProcessEvent\r\n        end loop"
      ],
      "raw_content": "The following program displays the contents of a file in a text box.<p>\r\n</p>\n<p>\r\n    </p>",
      "text_content": "The following program displays the contents of a file in a text box.\r\n\r\n    ",
      "mdown_content": "The following program displays the contents of a file in a text box.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "GUI.CreateTextBoxChoice Example",
          "file": "GUI.CreateTextBoxChoice.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "When <b>GUI.CreateTextBox </b>or <b>GUI.CreateTextBoxFull</b> is \r\n      called, the newly created text box choice will be displayed immediately \r\n      unless <b>GUI.DisplayWhenCreated</b> has been called with the \r\n      <i>display</i> parameter set to false. <p>\r\n    </p>",
      "text_content": "When GUI.CreateTextBox or GUI.CreateTextBoxFull is \r\n      called, the newly created text box choice will be displayed immediately \r\n      unless GUI.DisplayWhenCreated has been called with the \r\n      display parameter set to false. \r\n    ",
      "mdown_content": "When **GUI.CreateTextBox **or **GUI.CreateTextBoxFull** is called, the newly created text box choice will be displayed immediately unless **GUI.DisplayWhenCreated** has been called with the _display_ parameter set to false. "
    },
    {
      "title": "Details",
      "raw_content": "The following GUI subprograms can be called with a text box as the <i>widgetID</i> parameter:<p>\r\n\t  </p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\r\n\t      <td>\n<b>GUI.Show</b>, <b>GUI.Hide</b>, <b>GUI.Dispose</b>,\r\n\t\t  <b>GUI.GetX</b>, <b>GUI.GetY</b>, <b>GUI.GetWidth</b>,\r\n\t\t  <b>GUI.GetHeight</b>, <b>GUI.SetPosition</b>,\r\n\t\t  <b>GUI.SetSize</b>, <b>GUI.SetPositionAndSize</b>,\r\n\t\t  <b>GUI.AddLine</b>, <b>GUI.AddText</b>, \r\n\t\t  <b>GUI.ClearText</b>, <b>GUI.SetTopLine</b>, \r\n\t\t  <b>GUI.SetScrollOnAdd</b> </td>\n<p>\r\n\t    </p>\n</tr></table>",
      "text_content": "The following GUI subprograms can be called with a text box as the widgetID parameter:\r\n\t   \r\n\t      GUI.Show, GUI.Hide, GUI.Dispose,\r\n\t\t  GUI.GetX, GUI.GetY, GUI.GetWidth,\r\n\t\t  GUI.GetHeight, GUI.SetPosition,\r\n\t\t  GUI.SetSize, GUI.SetPositionAndSize,\r\n\t\t  GUI.AddLine, GUI.AddText, \r\n\t\t  GUI.ClearText, GUI.SetTopLine, \r\n\t\t  GUI.SetScrollOnAdd \r\n\t    ",
      "mdown_content": "The following GUI subprograms can be called with a text box as the _widgetID_ parameter:\n\n\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n\t  This means that you can only call the function by calling <b>GUI.CreateTextBoxChoice</b>, not by calling <b>CreateTextBoxChoice</b>.</p>\n<p>\r\n    </p>",
      "text_content": "Exported qualified.\r\n\t  This means that you can only call the function by calling GUI.CreateTextBoxChoice, not by calling CreateTextBoxChoice.\r\n    ",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **GUI.CreateTextBoxChoice**, not by calling **CreateTextBoxChoice**."
    },
    {
      "title": "See also",
      "links": [
        "gui_addline",
        "gui_settopline",
        "gui_setscrollonadd",
        "gui_cleartext"
      ],
      "raw_content": "<b><a href=\"gui_addline.html\">GUI.AddLine</a></b> \r\n          for adding text to the text box.\r\n\t  See also <b><a href=\"gui_settopline.html\">GUI.SetTopLine</a></b>\r\n\t  to set the top line of text in the text box.\r\n\t  See also <b><a href=\"gui_setscrollonadd.html\">GUI.SetScrollOnAdd</a></b>\r\n\t  to set stop the text box from scrolling when text \r\n\t  is added to the text box.\r\n\t  See also <b><a href=\"gui_cleartext.html\">GUI.ClearText</a></b> \r\n\t  for clearing the text box.<p>\r\n    </p>",
      "text_content": "GUI.AddLine \r\n          for adding text to the text box.\r\n\t  See also GUI.SetTopLine\r\n\t  to set the top line of text in the text box.\r\n\t  See also GUI.SetScrollOnAdd\r\n\t  to set stop the text box from scrolling when text \r\n\t  is added to the text box.\r\n\t  See also GUI.ClearText \r\n\t  for clearing the text box.\r\n    ",
      "mdown_content": "**[gui_addline.html](GUI.AddLine)** for adding text to the text box.See also **[gui_settopline.html](GUI.SetTopLine)**to set the top line of text in the text box.See also **[gui_setscrollonadd.html](GUI.SetScrollOnAdd)**to set stop the text box from scrolling when text is added to the text box.See also **[gui_cleartext.html](GUI.ClearText)** for clearing the text box."
    }
  ],
  "dependencies": [
    "gui_createtextboxchoice01.gif"
  ]
}
