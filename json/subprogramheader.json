{
  "title": "subprogramHeader",
  "fileName": "subprogramheader",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>subprogramHeader </i>is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>procedure</b> [ <b>pervasive</b> ] <i>id</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\">[ ([ <i>paramDeclaration</i> {, <i>paramDeclaration</i>} ])]</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>function</b> [ <b>pervasive</b> ] <i>id</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\">[ ([ <i>paramDeclaration</i> {, <i>paramDeclaration</i>} ])]</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"6\"><font size=\"+1\">[ <i>id</i> ] : <i>typeSpec</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A subprogramHeader is one of:\r\n (a)procedure [ pervasive ] id   [ ([ paramDeclaration {, paramDeclaration} ])] (b)function [ pervasive ] id   [ ([ paramDeclaration {, paramDeclaration} ])]   [ id ] : typeSpec",
      "mdown_content": "A _subprogramHeader_ is one of:\n\n(a)**procedure** [ **pervasive** ] _id_\n[ ([ _paramDeclaration_ {, _paramDeclaration_} ])]\n(b)**function** [ **pervasive** ] _id_\n[ ([ _paramDeclaration_ {, _paramDeclaration_} ])]\n[ _id_ ] : _typeSpec_\n"
    },
    {
      "title": "Description",
      "code": [
        "        procedure f\r\n        procedure g ()"
      ],
      "raw_content": "A subprogram header is used to describe the interface to a subprogram. Subprogram headers are used within other language features such as subprogram types and external declarations.<p>\r\nParameterless subprograms may use parentheses (with nothing between them), as is required in the C programming language. These parentheses can be used to disambiguate between the call to the subprogram (parentheses present) and a reference the subprogram (parentheses missing).</p>\n<p>\r\nSuppose <i>f</i> is a parameterless subprogram declared without parentheses and <i>g</i> is a parameterless subprogram declared with parentheses. Their headers are:</p>\n<p>\r\n</p>\r\nIn a program, <i>f</i> and <i>g</i>() are calls to these functions, while <i>g</i> is a reference to (not a call to) the procedure. There is no way to write a reference to <i>f</i>. When in doubt, use parentheses in the declaration, as in the case for <i>g</i>, so that calls always have parentheses and references always do not. A reference to a subprogram can be assigned to a subprogram variable. See subprogram type.<p>\r\n</p>",
      "text_content": " A subprogram header is used to describe the interface to a subprogram. Subprogram headers are used within other language features such as subprogram types and external declarations.\r\nParameterless subprograms may use parentheses (with nothing between them), as is required in the C programming language. These parentheses can be used to disambiguate between the call to the subprogram (parentheses present) and a reference the subprogram (parentheses missing).\r\nSuppose f is a parameterless subprogram declared without parentheses and g is a parameterless subprogram declared with parentheses. Their headers are:\r\n\r\nIn a program, f and g() are calls to these functions, while g is a reference to (not a call to) the procedure. There is no way to write a reference to f. When in doubt, use parentheses in the declaration, as in the case for g, so that calls always have parentheses and references always do not. A reference to a subprogram can be assigned to a subprogram variable. See subprogram type.\r\n",
      "mdown_content": "A subprogram header is used to describe the interface to a subprogram. Subprogram headers are used within other language features such as subprogram types and external declarations.\nParameterless subprograms may use parentheses (with nothing between them), as is required in the C programming language. These parentheses can be used to disambiguate between the call to the subprogram (parentheses present) and a reference the subprogram (parentheses missing).\nSuppose _f_ is a parameterless subprogram declared without parentheses and _g_ is a parameterless subprogram declared with parentheses. Their headers are:\nIn a program, _f_ and _g_() are calls to these functions, while _g_ is a reference to (not a call to) the procedure. There is no way to write a reference to _f_. When in doubt, use parentheses in the declaration, as in the case for _g_, so that calls always have parentheses and references always do not. A reference to a subprogram can be assigned to a subprogram variable. See subprogram type."
    },
    {
      "title": "Example",
      "code": [
        "        type t : procedure q ( var j : int, y : real )"
      ],
      "raw_content": "Specify that <i>t</i> is the type of procedure with a <b>var</b> integer parameter and a real parameter. See also <i>subprogramType</i>.<p>\r\n</p>",
      "text_content": " Specify that t is the type of procedure with a var integer parameter and a real parameter. See also subprogramType.\r\n\r\n",
      "mdown_content": "Specify that _t_ is the type of procedure with a **var** integer parameter and a real parameter. See also _subprogramType_."
    },
    {
      "title": "Details",
      "raw_content": "The keyword <b>pervasive</b> can be inserted just after <b>procedure</b> or <b>function</b>. When this is done, the subprogram is visible inside all subconstructs of the subprogram's scope. Without <b>pervasive</b>, the subprogram is not visible inside modules unless explicitly imported. Pervasive subprograms need not be imported. You can abbreviate <b>pervasive</b> as an asterisk (<b>*</b>).<p>\r\n</p>",
      "text_content": " The keyword pervasive can be inserted just after procedure or function. When this is done, the subprogram is visible inside all subconstructs of the subprogram's scope. Without pervasive, the subprogram is not visible inside modules unless explicitly imported. Pervasive subprograms need not be imported. You can abbreviate pervasive as an asterisk (*).\r\n",
      "mdown_content": "The keyword **pervasive** can be inserted just after **procedure** or **function**. When this is done, the subprogram is visible inside all subconstructs of the subprogram's scope. Without **pervasive**, the subprogram is not visible inside modules unless explicitly imported. Pervasive subprograms need not be imported. You can abbreviate **pervasive** as an asterisk (__*__)."
    },
    {
      "title": "See also",
      "links": [
        "pervasive"
      ],
      "raw_content": "<b><a href=\"pervasive.html\">pervasive</a></b>.<p>\r\n</p>",
      "text_content": " pervasive.\r\n",
      "mdown_content": "**[pervasive.html](pervasive)**."
    }
  ],
  "dependencies": [

  ]
}
