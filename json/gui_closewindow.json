{
  "title": "GUI.CloseWindow",
  "fileName": "gui_closewindow",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>GUI.CloseWindow</b> (<i>window</i> : <b>int</b>)<p></p></font>",
      "text_content": "GUI.CloseWindow (window : int)\r\n    ",
      "mdown_content": "**GUI.CloseWindow** (_window_ : **int**)"
    },
    {
      "title": "Description",
      "raw_content": "Closes a window with widgets in it. This procedure automatically \r\n          disposes of any widgets in the window and makes certain that the \r\n\t  GUI Library recognizes that the window no longer exists. This \r\n\t  procedure will call <i>Window.Close</i>, so there is no need for \r\n\t  the user to do so.<p>\r\n    </p>",
      "text_content": "Closes a window with widgets in it. This procedure automatically \r\n          disposes of any widgets in the window and makes certain that the \r\n\t  GUI Library recognizes that the window no longer exists. This \r\n\t  procedure will call Window.Close, so there is no need for \r\n\t  the user to do so.\r\n    ",
      "mdown_content": "Closes a window with widgets in it. This procedure automatically disposes of any widgets in the window and makes certain that the GUI Library recognizes that the window no longer exists. This procedure will call _Window.Close_, so there is no need for the user to do so."
    },
    {
      "title": "Example",
      "code": [
        "        import GUI\r\n        \r\n        const screenWidth : int := Config.Display (cdScreenWidth)\r\n        const screenHeight : int := Config.Display (cdScreenHeight)\r\n        const titleBarHeight : int := 32\r\n        const windowEdgeSize : int := 13\r\n        const windowWidth : int := 150\r\n        const windowHeight : int := 100\r\n        var windowID, windowNumber, closeButton, quitButton : int := 0\r\n        \r\n        procedure CloseAndOpen\r\n            if windowID not= 0 then\r\n                GUI.CloseWindow (windowID)\r\n            end if\r\n            windowNumber += 1\r\n            var xPos : int := Rand.Int (0, screenWidth - windowWidth -\r\n                windowEdgeSize)\r\n            var yPos : int := Rand.Int (0, screenHeight - windowHeight - \r\n                titleBarHeight)\r\n            windowID := Window.Open (\"title:Window #\" + \r\n                intstr (windowNumber) + \",graphics:\" + \r\n                intstr (windowWidth) + \";\" + intstr (windowHeight) +\r\n                \",position:\" + intstr (xPos) + \";\" + intstr (yPos))\r\n            closeButton := GUI.CreateButton (10, 60, 130, \r\n                \"Close And Open\", CloseAndOpen)\r\n            quitButton := GUI.CreateButton (10, 10, 130, \"Quit\", GUI.Quit)\r\n        end CloseAndOpen\r\n        \r\n        CloseAndOpen\r\n        loop\r\n            exit when GUI.ProcessEvent\r\n        end loop\r\n        GUI.CloseWindow (windowID)"
      ],
      "raw_content": "The program opens up a window with two buttons. If the button \r\n          labelled \"Close and Open\" is pressed, the window is closed and \r\n\t  a new window with two buttons is opened in a random location on \r\n\t  the screen.<p>\r\n</p>\n<p>\r\n    </p>",
      "text_content": "The program opens up a window with two buttons. If the button \r\n          labelled \"Close and Open\" is pressed, the window is closed and \r\n\t  a new window with two buttons is opened in a random location on \r\n\t  the screen.\r\n\r\n    ",
      "mdown_content": "The program opens up a window with two buttons. If the button labelled \"Close and Open\" is pressed, the window is closed and a new window with two buttons is opened in a random location on the screen.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "GUI.CloseWindow Example",
          "file": "GUI.CloseWindow.t"
        }
      ]
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n          This means that you can only call the function by calling \r\n\t  <b>GUI.CloseWindow</b>, not by calling <b>CloseWindow</b>.</p>\n<p>\r\n    </p>",
      "text_content": "Exported qualified.\r\n          This means that you can only call the function by calling \r\n\t  GUI.CloseWindow, not by calling CloseWindow.\r\n    ",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **GUI.CloseWindow**, not by calling **CloseWindow**."
    },
    {
      "title": "See also",
      "links": [
        "gui_showwindow",
        "gui_hidewindow"
      ],
      "raw_content": "<b><a href=\"gui_showwindow.html\">GUI.ShowWindow</a></b> and\r\n          <b><a href=\"gui_hidewindow.html\">GUI.HideWindow</a></b>, \r\n          for showing and hiding windows with widgets in them.<p>\r\n    </p>",
      "text_content": "GUI.ShowWindow and\r\n          GUI.HideWindow, \r\n          for showing and hiding windows with widgets in them.\r\n    ",
      "mdown_content": "**[gui_showwindow.html](GUI.ShowWindow)** and**[gui_hidewindow.html](GUI.HideWindow)**, for showing and hiding windows with widgets in them."
    }
  ],
  "dependencies": [

  ]
}
