{
  "title": "natstr",
  "fileName": "natstr",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>natstr</b> ( <i>n </i>: <b>nat</b> [<i> </i>,<i> width</i> : <b>int</b> [, <i>base</i> : <b>int</b> ] ] ) : <b>string</b><p>\r\n</p></font>",
      "text_content": " natstr ( n : nat [ , width : int [, base : int ] ] ) : string\r\n",
      "mdown_content": "**natstr** ( _n_ : **nat** [ , _width_ : **int** [, _base_ : **int** ] ] ) : **string**"
    },
    {
      "title": "Description",
      "raw_content": "The <b>natstr</b> function is used to convert a natural number to a string. The string is equivalent to <i>n</i>, padded on the left with blanks as necessary to a length of <i>width</i>,<i> </i>written in the given number<i> base</i>. For example, <b>natstr</b> (14, 4, 10)=\"<i>bb</i>14\" where <i>b</i> represents a blank. The <i>width</i> and <i>base </i>parameters are both optional. It they are omitted, the string is made just long enough to hold the value and the number base is 10. For example, <b>natstr</b> (23) = \"23\".<p>\r\nThe <i>width</i> parameter must be non-negative. If <i>width</i> is not large enough to represent the value of <i>i</i>, the length is automatically increased as needed.</p>\n<p>\r\nThe string returned by <b>natstr</b> is of the form:</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>{blank}digit{digits}</td>\n</tr></table>\n<p>\r\nwhere {blank} means zero or more blanks and digit{digit} means one or more digits. The leftmost digit is either non-zero, or a single zero digit; in other words, leading zeros are suppressed.</p>\n<p>\r\nThe letters A, B, C &#133; are used to represent the digit values 10, 11, 12, &#133; The <i>base </i>must be in the range 2 to 36 (36 because there are ten digits and 26 letters). For example, <b>natstr</b> (255, 0, 16) = \"FF\".</p>\n<p>\r\nThe <b>natstr</b> function is the inverse of <b>strnat</b>, so for any natural number <i>n</i>, <b>strnat</b> ( <b>natstr</b>(<i>n</i>) ) = <i>n</i>.</p>\n<p>\r\n</p>",
      "text_content": " The natstr function is used to convert a natural number to a string. The string is equivalent to n, padded on the left with blanks as necessary to a length of width, written in the given number base. For example, natstr (14, 4, 10)=\"bb14\" where b represents a blank. The width and base parameters are both optional. It they are omitted, the string is made just long enough to hold the value and the number base is 10. For example, natstr (23) = \"23\".\r\nThe width parameter must be non-negative. If width is not large enough to represent the value of i, the length is automatically increased as needed.\r\nThe string returned by natstr is of the form:\r\n {blank}digit{digits}\r\nwhere {blank} means zero or more blanks and digit{digit} means one or more digits. The leftmost digit is either non-zero, or a single zero digit; in other words, leading zeros are suppressed.\r\nThe letters A, B, C  are used to represent the digit values 10, 11, 12,  The base must be in the range 2 to 36 (36 because there are ten digits and 26 letters). For example, natstr (255, 0, 16) = \"FF\".\r\nThe natstr function is the inverse of strnat, so for any natural number n, strnat ( natstr(n) ) = n.\r\n",
      "mdown_content": "The **natstr** function is used to convert a natural number to a string. The string is equivalent to _n_, padded on the left with blanks as necessary to a length of _width_, written in the given number _base_. For example, **natstr** (14, 4, 10)=\"_bb_14\" where _b_ represents a blank. The _width_ and _base_ parameters are both optional. It they are omitted, the string is made just long enough to hold the value and the number base is 10. For example, **natstr** (23) = \"23\".\nThe _width_ parameter must be non-negative. If _width_ is not large enough to represent the value of _i_, the length is automatically increased as needed.\nThe string returned by **natstr** is of the form:\n\n\n\nwhere {blank} means zero or more blanks and digit{digit} means one or more digits. The leftmost digit is either non-zero, or a single zero digit; in other words, leading zeros are suppressed.\nThe letters A, B, C &#133; are used to represent the digit values 10, 11, 12, &#133; The _base_ must be in the range 2 to 36 (36 because there are ten digits and 26 letters). For example, **natstr** (255, 0, 16) = \"FF\".\nThe **natstr** function is the inverse of **strnat**, so for any natural number _n_, **strnat** ( **natstr**(_n_) ) = _n_."
    },
    {
      "title": "See also",
      "links": [
        "chr",
        "ord",
        "strnat",
        "intstr",
        "strint",
        "explicitintegerconstant",
        "program"
      ],
      "raw_content": "<b><a href=\"chr.html\">chr</a></b>, <b><a href=\"ord.html\">ord</a></b> and <b><a href=\"strnat.html\">strnat</a></b> functions. See also the <b><a href=\"intstr.html\">intstr</a></b> and <b><a href=\"strint.html\">strint</a></b> functions. See also <i><a href=\"explicitintegerconstant.html\">explicitIntegerConstant</a></i> for the way to write values in base 2 and base 16 in a <a href=\"program.html\">program</a>.<p>\r\n</p>",
      "text_content": " chr, ord and strnat functions. See also the intstr and strint functions. See also explicitIntegerConstant for the way to write values in base 2 and base 16 in a program.\r\n",
      "mdown_content": "**[chr.html](chr)**, **[ord.html](ord)** and **[strnat.html](strnat)** functions. See also the **[intstr.html](intstr)** and **[strint.html](strint)** functions. See also _[explicitintegerconstant.html](explicitIntegerConstant)_ for the way to write values in base 2 and base 16 in a [program.html](program)."
    }
  ],
  "dependencies": [

  ]
}
