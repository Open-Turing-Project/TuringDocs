{
  "title": "intstr",
  "fileName": "intstr",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>intstr</b> ( <i>i </i>: <b>int</b> [ ,<i> width</i> : <b>int</b> [ , <i>base</i> : <b>int</b> ] ] ) : <b>string</b><p>\r\n</p></font>",
      "text_content": " intstr ( i : int [ , width : int [ , base : int ] ] ) : string\r\n",
      "mdown_content": "**intstr** ( _i_ : **int** [ , _width_ : **int** [ , _base_ : **int** ] ] ) : **string**"
    },
    {
      "title": "Description",
      "code": [
        "        strint ( intstr (i)) = i."
      ],
      "raw_content": "The <b>intstr</b> function is used to convert an integer to a string. The string is equivalent to <i>i</i>, padded on the left with blanks as necessary to a length of <i>width</i>,<i> </i>written in the given number<i> base</i>. For example, <b>intstr</b> (14, 4, 10)=\"<i>bb</i>14\" where <i>b</i> represents a blank. The <i>width</i> and <i>base </i>parameters are both optional. If they are omitted, the string is made just long enough to hold the value, and the number base is 10. For example, <b>intstr</b> (14, 4) = \"bb14\" and <b>intstr</b> (23 ) = \"23\". <p>\r\nThe <i>width</i> parameter must be non-negative. If <i>width</i> is not large enough to represent the value of <i>i</i>, the length is automatically increased as needed.</p>\n<p>\r\nThe string returned by <b>intstr</b> is of the form:</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>{blank}[-]digit{digits}</td>\n</tr></table>\n<p>\r\nwhere {blank} means zero or more blanks, [-] means an optional minus sign, and digit{digit} means one or more digits. The leftmost digit is either non-zero or else a single zero digit. In other words, leading zeros are suppressed.</p>\n<p>\r\nThe letters A, B, C &#133; are used to represent the digit values 10, 11, 12, &#133; The <i>base </i>must be in the range 2 to 36 (36 because there are ten digits and 26 letters). For example, <b>intstr</b> (255, 0, 16) = \"FF\".</p>\n<p>\r\nThe <b>intstr</b> function is the inverse of <b>strint</b>, so for any integer <i>i</i>, </p>\n<p>\r\n</p>",
      "text_content": " The intstr function is used to convert an integer to a string. The string is equivalent to i, padded on the left with blanks as necessary to a length of width, written in the given number base. For example, intstr (14, 4, 10)=\"bb14\" where b represents a blank. The width and base parameters are both optional. If they are omitted, the string is made just long enough to hold the value, and the number base is 10. For example, intstr (14, 4) = \"bb14\" and intstr (23 ) = \"23\". \r\nThe width parameter must be non-negative. If width is not large enough to represent the value of i, the length is automatically increased as needed.\r\nThe string returned by intstr is of the form:\r\n {blank}[-]digit{digits}\r\nwhere {blank} means zero or more blanks, [-] means an optional minus sign, and digit{digit} means one or more digits. The leftmost digit is either non-zero or else a single zero digit. In other words, leading zeros are suppressed.\r\nThe letters A, B, C  are used to represent the digit values 10, 11, 12,  The base must be in the range 2 to 36 (36 because there are ten digits and 26 letters). For example, intstr (255, 0, 16) = \"FF\".\r\nThe intstr function is the inverse of strint, so for any integer i, \r\n\r\n",
      "mdown_content": "The **intstr** function is used to convert an integer to a string. The string is equivalent to _i_, padded on the left with blanks as necessary to a length of _width_, written in the given number _base_. For example, **intstr** (14, 4, 10)=\"_bb_14\" where _b_ represents a blank. The _width_ and _base_ parameters are both optional. If they are omitted, the string is made just long enough to hold the value, and the number base is 10. For example, **intstr** (14, 4) = \"bb14\" and **intstr** (23 ) = \"23\". \nThe _width_ parameter must be non-negative. If _width_ is not large enough to represent the value of _i_, the length is automatically increased as needed.\nThe string returned by **intstr** is of the form:\n\n\n\nwhere {blank} means zero or more blanks, [-] means an optional minus sign, and digit{digit} means one or more digits. The leftmost digit is either non-zero or else a single zero digit. In other words, leading zeros are suppressed.\nThe letters A, B, C &#133; are used to represent the digit values 10, 11, 12, &#133; The _base_ must be in the range 2 to 36 (36 because there are ten digits and 26 letters). For example, **intstr** (255, 0, 16) = \"FF\".\nThe **intstr** function is the inverse of **strint**, so for any integer _i_, "
    },
    {
      "title": "See also",
      "links": [
        "chr",
        "ord",
        "strint",
        "natstr",
        "strnat",
        "program"
      ],
      "raw_content": "<b><a href=\"chr.html\">chr</a></b>, <b><a href=\"ord.html\">ord</a></b> and <b><a href=\"strint.html\">strint</a></b> functions. See also the <b><a href=\"natstr.html\">natstr</a></b> and <b><a href=\"strnat.html\">strnat</a></b> functions. See also <i>explicitIntegerConstants</i> for the way to write non base 10 values in a <a href=\"program.html\">program</a>.<p>\r\n</p>",
      "text_content": " chr, ord and strint functions. See also the natstr and strnat functions. See also explicitIntegerConstants for the way to write non base 10 values in a program.\r\n",
      "mdown_content": "**[chr.html](chr)**, **[ord.html](ord)** and **[strint.html](strint)** functions. See also the **[natstr.html](natstr)** and **[strnat.html](strnat)** functions. See also _explicitIntegerConstants_ for the way to write non base 10 values in a [program.html](program)."
    }
  ],
  "dependencies": [

  ]
}
