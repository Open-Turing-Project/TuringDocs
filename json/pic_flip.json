{
  "title": "Pic.Flip",
  "fileName": "pic_flip",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Pic.Flip</b> (<i>picID</i> : <b>int</b>) : <b>int</b><p></p></font>",
      "text_content": "Pic.Flip (picID : int) : int\r\n    ",
      "mdown_content": "**Pic.Flip** (_picID_ : **int**) : **int**"
    },
    {
      "title": "Description",
      "raw_content": "<b>Pic.Flip</b> is used to create a new picture by flipping the \r\n          picture vertically. The resulting picture is exactly the same size \r\n\t  as the original, except it appears &#147;upside-down&#148;. <p>\r\n    </p>",
      "text_content": "Pic.Flip is used to create a new picture by flipping the \r\n          picture vertically. The resulting picture is exactly the same size \r\n\t  as the original, except it appears upside-down. \r\n    ",
      "mdown_content": "**Pic.Flip** is used to create a new picture by flipping the picture vertically. The resulting picture is exactly the same size as the original, except it appears &#147;upside-down&#148;. \n"
    },
    {
      "title": "Details",
      "raw_content": "Note that the upside-down picture is a newly created picture. When \r\n          it is no longer needed, its memory should be released by using \r\n\t  <b>Pic.Free</b>.<p>\r\n    </p>",
      "text_content": "Note that the upside-down picture is a newly created picture. When \r\n          it is no longer needed, its memory should be released by using \r\n\t  Pic.Free.\r\n    ",
      "mdown_content": "Note that the upside-down picture is a newly created picture. When it is no longer needed, its memory should be released by using **Pic.Free**.\n"
    },
    {
      "title": "Example",
      "code": [
        "        % Get the original picture\r\n        var pic, newPic, width, height : int\r\n        pic := Pic.FileNew (\"lighthouse.jpg\")\r\n        newPic := Pic.Flip (pic)\r\n        width := Pic.Width (pic)\r\n        height := Pic.Height (pic)\r\n        \r\n        % Draw the two images: original and flipped\r\n        View.Set (\"graphics:\" + intstr (2 * width + 30) + \";\" + \r\n            intstr (height + 25) + \",nobuttonbar\")\r\n        Pic.Draw (pic, 10, 20, picCopy)\r\n        Draw.Text (\"Original\", 50, 5, defFontID, black)\r\n        Pic.Draw (newPic, 20 + Pic.Width (pic), 20, picCopy)\r\n        Draw.Text (\"Flipped\", 60 + Pic.Width (pic), 5, defFontID, black) \r\n        "
      ],
      "images": [
        "pic_flip01.gif"
      ],
      "raw_content": "The program loads a picture from a file, flips it and then draws \r\n          the original and the upside-down image side by side in a window \r\n\t  after resizing the window to fit the two pictures.<p>\r\n</p>\r\n          <center><img src=\"pic_flip01.gif\"></center>\r\n\t  <center><b>Output from the Program</b></center>\n<p>\r\n    </p>",
      "text_content": "The program loads a picture from a file, flips it and then draws \r\n          the original and the upside-down image side by side in a window \r\n\t  after resizing the window to fit the two pictures.\r\n\r\n          \r\n\t  Output from the Program\r\n    ",
      "mdown_content": "The program loads a picture from a file, flips it and then draws the original and the upside-down image side by side in a window after resizing the window to fit the two pictures.\n\n\n\n![Doc Image](pic_flip01.gif)\n\n**Output from the Program**\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Pic.Flip Example",
          "file": "Pic.Flip.t"
        }
      ]
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\n\t  This means that you can only call the function by calling \r\n\t  <b>Pic.Flip</b>, not by calling <b>Flip</b>.</p>\n<p>\r\n    </p>",
      "text_content": "Exported qualified.\r\n\t  This means that you can only call the function by calling \r\n\t  Pic.Flip, not by calling Flip.\r\n    ",
      "mdown_content": "Exported qualified.\n\nThis means that you can only call the function by calling **Pic.Flip**, not by calling **Flip**.\n"
    }
  ],
  "dependencies": [
    "pic_flip01.gif"
  ]
}
