{
  "title": "string",
  "fileName": "string1",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>stringType</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>string</b> [ ( <i>maximumLength</i> ) ]</font></td>\n</tr></table>\n<p></p>",
      "text_content": " A stringType is:\r\nÂ string [ ( maximumLength ) ]",
      "mdown_content": "A _stringType_ is:   **string** [ ( _maximumLength_ ) ]"
    },
    {
      "title": "Description",
      "raw_content": "Each variable whose type is a <i>stringType</i> can contain a sequence (a string ) of characters. The length of this sequence must not exceed the <i>stringType'</i>s maximum length.<p>\r\n</p>",
      "text_content": " Each variable whose type is a stringType can contain a sequence (a string ) of characters. The length of this sequence must not exceed the stringType's maximum length.\r\n",
      "mdown_content": "Each variable whose type is a _stringType_ can contain a sequence (a string ) of characters. The length of this sequence must not exceed the _stringType'_s maximum length.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var name : string\r\n        name := \"Nancy\"\r\n        var licenceNumber : string ( 6 )\r\n        licenceNumber := \"175AJN\""
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": "\n"
    },
    {
      "title": "Details",
      "code": [
        "        procedure deblank (var s : string (*) )."
      ],
      "raw_content": "Strings can be assigned and they can be compared for both equality and for ordering. See also <i>string comparison </i>and <i>assignment statement</i>.<p>\r\nStrings can be catenated (joined together) using the + operator and separated into substrings. See<i> catenation </i>and<i> substring</i>. String functions are provided to find the length of a string, to find where one string appears inside another, and to make repeated copies of a string all joined together. See <i>length</i>, <i>index</i>, and <i>repeat</i>.</p>\n<p>\r\nA string type written without a maximum length is limited to holding a maximum of 255 characters.</p>\n<p>\r\nThe <i>maximumLength</i> of a string, if given as a part of the type, must be known at compile time, and must be at least 1 and at most 255. The maximum length of a string is given by <i>upper</i>, for example, <i>upper</i>(<i>licenceNumber</i>) is 6. See also <i>upper</i>.</p>\n<p>\r\nIn the declaration of a string that is a <b>var</b> formal parameter of a procedure or function, the <i>maximumLength </i>can be written as an asterisk (*). Here, the maximum length is taken to be that of the corresponding actual parameter, as in:</p>\n<p>\r\n</p>\r\nThe star can also be used when the parameter is an array of strings.<p>\r\n</p>",
      "text_content": " Strings can be assigned and they can be compared for both equality and for ordering. See also string comparison and assignment statement.\r\nStrings can be catenated (joined together) using the + operator and separated into substrings. See catenation and substring. String functions are provided to find the length of a string, to find where one string appears inside another, and to make repeated copies of a string all joined together. See length, index, and repeat.\r\nA string type written without a maximum length is limited to holding a maximum of 255 characters.\r\nThe maximumLength of a string, if given as a part of the type, must be known at compile time, and must be at least 1 and at most 255. The maximum length of a string is given by upper, for example, upper(licenceNumber) is 6. See also upper.\r\nIn the declaration of a string that is a var formal parameter of a procedure or function, the maximumLength can be written as an asterisk (*). Here, the maximum length is taken to be that of the corresponding actual parameter, as in:\r\n\r\nThe star can also be used when the parameter is an array of strings.\r\n",
      "mdown_content": "Strings can be assigned and they can be compared for both equality and for ordering. See also _string comparison_ and _assignment statement_.\n\nStrings can be catenated (joined together) using the + operator and separated into substrings. See _catenation_ and _substring_. String functions are provided to find the length of a string, to find where one string appears inside another, and to make repeated copies of a string all joined together. See _length_, _index_, and _repeat_.\n\nA string type written without a maximum length is limited to holding a maximum of 255 characters.\n\nThe _maximumLength_ of a string, if given as a part of the type, must be known at compile time, and must be at least 1 and at most 255. The maximum length of a string is given by _upper_, for example, _upper_(_licenceNumber_) is 6. See also _upper_.\n\nIn the declaration of a string that is a **var** formal parameter of a procedure or function, the _maximumLength_ can be written as an asterisk (*). Here, the maximum length is taken to be that of the corresponding actual parameter, as in:\n\nThe star can also be used when the parameter is an array of strings.\n"
    },
    {
      "title": "See also",
      "links": [
        "char",
        "char"
      ],
      "raw_content": "<i>explicitStringConstants</i> for exact rules for writing string values such as \"Nancy\". See also <b><a href=\"char.html\">char</a></b>(<i>n</i>) and <b><a href=\"char.html\">char</a></b> types.<p>\r\n</p>",
      "text_content": " explicitStringConstants for exact rules for writing string values such as \"Nancy\". See also char(n) and char types.\r\n",
      "mdown_content": "_explicitStringConstants_ for exact rules for writing string values such as \"Nancy\". See also **[char](char.html)**(_n_) and **[char](char.html)** types.\n"
    }
  ],
  "dependencies": [

  ]
}
