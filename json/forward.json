{
  "title": "forward",
  "fileName": "forward",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>forwardDeclaration</i> is:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>forward</b> <i>subprogramHeader</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"7\"><font size=\"+1\">[ <b>import</b> <i>importItem</i> {, <i>importItem</i> } ]</font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A forwardDeclaration is:\r\n forward subprogramHeader  [ import importItem {, importItem } ]",
      "mdown_content": "A _forwardDeclaration_ is:   **forward** _subprogramHeader_     [ **import** _importItem_ {, _importItem_ } ]"
    },
    {
      "title": "Description",
      "raw_content": "A procedure or function is declared to be <b>forward</b> when you want to define its header but not its body. This is the case when one procedure or function calls another, which in turn calls the first; this situation is called <i>mutual recursion</i>. The use of <b>forward</b> is necessary in this case, because every item must be declared before it can be used.<p>\r\n</p>",
      "text_content": " A procedure or function is declared to be forward when you want to define its header but not its body. This is the case when one procedure or function calls another, which in turn calls the first; this situation is called mutual recursion. The use of forward is necessary in this case, because every item must be declared before it can be used.\r\n",
      "mdown_content": "A procedure or function is declared to be **forward** when you want to define its header but not its body. This is the case when one procedure or function calls another, which in turn calls the first; this situation is called _mutual recursion_. The use of **forward** is necessary in this case, because every item must be declared before it can be used.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var token : string\r\n        \r\n        forward procedure expn ( var eValue : real )\r\n        \r\n        forward procedure term ( var tValue : real )\r\n        \r\n        forward procedure primary ( var pValue: real )\r\n        \r\n        body procedure expn\r\n            var nextValue : real\r\n            term ( eValue )         % Evaluate t\r\n            loop                    % Evaluate { + t}\r\n                exit when token not= \"+\"\r\n                get token\r\n                term ( nextValue )\r\n                eValue := eValue + nextValue\r\n            end loop\r\n        end expn\r\n        \r\n        body procedure term\r\n            var nextValue : real\r\n            primary (tValue )       % Evaluate p\r\n            loop                    % Evaluate { * p}\r\n                exit when token not= \"*\"\r\n                get token\r\n                primary ( nextValue )\r\n                tValue := tValue * nextValue\r\n            end loop\r\n        end term\r\n        body procedure primary\r\n            if token = \"(\" then\r\n                get token\r\n                expn ( pValue )     % Evaluate (e)\r\n                assert token = \")\"\r\n            else                    % Evaluate \"explicit real\"\r\n                pValue := strreal ( token )\r\n            end if\r\n            get token\r\n        end primary\r\n        \r\n        get token               % Start by reading first token\r\n        var answer : real\r\n        expn ( answer )         % Scan and evaluate input expression\r\n        put \"Answer is \", answer"
      ],
      "raw_content": "This example program evaluates an input expression <i>e</i> of the form <i>t</i> { + <i>t </i>} where t is of the form <i>p</i> { * <i>p </i>} and <i>p </i>is of the form (<i>e </i>) or an explicit real expression. For example, the value of 1.5 + 3.0 * (0.5 + 1.5) halt is 7.5.<p>\r\n</p>",
      "text_content": " This example program evaluates an input expression e of the form t { + t } where t is of the form p { * p } and p is of the form (e ) or an explicit real expression. For example, the value of 1.5 + 3.0 * (0.5 + 1.5) halt is 7.5.\r\n\r\n",
      "mdown_content": "This example program evaluates an input expression _e_ of the form _t_ { + _t_ } where t is of the form _p_ { * _p_ } and _p_ is of the form (_e_ ) or an explicit real expression. For example, the value of 1.5 + 3.0 * (0.5 + 1.5) halt is 7.5.\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Expression Evaluator Example",
          "file": "ExpressionEvaluator.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "Following a <b>forward</b> procedure or function declaration, the <b>body</b> of the procedure must be given at the same level (in the same sequence of statements and declarations as the <b>forward</b> declaration). This is the only use of the keyword <b>body</b>. See also <b>body</b>.<p>\r\nAny procedure or function that is declared using <b>forward</b> requires an <b>import</b> list. In this list, imported procedures or functions that have not yet appeared must be listed as <b>forward</b>. For example, the import list for <i>expn </i>is <b>import</b> <b>forward</b> <i>term</i> &#133; Before a procedure or function can be called, before its body appears, and before it can be passed as a parameter, its header as well as headers of procedures or functions imported directly or indirectly by it must have appeared.</p>\n<p>\r\nThe keyword <b>forward</b> is also used in <b>collection</b> and <b>type</b> declarations. </p>\n<p>\r\n</p>",
      "text_content": " Following a forward procedure or function declaration, the body of the procedure must be given at the same level (in the same sequence of statements and declarations as the forward declaration). This is the only use of the keyword body. See also body.\r\nAny procedure or function that is declared using forward requires an import list. In this list, imported procedures or functions that have not yet appeared must be listed as forward. For example, the import list for expn is import forward term  Before a procedure or function can be called, before its body appears, and before it can be passed as a parameter, its header as well as headers of procedures or functions imported directly or indirectly by it must have appeared.\r\nThe keyword forward is also used in collection and type declarations. \r\n",
      "mdown_content": "Following a **forward** procedure or function declaration, the **body** of the procedure must be given at the same level (in the same sequence of statements and declarations as the **forward** declaration). This is the only use of the keyword **body**. See also **body**.\n\nAny procedure or function that is declared using **forward** requires an **import** list. In this list, imported procedures or functions that have not yet appeared must be listed as **forward**. For example, the import list for _expn_ is **import** **forward** _term_ &#133; Before a procedure or function can be called, before its body appears, and before it can be passed as a parameter, its header as well as headers of procedures or functions imported directly or indirectly by it must have appeared.\n\nThe keyword **forward** is also used in **collection** and **type** declarations. \n"
    },
    {
      "title": "See also",
      "links": [
        "collection",
        "type"
      ],
      "raw_content": "<b><a href=\"collection.html\">collection</a></b> and <b><a href=\"type.html\">type</a></b> declarations.<p>\r\n</p>",
      "text_content": " collection and type declarations.\r\n",
      "mdown_content": "**[collection](collection.html)** and **[type](type.html)** declarations.\n"
    }
  ],
  "dependencies": [

  ]
}
