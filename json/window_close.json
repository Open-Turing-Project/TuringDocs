{
  "title": "Window.Close",
  "fileName": "window_close",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Window.Close </b>(<i>windowID</i> : <b>int</b>)<p>\r\n</p></font>",
      "text_content": " Window.Close (windowID : int)\r\n",
      "mdown_content": "**Window.Close **(*windowID* : **int**)"
    },
    {
      "title": "Description",
      "raw_content": "The <b>Window.Close </b> procedure closes the window specified by the <i>windowID</i> parameter.<p>\r\n</p>",
      "text_content": " The Window.Close  procedure closes the window specified by the windowID parameter.\r\n",
      "mdown_content": "The **Window.Close ** procedure closes the window specified by the *windowID* parameter."
    },
    {
      "title": "Example",
      "code": [
        "        % Open the window\r\n        var winID : int\r\n        winID := Window.Open (\"position:300;300,graphics:200;200\")\r\n        \r\n        % Draw the random ovals in the box\r\n        var x, y, clr : int\r\n        for : 1 .. 20\r\n            x := Rand.Int (0, maxx)     % Random x\r\n            y := Rand.Int (0, maxy)     % Random y\r\n            clr := Rand.Int (0, maxcolor)   % Random color\r\n            Draw.FillOval (x, y, 30, 30, clr)\r\n        end for\r\n        \r\n        var ch : char := getchar            % Wait for input\r\n        \r\n        Window.Close (winID)            % Close the window"
      ],
      "raw_content": "The following program opens a window, makes it active and then closes the window after getting a keystroke from the user.<p>\r\n</p>",
      "text_content": " The following program opens a window, makes it active and then closes the window after getting a keystroke from the user.\r\n\r\n",
      "mdown_content": "The following program opens a window, makes it active and then closes the window after getting a keystroke from the user."
    },
    {
      "title": "Details",
      "raw_content": "If a window is selected (i.e. output is going to that window) when it is closed, the main <b>Run</b> window becomes the selected window.<p>\r\n</p>",
      "text_content": " If a window is selected (i.e. output is going to that window) when it is closed, the main Run window becomes the selected window.\r\n",
      "mdown_content": "If a window is selected (i.e. output is going to that window) when it is closed, the main **Run** window becomes the selected window."
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>Window.Close</b>, not by calling <b>Close</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling Window.Close, not by calling Close.\r\n",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **Window.Close**, not by calling **Close**."
    },
    {
      "title": "See also",
      "links": [
        "window_open",
        "window_select"
      ],
      "raw_content": "<b><a href=\"window_open.html\">Window.Open</a></b> and <b><a href=\"window_select.html\">Window.Select</a></b>.<p>\r\n</p>",
      "text_content": " Window.Open and Window.Select.\r\n",
      "mdown_content": "**[window_open.html](Window.Open)** and **[window_select.html](Window.Select)**."
    }
  ],
  "dependencies": [

  ]
}
