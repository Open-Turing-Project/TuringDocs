{
  "title": "Text.Color",
  "fileName": "text_color",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Text.Color</b> ( <i>Color</i> : <b>int</b> )<p>\r\n</p></font>",
      "text_content": " Text.Color ( Color : int )\r\n",
      "mdown_content": "**Text.Color** ( _Color_ : **int** )\n"
    },
    {
      "title": "Description",
      "raw_content": "The <b>Text.Color</b> procedure is used to change the currently-active color. This is the color of characters that are to be <b>put</b> on the screen. The alternate spelling is <b>Text.Colour</b>.<p>\r\n</p>",
      "text_content": " The Text.Color procedure is used to change the currently-active color. This is the color of characters that are to be put on the screen. The alternate spelling is Text.Colour.\r\n",
      "mdown_content": "The **Text.Color** procedure is used to change the currently-active color. This is the color of characters that are to be **put** on the screen. The alternate spelling is **Text.Colour**.\n"
    },
    {
      "title": "Example",
      "code": [
        "        View.Set ( \"graphics\" )\r\n        for i : 1 .. 3\r\n            Text.Color ( i )\r\n            put \"Bravo\"\r\n        end for"
      ],
      "raw_content": "This program prints out the message \"Bravo\" three times, each in a different color.<p>\r\n</p>",
      "text_content": " This program prints out the message \"Bravo\" three times, each in a different color.\r\n\r\n",
      "mdown_content": "This program prints out the message \"Bravo\" three times, each in a different color.\n"
    },
    {
      "title": "Example",
      "code": [
        "        View.Set ( \"screen\" )\r\n        const message := \"Happy New Year!!\"\r\n        for i : 1 .. length ( message )\r\n            Text.Color ( i mod maxcolor + 1 )\r\n            put message ( i ) ..\r\n        end for"
      ],
      "raw_content": "This program prints out a message. The color of each letter is different from the preceding letter. For letter number <i>i</i> the color number is <i>i </i>mod maxcolor + 1. This cycles repeatedly through all the available colors.<p>\r\n</p>",
      "text_content": " This program prints out a message. The color of each letter is different from the preceding letter. For letter number i the color number is i mod maxcolor + 1. This cycles repeatedly through all the available colors.\r\n\r\n",
      "mdown_content": "This program prints out a message. The color of each letter is different from the preceding letter. For letter number _i_ the color number is _i_ mod maxcolor + 1. This cycles repeatedly through all the available colors.\n"
    },
    {
      "title": "Details",
      "raw_content": "In \"<i>screen</i>\" mode on the IBM PC, the color specified can actually range from 0 - 31. The upper 16 colors (16-31) are the same as the lower 16, except that they blink.<p>\r\nSee <b>View.Set</b> for the number of colors available in the various \"<i>graphics</i>\"<i> </i>modes.</p>\n<p>\r\nThe screen should be in a \"<i>screen</i>\" or \"<i>graphics</i>\" mode. If the screen mode has not been set, it will automatically be set to \"<i>screen</i>\" mode. See <b>View.Set </b>for details.</p>\n<p>\r\n</p>",
      "text_content": " In \"screen\" mode on the IBM PC, the color specified can actually range from 0 - 31. The upper 16 colors (16-31) are the same as the lower 16, except that they blink.\r\nSee View.Set for the number of colors available in the various \"graphics\" modes.\r\nThe screen should be in a \"screen\" or \"graphics\" mode. If the screen mode has not been set, it will automatically be set to \"screen\" mode. See View.Set for details.\r\n",
      "mdown_content": "In \"_screen_\" mode on the IBM PC, the color specified can actually range from 0 - 31. The upper 16 colors (16-31) are the same as the lower 16, except that they blink.\n\nSee **View.Set** for the number of colors available in the various \"_graphics_\" modes.\n\nThe screen should be in a \"_screen_\" or \"_graphics_\" mode. If the screen mode has not been set, it will automatically be set to \"_screen_\" mode. See **View.Set** for details.\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>Text.Color</b>, not by calling <b>Color</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling Text.Color, not by calling Color.\r\n",
      "mdown_content": "Exported qualified.\n\nThis means that you can only call the function by calling **Text.Color**, not by calling **Color**.\n"
    },
    {
      "title": "See also",
      "links": [
        "text_colorback",
        "text_whatcolor",
        "view_maxcolor"
      ],
      "raw_content": "<b><a href=\"text_colorback.html\">Text.ColorBack</a></b>, <b><a href=\"text_whatcolor.html\">Text.WhatColor</a></b>, <b>Text.WhatChar</b> and <b><a href=\"view_maxcolor.html\">View.maxcolor</a></b>.<p>\r\n</p>",
      "text_content": " Text.ColorBack, Text.WhatColor, Text.WhatChar and View.maxcolor.\r\n",
      "mdown_content": "**[text_colorback.html](Text.ColorBack)**, **[text_whatcolor.html](Text.WhatColor)**, **Text.WhatChar** and **[view_maxcolor.html](View.maxcolor)**.\n"
    }
  ],
  "dependencies": [

  ]
}
