{
  "title": "Input.KeyDown",
  "fileName": "input_keydown",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>Input.KeyDown</b> (<b>var</b> <i>chars</i> : <b>array char of boolean</b>)<p>\r\n</p></font>",
      "text_content": " Input.KeyDown (var chars : array char of boolean)\r\n",
      "mdown_content": "**Input.KeyDown** (**var** _chars_ : **array char of boolean**)"
    },
    {
      "title": "Description",
      "raw_content": "The <b>Input.Keydown</b> procedure allows a program to read which keys are currently being pressed. This procedure is different from <b>getch</b> in that it allows a program to detect when a user presses and releases a button. As such, it is not to be used in conjunction with <b>getch</b>.<p>\r\nThe procedure can be used in games where an action takes place while a key is depressed.</p>\n<p>\r\n</p>",
      "text_content": " The Input.Keydown procedure allows a program to read which keys are currently being pressed. This procedure is different from getch in that it allows a program to detect when a user presses and releases a button. As such, it is not to be used in conjunction with getch.\r\nThe procedure can be used in games where an action takes place while a key is depressed.\r\n",
      "mdown_content": "The **Input.Keydown** procedure allows a program to read which keys are currently being pressed. This procedure is different from **getch** in that it allows a program to detect when a user presses and releases a button. As such, it is not to be used in conjunction with **getch**.\n\nThe procedure can be used in games where an action takes place while a key is depressed.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var chars : array char of boolean\r\n        Input.KeyDown (chars)\r\n        if chars ('t') then\r\n            put \"The T key is pressed\"\r\n        end if"
      ],
      "raw_content": "Determine if the T key is pressed. Note that we check for the lower case letter.<p>\r\n</p>",
      "text_content": " Determine if the T key is pressed. Note that we check for the lower case letter.\r\n\r\n",
      "mdown_content": "Determine if the T key is pressed. Note that we check for the lower case letter.\n"
    },
    {
      "title": "Details",
      "raw_content": "The array returned is a list of all the characters. A key is currently pressed if the array element with the corresponding character is <b>true.</b> For example, the <i>a</i> key is pressed is <i>chars</i> ('a') is <b>true</b>. Note that each key is individually represented, so if the user has pressed Shift+a to get a 'A', then <b>Input.KeyDown</b> would register Shift and 'a' as pressed, but not 'A'.<p>\r\nA full list of all the possible characters that can be set with Input.KeyDown can be found in the <b>Key Codes</b> appendix.</p>\n<p>\r\n</p>",
      "text_content": " The array returned is a list of all the characters. A key is currently pressed if the array element with the corresponding character is true. For example, the a key is pressed is chars ('a') is true. Note that each key is individually represented, so if the user has pressed Shift+a to get a 'A', then Input.KeyDown would register Shift and 'a' as pressed, but not 'A'.\r\nA full list of all the possible characters that can be set with Input.KeyDown can be found in the Key Codes appendix.\r\n",
      "mdown_content": "The array returned is a list of all the characters. A key is currently pressed if the array element with the corresponding character is **true.** For example, the _a_ key is pressed is _chars_ ('a') is **true**. Note that each key is individually represented, so if the user has pressed Shift+a to get a 'A', then **Input.KeyDown** would register Shift and 'a' as pressed, but not 'A'.\n\nA full list of all the possible characters that can be set with Input.KeyDown can be found in the **Key Codes** appendix.\n"
    },
    {
      "title": "Details",
      "raw_content": "The array returned is a list of all the characters. A key is currently pressed if the array element with the corresponding character is <b>true.</b> For example, the <i>a</i> key is pressed is <i>chars</i> ('a') is <b>true</b>. Note that each key is individually represented, so if the user has pressed Shift+a to get a 'A', then <b>Input.KeyDown</b> would register Shift and 'a' as pressed, but not 'A'.<p>\r\n</p>",
      "text_content": " The array returned is a list of all the characters. A key is currently pressed if the array element with the corresponding character is true. For example, the a key is pressed is chars ('a') is true. Note that each key is individually represented, so if the user has pressed Shift+a to get a 'A', then Input.KeyDown would register Shift and 'a' as pressed, but not 'A'.\r\n",
      "mdown_content": "The array returned is a list of all the characters. A key is currently pressed if the array element with the corresponding character is **true.** For example, the _a_ key is pressed is _chars_ ('a') is **true**. Note that each key is individually represented, so if the user has pressed Shift+a to get a 'A', then **Input.KeyDown** would register Shift and 'a' as pressed, but not 'A'.\n"
    },
    {
      "title": "Details",
      "raw_content": "The number of keys that can be pressed simultaneously is hardware dependent. Most keyboards can detect a minimum of two keys + Shift + Control + Alt. This means that if you are designing a two player game to be played at a single keyboard and you wish to make certain that players cannot &#147;hog the keyboard&#148; by holding down keys, you should not use more than 6 different keys and three of them should be the Shift, Control and Alt keys.<p>\r\n</p>",
      "text_content": " The number of keys that can be pressed simultaneously is hardware dependent. Most keyboards can detect a minimum of two keys + Shift + Control + Alt. This means that if you are designing a two player game to be played at a single keyboard and you wish to make certain that players cannot hog the keyboard by holding down keys, you should not use more than 6 different keys and three of them should be the Shift, Control and Alt keys.\r\n",
      "mdown_content": "The number of keys that can be pressed simultaneously is hardware dependent. Most keyboards can detect a minimum of two keys + Shift + Control + Alt. This means that if you are designing a two player game to be played at a single keyboard and you wish to make certain that players cannot &#147;hog the keyboard&#148; by holding down keys, you should not use more than 6 different keys and three of them should be the Shift, Control and Alt keys.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var chars : array char of boolean\r\n        loop\r\n            Input.KeyDown (chars)\r\n            locate (1, 1)\r\n            if chars (KEY_UP_ARROW) then\r\n                put \"Up Arrow Pressed  \" ..\r\n            else\r\n                put \"                  \" ..\r\n            end if\r\n            if chars (KEY_RIGHT_ARROW) then\r\n                put \"Right Arrow Pressed  \" ..\r\n            else\r\n                put \"                     \" ..\r\n            end if\r\n            if chars (KEY_LEFT_ARROW) then\r\n                put \"Left Arrow Pressed  \" ..\r\n            else\r\n                put \"                    \" ..\r\n            end if\r\n            if chars (KEY_DOWN_ARROW) then\r\n                put \"Down Arrow Pressed  \" ..\r\n            else\r\n                put \"                  \" ..\r\n            end if\r\n        end loop"
      ],
      "raw_content": "The program reads the keyboard and displays a message while the arrow keys are pressed. It can detect up to all four arrow keys pressed at once.<p>\r\n</p>\n<p>\r\n    </p>",
      "text_content": " The program reads the keyboard and displays a message while the arrow keys are pressed. It can detect up to all four arrow keys pressed at once.\r\n\r\n    ",
      "mdown_content": "The program reads the keyboard and displays a message while the arrow keys are pressed. It can detect up to all four arrow keys pressed at once.\n\n\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "Input.KeyDown Example",
          "file": "Input.KeyDown.t"
        }
      ]
    },
    {
      "title": "Example",
      "raw_content": "Another example is available that checks for all possible keys.<p>\r\n          <object id=\"launch\" type=\"application/x-oleobject\" classid=\"clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11\" width=\"120\" height=\"40\">\r\n            <param name=\"Command\" value=\"TCard\">\n<param name=\"Button\" value=\"Text: Launch Example Program\">\n<param name=\"Item1\" value=\"-1,Input.KeyDown2.t;Input.KeyDown Example\"></object></p>\n<p></p>",
      "text_content": "Another example is available that checks for all possible keys.\r\n          \r\n            ",
      "mdown_content": "Another example is available that checks for all possible keys.\n\n\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>Input.KeyDown</b>, not by calling <b>KeyDown</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling Input.KeyDown, not by calling KeyDown.\r\n",
      "mdown_content": "Exported qualified.\n\nThis means that you can only call the function by calling **Input.KeyDown**, not by calling **KeyDown**.\n"
    }
  ],
  "dependencies": [

  ]
}
