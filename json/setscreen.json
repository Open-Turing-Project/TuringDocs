{
  "title": "setscreen",
  "fileName": "setscreen",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>setscreen</b> ( <i>s</i> : <b>string</b> )<p></p></font>",
      "text_content": "setscreen ( s : string )\r\n    ",
      "mdown_content": "**setscreen** ( *s* : **string** )"
    },
    {
      "title": "Example",
      "code": [
        "        setscreen ( \"graphics\" )            % Enter graphics mode\r\n        setscreen ( \"graphics:400;300\" )    % Change window to 400x300\r\n        setscreen ( \"nocursor\" )            % Turn off cursor\r\n        setscreen ( \"noecho\" )          % Do not echo keys"
      ],
      "raw_content": "Here are example uses of the <b>setscreen</b> procedure. In many \r\n          cases, these will appear as the first statement of the program. \r\n          They can, however,  appear any place in a program.<p>\r\n</p>",
      "text_content": "Here are example uses of the setscreen procedure. In many \r\n          cases, these will appear as the first statement of the program. \r\n          They can, however,  appear any place in a program.\r\n\r\n    ",
      "mdown_content": "Here are example uses of the **setscreen** procedure. In many cases, these will appear as the first statement of the program. They can, however,  appear any place in a program."
    },
    {
      "title": "Description",
      "raw_content": "The <b>setscreen</b> statement is used to change the mode of the \r\n          screen, as well as the way in which Turing does input and output. \r\n          The parameter to <b>setscreen</b> is a string, such as \"graphics\". \r\n          The string contains one or more options separated by commas, such \r\n          as \"text, noecho\".<p>\r\n    </p>",
      "text_content": "The setscreen statement is used to change the mode of the \r\n          screen, as well as the way in which Turing does input and output. \r\n          The parameter to setscreen is a string, such as \"graphics\". \r\n          The string contains one or more options separated by commas, such \r\n          as \"text, noecho\".\r\n    ",
      "mdown_content": "The **setscreen** statement is used to change the mode of the screen, as well as the way in which Turing does input and output. The parameter to **setscreen** is a string, such as \"graphics\". The string contains one or more options separated by commas, such as \"text, noecho\"."
    },
    {
      "title": "Details",
      "raw_content": "Users should look at <b>View.Set</b> in order to find out the \r\n          implementation specified details of <b>setscreen</b> on their \r\n          systems.<p>\r\n          There are two screen modes, <b>text</b> and <b>graphics</b>. In \r\n          <b>text</b> mode, output to the window is only allowed using \r\n          <b>put</b> and <b>get</b>. Attempting to use graphics or moving \r\n          the cursor using <b>locate</b> will result in an error. However, \r\n          a window in <b>text</b> mode will keep all text output sent to it. \r\n          Any output that scrolls off the edge of the window can be read by \r\n          adjusting the scroll bars of the window. Printing a <b>text</b> \r\n          output window prints all the output sent to the window, not just \r\n          the output currently visible in the window. Programs often use \r\n          <b>text</b> mode when they are displaying large amounts of text \r\n          data that the user may wish to view or print later. Saving the \r\n          contents of a <b>text</b> output window creates a text file \r\n          containing all the output sent to the window.</p>\n<p>\r\n\t  In <b>graphics</b> mode, a program can use both <b>put</b> and \r\n\t  <b>get</b>, <b>locate</b> and graphics commands to send output \r\n\t  to the window. However, any output that scrolls off the window \r\n\t  is lost. Printing the window outputs the current contents of the \r\n\t  window. Saving a <b>graphics</b> output window saves the current \r\n\t  contents of the window as a BMP file.</p>\n<p>\r\n\t  Where the options to <b>setscreen</b> are mutually exclusive, \r\n\t  they are listed here with the default underlined. Here are the \r\n\t  options:</p>\n<p>\r\n\t  \"<b>graphics</b>\", \"<b>text</b>\",  Sets the mode of the \r\n\t  window to the given mode. A size can for the window can be specified \r\n\t  at the same time. If the window mode or size changes, then the \r\n\t  window will be cleared.</p>\n<p>\r\n\t  To specify the size of a window in <b>graphics</b> mode, the \r\n\t  <b>graphics</b> can have a modifier in the form \r\n\t  \"graphics:&lt;<i>width</i>&gt;;&lt;<i>height</i>&gt;\". This sets \r\n\t  the window to be &lt;<i>width</i>&gt; pixels by &lt;<i>height</i>&gt; \r\n\t  pixels in size. The maximum size of a window is the size of the \r\n\t  screen.</p>\n<p>\r\n\t  To specify the size of a window in <b>text</b> mode, the \r\n\t  <b>text</b> can have a modifier in the form \r\n\t  \"text:&lt;<i>rows</i>&gt;;&lt;<i>columns</i>&gt;\". This sets the \r\n\t  window to be &lt;<i>rows</i>&gt; text lines in height by \r\n\t  &lt;<i>columns</i>&gt; characters in width. The maximum size of a \r\n\t  window is the size of the screen.</p>\n<p>\r\n\t  To set a window to the maximum size available on the screen, you \r\n\t  can use \"max\" for the &lt;<i>width</i>&gt;, &lt;<i>height</i>&gt;, \r\n\t  &lt;<i>rows</i>&gt; or &lt;<i>columns</i>&gt; parameters.</p>\n<p>\r\n\t  \"<b><u>cursor</u></b>\", \"<b>nocursor</b>\"  Causes the cursor to be shown \r\n\t  (or hidden). The cursor only appears when the program is waiting for \r\n\t  keyboard input from the user.</p>\n<p>\r\n\t  \"<b><u>echo</u></b>\", \"<b>noecho</b>\"  Causes (or suppresses) echoing of \r\n\t  characters that are typed. Echoing is commonly turned off in \r\n\t  interactive programs to keep typed characters from being echoed \r\n\t  at inappropriate places on the screen.</p>\n<p>\r\n\t  \"<b><u>nooffscreenonly</u></b>\", \"<b>offscreenonly</b>\"  Causes or \r\n\t  (suppresses) output from being sent to the visible window. When the \r\n\t  <b>offscreenonly</b> option is active, any text and graphics output \r\n\t  is drawn to the offscreen buffer that is maintained for every Run \r\n\t  window but not drawn to the screen. <b>View.Update</b> is then \r\n\t  used to copy the entire contents of the offscreen buffer to the \r\n\t  Run window. By allowing numerous drawing commands to be sent to \r\n\t  the offscreen buffer and then updating the window at one time, it \r\n\t  is possible to get smoother animation.</p>\n<p>\r\n\t  \"<b>msdos</b>\", \"<b><u>nomsdos</u></b>\"  Causes the window to use the\r\n\t  MS-DOS character set (with line drawing characters) instead of the\r\n\t  Windows ANSI character set.  The \"<b>nomsdos</b>\" option causes the\r\n\t  window to use the Windows ANSI character set.  Note that the \r\n\t  \"<b>msdos</b>\" option only works if the Windows font (usually \r\n\t  Courier New) supports it.</p>\n<p>\r\n\t  \"<b><u>buttonbar</u></b>\", \"<b>nobuttonbar</b>\"  Causes or (suppresses) \r\n\t  the display of a button bar at the top of the output window which \r\n\t  allows the user to easily stop program execution or save and print \r\n\t  the output window.</p>\n<p>\r\n    </p>",
      "text_content": "Users should look at View.Set in order to find out the \r\n          implementation specified details of setscreen on their \r\n          systems.\r\n          There are two screen modes, text and graphics. In \r\n          text mode, output to the window is only allowed using \r\n          put and get. Attempting to use graphics or moving \r\n          the cursor using locate will result in an error. However, \r\n          a window in text mode will keep all text output sent to it. \r\n          Any output that scrolls off the edge of the window can be read by \r\n          adjusting the scroll bars of the window. Printing a text \r\n          output window prints all the output sent to the window, not just \r\n          the output currently visible in the window. Programs often use \r\n          text mode when they are displaying large amounts of text \r\n          data that the user may wish to view or print later. Saving the \r\n          contents of a text output window creates a text file \r\n          containing all the output sent to the window.\r\n\t  In graphics mode, a program can use both put and \r\n\t  get, locate and graphics commands to send output \r\n\t  to the window. However, any output that scrolls off the window \r\n\t  is lost. Printing the window outputs the current contents of the \r\n\t  window. Saving a graphics output window saves the current \r\n\t  contents of the window as a BMP file.\r\n\t  Where the options to setscreen are mutually exclusive, \r\n\t  they are listed here with the default underlined. Here are the \r\n\t  options:\r\n\t  \"graphics\", \"text\",  Sets the mode of the \r\n\t  window to the given mode. A size can for the window can be specified \r\n\t  at the same time. If the window mode or size changes, then the \r\n\t  window will be cleared.\r\n\t  To specify the size of a window in graphics mode, the \r\n\t  graphics can have a modifier in the form \r\n\t  \"graphics:<width>;<height>\". This sets \r\n\t  the window to be <width> pixels by <height> \r\n\t  pixels in size. The maximum size of a window is the size of the \r\n\t  screen.\r\n\t  To specify the size of a window in text mode, the \r\n\t  text can have a modifier in the form \r\n\t  \"text:<rows>;<columns>\". This sets the \r\n\t  window to be <rows> text lines in height by \r\n\t  <columns> characters in width. The maximum size of a \r\n\t  window is the size of the screen.\r\n\t  To set a window to the maximum size available on the screen, you \r\n\t  can use \"max\" for the <width>, <height>, \r\n\t  <rows> or <columns> parameters.\r\n\t  \"cursor\", \"nocursor\"  Causes the cursor to be shown \r\n\t  (or hidden). The cursor only appears when the program is waiting for \r\n\t  keyboard input from the user.\r\n\t  \"echo\", \"noecho\"  Causes (or suppresses) echoing of \r\n\t  characters that are typed. Echoing is commonly turned off in \r\n\t  interactive programs to keep typed characters from being echoed \r\n\t  at inappropriate places on the screen.\r\n\t  \"nooffscreenonly\", \"offscreenonly\"  Causes or \r\n\t  (suppresses) output from being sent to the visible window. When the \r\n\t  offscreenonly option is active, any text and graphics output \r\n\t  is drawn to the offscreen buffer that is maintained for every Run \r\n\t  window but not drawn to the screen. View.Update is then \r\n\t  used to copy the entire contents of the offscreen buffer to the \r\n\t  Run window. By allowing numerous drawing commands to be sent to \r\n\t  the offscreen buffer and then updating the window at one time, it \r\n\t  is possible to get smoother animation.\r\n\t  \"msdos\", \"nomsdos\"  Causes the window to use the\r\n\t  MS-DOS character set (with line drawing characters) instead of the\r\n\t  Windows ANSI character set.  The \"nomsdos\" option causes the\r\n\t  window to use the Windows ANSI character set.  Note that the \r\n\t  \"msdos\" option only works if the Windows font (usually \r\n\t  Courier New) supports it.\r\n\t  \"buttonbar\", \"nobuttonbar\"  Causes or (suppresses) \r\n\t  the display of a button bar at the top of the output window which \r\n\t  allows the user to easily stop program execution or save and print \r\n\t  the output window.\r\n    ",
      "mdown_content": "Users should look at **View.Set** in order to find out the implementation specified details of **setscreen** on their systems.\nThere are two screen modes, **text** and **graphics**. In **text** mode, output to the window is only allowed using **put** and **get**. Attempting to use graphics or moving the cursor using **locate** will result in an error. However, a window in **text** mode will keep all text output sent to it. Any output that scrolls off the edge of the window can be read by adjusting the scroll bars of the window. Printing a **text** output window prints all the output sent to the window, not just the output currently visible in the window. Programs often use **text** mode when they are displaying large amounts of text data that the user may wish to view or print later. Saving the contents of a **text** output window creates a text file containing all the output sent to the window.\nIn **graphics** mode, a program can use both **put** and **get**, **locate** and graphics commands to send output to the window. However, any output that scrolls off the window is lost. Printing the window outputs the current contents of the window. Saving a **graphics** output window saves the current contents of the window as a BMP file.\nWhere the options to **setscreen** are mutually exclusive, they are listed here with the default underlined. Here are the options:\n\"**graphics**\", \"**text**\",  Sets the mode of the window to the given mode. A size can for the window can be specified at the same time. If the window mode or size changes, then the window will be cleared.\nTo specify the size of a window in **graphics** mode, the **graphics** can have a modifier in the form \"graphics:<*width*>;<*height*>\". This sets the window to be <*width*> pixels by <*height*> pixels in size. The maximum size of a window is the size of the screen.\nTo specify the size of a window in **text** mode, the **text** can have a modifier in the form \"text:<*rows*>;<*columns*>\". This sets the window to be <*rows*> text lines in height by <*columns*> characters in width. The maximum size of a window is the size of the screen.\nTo set a window to the maximum size available on the screen, you can use \"max\" for the <*width*>, <*height*>, <*rows*> or <*columns*> parameters.\n\"**cursor**\", \"**nocursor**\"  Causes the cursor to be shown (or hidden). The cursor only appears when the program is waiting for keyboard input from the user.\n\"**echo**\", \"**noecho**\"  Causes (or suppresses) echoing of characters that are typed. Echoing is commonly turned off in interactive programs to keep typed characters from being echoed at inappropriate places on the screen.\n\"**nooffscreenonly**\", \"**offscreenonly**\"  Causes or (suppresses) output from being sent to the visible window. When the **offscreenonly** option is active, any text and graphics output is drawn to the offscreen buffer that is maintained for every Run window but not drawn to the screen. **View.Update** is then used to copy the entire contents of the offscreen buffer to the Run window. By allowing numerous drawing commands to be sent to the offscreen buffer and then updating the window at one time, it is possible to get smoother animation.\n\"**msdos**\", \"**nomsdos**\"  Causes the window to use theMS-DOS character set (with line drawing characters) instead of theWindows ANSI character set.  The \"**nomsdos**\" option causes thewindow to use the Windows ANSI character set.  Note that the \"**msdos**\" option only works if the Windows font (usually Courier New) supports it.\n\"**buttonbar**\", \"**nobuttonbar**\"  Causes or (suppresses) the display of a button bar at the top of the output window which allows the user to easily stop program execution or save and print the output window."
    },
    {
      "title": "Example",
      "raw_content": "This program creates a graphics window that is 300 pixels by 100 pixels.<p>\r\n    </p>",
      "text_content": "This program creates a graphics window that is 300 pixels by 100 pixels.\r\n    ",
      "mdown_content": "This program creates a graphics window that is 300 pixels by 100 pixels."
    },
    {
      "title": "See also",
      "links": [
        "drawmodule",
        "view_update",
        "view_set"
      ],
      "raw_content": "the <b><a href=\"drawmodule.html\">Draw</a></b> module, \r\n          the <b>draw&#133;</b> subprograms and the \r\n          <b><a href=\"view_update.html\">View.Update</a></b> procedure \r\n          for doing smooth animation. See also \r\n          <b><a href=\"view_set.html\">View.Set</a></b> for further setscreen \r\n          options including positioning the output window on the screen.<p>\r\n    </p>",
      "text_content": "the Draw module, \r\n          the draw subprograms and the \r\n          View.Update procedure \r\n          for doing smooth animation. See also \r\n          View.Set for further setscreen \r\n          options including positioning the output window on the screen.\r\n    ",
      "mdown_content": "the **[drawmodule.html](Draw)** module, the **draw** subprograms and the **[view_update.html](View.Update)** procedure for doing smooth animation. See also **[view_set.html](View.Set)** for further setscreen options including positioning the output window on the screen."
    }
  ],
  "dependencies": [

  ]
}
