{
  "title": "hasch",
  "fileName": "hasch",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>hasch</b> : <b>boolean</b><p></p></font>",
      "mdown_content": "**hasch** : **boolean**"
    },
    {
      "title": "Description",
      "raw_content": "The <b>hasch</b> procedure is used to determine if there is a \r\n          character that has been typed but not yet been read.<p>\r\n    </p>",
      "mdown_content": "The **hasch** procedure is used to determine if there is a \ncharacter that has been typed but not yet been read.\n"
    },
    {
      "title": "Example",
      "code": [
        "        put \"Press any key to stop the dice rolling\"\r\n        var die1, die2 : int\r\n        var ch : string (1)\r\n        loop\r\n            exit when hasch\r\n            randint (die1, 1, 6)\r\n            randint (die2, 1, 6)\r\n            locate (1, 1)\r\n            put \"You rolled \", die1 + die2\r\n        end loop\r\n            \r\n        getch (ch)    % Discard the character"
      ],
      "raw_content": "This program simulates the rolling of a pair of dice until the\r\n          user pressed the keyboard.<p>\r\n</p>\n<p>\r\n    </p>",
      "mdown_content": "This program simulates the rolling of a pair of dice until the\nuser pressed the keyboard.\n\n\n"
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "hasch Example",
          "file": "hasch.t"
        }
      ]
    },
    {
      "title": "Details",
      "links": [
        "input_flush"
      ],
      "raw_content": "The screen should be in a \"<i>graphics</i>\" mode. See the \r\n          <b>setscreen</b> procedure for details. If the screen is not \r\n          in \"<i>graphics</i>\" mode, it will automatically be set \r\n          to \"<i>graphics</i>\" mode.<p>\r\n          If there is the possibility that there are already keystrokes in the\r\n          keyboard buffer, the <a href=\"input_flush.html\"><b>Input.Flush</b></a>\r\n          command can be used to flush the keyboard buffer (remove all \r\n          keystrokes from the buffer) before entering the loop to check for\r\n          input.</p>\n<p>\r\n    </p>",
      "mdown_content": "The screen should be in a \"*graphics*\" mode. See the \n**setscreen** procedure for details. If the screen is not \nin \"*graphics*\" mode, it will automatically be set \nto \"*graphics*\" mode.\nIf there is the possibility that there are already keystrokes in the\nkeyboard buffer, the [input_flush.html](**Input.Flush**)\ncommand can be used to flush the keyboard buffer (remove all \nkeystrokes from the buffer) before entering the loop to check for\ninput.\n\n"
    },
    {
      "title": "See also",
      "links": [
        "getch",
        "getchar",
        "input_flush",
        "inputmodule"
      ],
      "raw_content": "<b><a href=\"getch.html\">getch</a></b> and \r\n          <b><a href=\"getchar.html\">getchar</a></b>.<p>\r\n          See also the <a href=\"input_flush.html\"><b>Input.Flush</b></a>\r\n          command for flushing the keyboard buffer.</p>\n<p>\r\n          See also predefined unit <b><a href=\"inputmodule.html\">Input</a></b>.</p>\n<p>\r\n    </p>",
      "mdown_content": "**[getch.html](getch)** and \n**[getchar.html](getchar)**.\nSee also the [input_flush.html](**Input.Flush**)\ncommand for flushing the keyboard buffer.\n\nSee also predefined unit **[inputmodule.html](Input)**.\n\n"
    }
  ]
}
