{
  "title": "char",
  "fileName": "char",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>char</b><p>\r\n</p></font>",
      "text_content": " char\r\n",
      "mdown_content": "**char**"
    },
    {
      "title": "Description",
      "raw_content": "Each variable whose type is a <b>char</b> contains a single character, such as the letter <i>A</i>, the digit <i>3</i> or the special character &amp;.<p>\r\n</p>",
      "text_content": " Each variable whose type is a char contains a single character, such as the letter A, the digit 3 or the special character &.\r\n",
      "mdown_content": "Each variable whose type is a **char** contains a single character, such as the letter _A_, the digit _3_ or the special character &."
    },
    {
      "title": "Example",
      "code": [
        "        var c : char\r\n        var counter := 0\r\n        loop\r\n            exit when eof\r\n            get c           % Read a single character\r\n            exit when c = '.'   % Single quotes for char constant\r\n            counter := counter + 1\r\n        end loop\r\n        put counter, \" characters before the period\""
      ],
      "raw_content": "Count characters until a period is found. Character <i>c</i> is read using a <b>get</b> statement and is compared to the explicit character constant '.'.<p>\r\n</p>",
      "text_content": " Count characters until a period is found. Character c is read using a get statement and is compared to the explicit character constant '.'.\r\n\r\n",
      "mdown_content": "Count characters until a period is found. Character _c_ is read using a **get** statement and is compared to the explicit character constant '.'."
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "char Data Type Example",
          "file": "char.t"
        }
      ]
    },
    {
      "title": "Example",
      "code": [
        "        var frequency : array 'A' .. 'Z' of nat\r\n        for d : 'A' .. 'Z'\r\n            frequency (d) := 0\r\n        end for\r\n        loop                % Tabulate use of capital letters\r\n            exit when eof\r\n            var c : char\r\n            get c           % Read one character\r\n            if c >= 'A' and c <= 'Z' then\r\n                frequency (c) := frequency (c) + 1\r\n            end if\r\n        end loop\r\n        for d : 'A' .. 'Z'      % Print frequency of capital letters\r\n            put d, \" \", frequency (d)\r\n        end for"
      ],
      "raw_content": "Count capital letters. This example illustrates the use of the <b>char</b> type as the subscript type for the <i>frequency</i> array, the use of character variable <i>c</i> as a subscript, and the use of <i>d</i> as a <b>for</b> counter that ranges across the letters A to Z.<p>\r\n</p>",
      "text_content": " Count capital letters. This example illustrates the use of the char type as the subscript type for the frequency array, the use of character variable c as a subscript, and the use of d as a for counter that ranges across the letters A to Z.\r\n\r\n",
      "mdown_content": "Count capital letters. This example illustrates the use of the **char** type as the subscript type for the _frequency_ array, the use of character variable _c_ as a subscript, and the use of _d_ as a **for** counter that ranges across the letters A to Z."
    },
    {
      "title": "Execute",
      "executables": [
        {
          "buttontext": "Launch Example Program",
          "name": "char Data Type Example",
          "file": "char2.t"
        }
      ]
    },
    {
      "title": "Details",
      "raw_content": "The type <b>string</b> (or <b>char</b>(<i>n</i>)) is used instead of <b>char</b> when more than one character needs to be stored, such as the string of characters <i>Henry</i>. Unless the program needs to be quite efficient, it is usually easier to use the <b>string</b> type. See also the <b>char</b>(<i>n</i>) type, which always stores exactly<i> n </i>characters.<p>\r\nThe <b>char</b> type differs from the <b>string</b>(1) type in the following way: <b>char</b> always represents exactly one character, while <b>string</b>(1) can represent either the null string or a string containing one character. The <b>char</b> type is similar to the <b>char</b>(1) type in that both contain at most one character.</p>\n<p>\r\nThe <b>char</b> type is an index type and can be used, for example, as subscripts, <b>for</b> ranges and <b>case</b> labels. For example, this declaration</p>\n<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<b>var</b> <i>charCounts</i> : a<b>rray</b> <b>char</b> <b>of</b> <b>int</b>\n</td>\n</tr></table>\n<p>\r\ncreates an array whose subscripts are characters.</p>\n<p>\r\nThe <b>char</b> type is a scalar type, which implies that its parameters are passed by value, instead of by reference (which is the case for <b>char</b>(<i>n</i>) and <b>string</b>).</p>\n<p>\r\nValues of the <b>char</b> type can be assigned and they can be compared for both equality and ordering. Explicit <b>char</b> constants are written as a character surrounded by single quotes, for example, 'A'. For details, including how to write control characters, see <i>explicitCharConstant</i>.</p>\n<p>\r\nCharacters can be read and written by <b>get</b> and <b>put</b> statements.</p>\n<p>\r\nThere are 256 <b>char</b> values, corresponding to the distinct patterns in an 8-bit byte. This allows the patterns <i>eos</i> (internal value 0) and <i>uninitchar</i> (internal value 128) to be <b>char</b> values (these patterns are not allowed in the <b>string</b> type; see the <b>string</b> type). All 256 patterns are used, so there is no pattern left to be the \"uninitialized value\". Uninitialized checking is not done for the <b>char</b> type.</p>\n<p>\r\nThe <b>ord</b> and <b>chr</b> functions convert between the <b>char</b> values and their corresponding numeric representation in a byte. See <b>ord</b> and <b>chr</b>.</p>\n<p>\r\nIn general, you can freely intermix the values of the types <b>char</b>, <b>char</b>(<i>n</i>) and <b>string</b>. This means that catenation (+), comparisons, <b>length</b> and substrings can be applied to any of these types. See <b>char</b>(<i>n</i>) for details about conversions between <b>char</b>, <b>char</b>(<i>n</i>) and <b>string</b>.</p>\n<p>\r\n</p>",
      "text_content": " The type string (or char(n)) is used instead of char when more than one character needs to be stored, such as the string of characters Henry. Unless the program needs to be quite efficient, it is usually easier to use the string type. See also the char(n) type, which always stores exactly n characters.\r\nThe char type differs from the string(1) type in the following way: char always represents exactly one character, while string(1) can represent either the null string or a string containing one character. The char type is similar to the char(1) type in that both contain at most one character.\r\nThe char type is an index type and can be used, for example, as subscripts, for ranges and case labels. For example, this declaration\r\nÂ var charCounts : array char of int\r\ncreates an array whose subscripts are characters.\r\nThe char type is a scalar type, which implies that its parameters are passed by value, instead of by reference (which is the case for char(n) and string).\r\nValues of the char type can be assigned and they can be compared for both equality and ordering. Explicit char constants are written as a character surrounded by single quotes, for example, 'A'. For details, including how to write control characters, see explicitCharConstant.\r\nCharacters can be read and written by get and put statements.\r\nThere are 256 char values, corresponding to the distinct patterns in an 8-bit byte. This allows the patterns eos (internal value 0) and uninitchar (internal value 128) to be char values (these patterns are not allowed in the string type; see the string type). All 256 patterns are used, so there is no pattern left to be the \"uninitialized value\". Uninitialized checking is not done for the char type.\r\nThe ord and chr functions convert between the char values and their corresponding numeric representation in a byte. See ord and chr.\r\nIn general, you can freely intermix the values of the types char, char(n) and string. This means that catenation (+), comparisons, length and substrings can be applied to any of these types. See char(n) for details about conversions between char, char(n) and string.\r\n",
      "mdown_content": "The type **string** (or **char**(_n_)) is used instead of **char** when more than one character needs to be stored, such as the string of characters _Henry_. Unless the program needs to be quite efficient, it is usually easier to use the **string** type. See also the **char**(_n_) type, which always stores exactly_ n _characters.\nThe **char** type differs from the **string**(1) type in the following way: **char** always represents exactly one character, while **string**(1) can represent either the null string or a string containing one character. The **char** type is similar to the **char**(1) type in that both contain at most one character.\nThe **char** type is an index type and can be used, for example, as subscripts, **for** ranges and **case** labels. For example, this declaration\n\n\n\ncreates an array whose subscripts are characters.\nThe **char** type is a scalar type, which implies that its parameters are passed by value, instead of by reference (which is the case for **char**(_n_) and **string**).\nValues of the **char** type can be assigned and they can be compared for both equality and ordering. Explicit **char** constants are written as a character surrounded by single quotes, for example, 'A'. For details, including how to write control characters, see _explicitCharConstant_.\nCharacters can be read and written by **get** and **put** statements.\nThere are 256 **char** values, corresponding to the distinct patterns in an 8-bit byte. This allows the patterns _eos_ (internal value 0) and _uninitchar_ (internal value 128) to be **char** values (these patterns are not allowed in the **string** type; see the **string** type). All 256 patterns are used, so there is no pattern left to be the \"uninitialized value\". Uninitialized checking is not done for the **char** type.\nThe **ord** and **chr** functions convert between the **char** values and their corresponding numeric representation in a byte. See **ord** and **chr**.\nIn general, you can freely intermix the values of the types **char**, **char**(_n_) and **string**. This means that catenation (+), comparisons, **length** and substrings can be applied to any of these types. See **char**(_n_) for details about conversions between **char**, **char**(_n_) and **string**."
    },
    {
      "title": "See also",
      "links": [
        "string1",
        "char_n",
        "ord",
        "chr",
        "explicitcharconstant"
      ],
      "raw_content": "<b><a href=\"string1.html\">string</a></b> and <b><a href=\"char_n.html\">char(<i>n</i>)</a></b> for related types. See <b><a href=\"ord.html\">ord</a></b> and <b><a href=\"chr.html\">chr</a></b> functions for conversion from and to ASCII values. See <i><a href=\"explicitcharconstant.html\">explicitCharConstant</a></i> for information on special characters like caret (^) and backslash (\\).<p>\r\n</p>",
      "text_content": " string and char(n) for related types. See ord and chr functions for conversion from and to ASCII values. See explicitCharConstant for information on special characters like caret (^) and backslash (\\).\r\n",
      "mdown_content": "**[string1.html](string)** and **[char_n.html](char(_n_))** for related types. See **[ord.html](ord)** and **[chr.html](chr)** functions for conversion from and to ASCII values. See _[explicitcharconstant.html](explicitCharConstant)_ for information on special characters like caret (^) and backslash (\\)."
    }
  ],
  "dependencies": [

  ]
}
