{
  "title": "boolean",
  "fileName": "boolean",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>boolean</b><p>\r\n</p></font>",
      "text_content": " boolean\r\n",
      "mdown_content": "**boolean**"
    },
    {
      "title": "Description",
      "raw_content": "The <b>boolean</b> type is used for values that are either <b>true</b> or <b>false</b>. These true-false values can be combined by various operators such as <b>or</b> and <b>and</b>.<p>\r\n</p>",
      "text_content": " The boolean type is used for values that are either true or false. These true-false values can be combined by various operators such as or and and.\r\n",
      "mdown_content": "The **boolean** type is used for values that are either **true** or **false**. These true-false values can be combined by various operators such as **or** and **and**."
    },
    {
      "title": "Example",
      "code": [
        "        var success : boolean := false\r\n        var continuing := true      % The type is boolean\r\n        \r\n        success := mark >= 60\r\n        continuing := success and continuing\r\n        if continuing then "
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "raw_content": "This type is named after the British mathematician, George Boole, who formulated laws of logic.<p>\r\nThe operators for <b>true</b> and <b>false</b> are <b>and</b>, <b>or</b>,<i> </i><b>xor</b>, =<b>&gt;</b>, and <b>not</b>. For two true/false values <i>A</i> and <i>B</i>, these operators are defined as follows:</p>\n<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>A</i> <b>and</b> <i>B</i> is true when both are true</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>A</i> <b>or</b> <i>B</i> is true when either or both are true</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>A</i> <b>xor</b> <i>B</i> is true when either but not both are true</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<i>A</i> =<b>&gt;</b> <i>B</i> (A implies B) is true when both are true or when A is false</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>\n<b>not</b> <i>A</i> is true when A is false</td>\n</tr>\n</table>\n<p>\r\nThe <b>and</b> operator has higher precedence than <b>or</b>, so <i>A</i> <b>or</b> <i>B</i> <b>and</b> <i>C</i> means <i>A</i> <b>or</b> (<i>B</i> <b>and</b> <i>C</i>).</p>\n<p>\r\nThe operators <b>or</b>, <b>and</b> and =<b>&gt;</b> are short circuit operators. For example, if <i>A</i> is true in <i>A</i> <b>or</b> <i>B</i>, <i>B </i>is not evaluated.</p>\n<p>\r\n</p>",
      "text_content": " This type is named after the British mathematician, George Boole, who formulated laws of logic.\r\nThe operators for true and false are and, or, xor, =>, and not. For two true/false values A and B, these operators are defined as follows:\r\n A and B is true when both are true A or B is true when either or both are true A xor B is true when either but not both are true A => B (A implies B) is true when both are true or when A is false not A is true when A is false\r\nThe and operator has higher precedence than or, so A or B and C means A or (B and C).\r\nThe operators or, and and => are short circuit operators. For example, if A is true in A or B, B is not evaluated.\r\n",
      "mdown_content": "This type is named after the British mathematician, George Boole, who formulated laws of logic.\nThe operators for **true** and **false** are **and**, **or**,* ***xor**, =**>**, and **not**. For two true/false values *A* and *B*, these operators are defined as follows:\n *A* **and** *B* is true when both are true *A* **or** *B* is true when either or both are true *A* **xor** *B* is true when either but not both are true *A* =**>** *B* (A implies B) is true when both are true or when A is false **not** *A* is true when A is false\nThe **and** operator has higher precedence than **or**, so *A* **or** *B* **and** *C* means *A* **or** (*B* **and** *C*).\nThe operators **or**, **and** and =**>** are short circuit operators. For example, if *A* is true in *A* **or** *B*, *B *is not evaluated."
    },
    {
      "title": "Details",
      "raw_content": "The <b>boolean</b> type can be used as an index to an array.<p>\r\n</p>",
      "text_content": " The boolean type can be used as an index to an array.\r\n",
      "mdown_content": "The **boolean** type can be used as an index to an array."
    },
    {
      "title": "Example",
      "code": [
        "        var a : array boolean of int\r\n        a (false) := 10\r\n        a (true) := 20"
      ],
      "raw_content": "Declaration of an array with <b>boolean</b> index.<p>\r\n</p>",
      "text_content": " Declaration of an array with boolean index.\r\n\r\n",
      "mdown_content": "Declaration of an array with **boolean** index."
    },
    {
      "title": "Details",
      "raw_content": "The <b>put</b> and <b>get</b> semantics allow put's and get's of boolean values. <b>true</b> values will be output as \"true\" and <b>false</b> values will be output as \"false\". The only legal input values are \"true\" and \"false\", which are case sensitive.<p>\r\n</p>",
      "text_content": " The put and get semantics allow put's and get's of boolean values. true values will be output as \"true\" and false values will be output as \"false\". The only legal input values are \"true\" and \"false\", which are case sensitive.\r\n",
      "mdown_content": "The **put** and **get** semantics allow put's and get's of boolean values. **true** values will be output as \"true\" and **false** values will be output as \"false\". The only legal input values are \"true\" and \"false\", which are case sensitive."
    },
    {
      "title": "See also",
      "links": [
        "explicittruefalseconstant",
        "true",
        "false",
        "precedence",
        "expn"
      ],
      "raw_content": "<i><a href=\"explicittruefalseconstant.html\">explicitTrueFalseConstant</a></i> (which discusses the values <b><a href=\"true.html\">true</a></b> and <b><a href=\"false.html\">false</a></b>), <i><a href=\"precedence.html\">precedence</a></i> and <i><a href=\"expn.html\">expn</a> </i>(expression).<p>\r\n</p>",
      "text_content": " explicitTrueFalseConstant (which discusses the values true and false), precedence and expn (expression).\r\n",
      "mdown_content": "*[explicittruefalseconstant.html](explicitTrueFalseConstant)* (which discusses the values **[true.html](true)** and **[false.html](false)**), *[precedence.html](precedence)* and *[expn.html](expn) *(expression)."
    }
  ]
}
