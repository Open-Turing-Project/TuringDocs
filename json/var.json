{
  "title": "var",
  "fileName": "var",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>variableDeclaration</i> is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>var</b> <i>id</i> { ,<i>id</i> } [ :<i>typeSpec</i>] [:=<i>initializingValue</i>]</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><i>collectionDeclaration</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": " A variableDeclaration is one of:\r\n (a)var id { ,id } [ :typeSpec] [:=initializingValue] (b)collectionDeclaration",
      "mdown_content": "A _variableDeclaration_ is one of:\n\n\n(a) **var** _id_ { ,_id_ } [ :_typeSpec_] [:=_initializingValue_]\n(b) _collectionDeclaration_\n\n"
    },
    {
      "title": "Description",
      "raw_content": "A variable declaration creates a new variable (or variables). Only form (a) will be explained here. See <i>collectionDeclaration </i>for explanation of form (b). The <i>typeSpec </i>of form (a) can be omitted only if the initializing value is present.<p>\r\n</p>",
      "text_content": " A variable declaration creates a new variable (or variables). Only form (a) will be explained here. See collectionDeclaration for explanation of form (b). The typeSpec of form (a) can be omitted only if the initializing value is present.\r\n",
      "mdown_content": "A variable declaration creates a new variable (or variables). Only form (a) will be explained here. See _collectionDeclaration_ for explanation of form (b). The _typeSpec_ of form (a) can be omitted only if the initializing value is present.\n"
    },
    {
      "title": "Example",
      "code": [
        "        var j, k : int := 1     % j and k are assigned value 1\r\n        var t := \"Sample\"       % The type of t is string\r\n        var v : array 1 .. 3 of string ( 6 ) :=\r\n                init ( \"George\", \"Fred\", \"Alice\" )"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": "\n"
    },
    {
      "title": "Details",
      "code": [
        "        var [pervasive] [register] id { , id } [ : typeSpec ] [ := initializingValue ]"
      ],
      "raw_content": "The initializing value, if present, must be an expression or else a list of items separated by commas inside <b>init</b> ( &#133; ). The syntax of <i>initializingValue </i>is one of:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(a)</td>\n<td width=\"10\">&nbsp;</td>\n<td>expn</td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td>(b)</td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<b>init</b> ( initializingValue {, initializingValue } )</td>\n</tr>\n</table>\n<p>\r\nEach <b>init</b> ( &#133; ) corresponds to an array, record or union value that is being initialized. These must be nested for initialization of nested types.</p>\n<p>\r\nIf the <i>typeSpec</i> is omitted, the variable's type is taken to be the (root) type of the initializing expression, for example, <b>int</b> or <b>string</b>. The <i>typeSpec</i> cannot be omitted for dynamic arrays or when the initializing value is of the form <b>init</b> ( &#133; ). The values inside <b>init</b> ( &#133; ) must be known at compile time.</p>\n<p>\r\nThe keyword <b>pervasive</b> can be inserted just after <b>var</b>. When this is done, the variable is visible inside all subconstructs of the variable's scope. Without <b>pervasive</b>, the variable is not visible inside modules unless explicitly imported. Pervasive variables need not be imported. You can abbreviate <b>pervasive</b> as an asterisk (<b>*</b>).</p>\n<p>\r\nOOT extends Turing in the following way. OOT changes form (a) to allow the optional use of the <b>register</b> keyword to request that the variable be placed in a machine register. The OOT syntax for form (a) is actually:</p>\n<p>\r\n</p>\r\nIn the current (1994) OOT implementation, programs are run interpretively using pseudo-code, which has no machine registers, and the <b>register</b> keyword is ignored. See <b>register</b> for restrictions on the use of register variables.<p>\r\n</p>",
      "text_content": " The initializing value, if present, must be an expression or else a list of items separated by commas inside init (  ). The syntax of initializingValue is one of:\r\n (a) expn (b) init ( initializingValue {, initializingValue } )\r\nEach init (  ) corresponds to an array, record or union value that is being initialized. These must be nested for initialization of nested types.\r\nIf the typeSpec is omitted, the variable's type is taken to be the (root) type of the initializing expression, for example, int or string. The typeSpec cannot be omitted for dynamic arrays or when the initializing value is of the form init (  ). The values inside init (  ) must be known at compile time.\r\nThe keyword pervasive can be inserted just after var. When this is done, the variable is visible inside all subconstructs of the variable's scope. Without pervasive, the variable is not visible inside modules unless explicitly imported. Pervasive variables need not be imported. You can abbreviate pervasive as an asterisk (*).\r\nOOT extends Turing in the following way. OOT changes form (a) to allow the optional use of the register keyword to request that the variable be placed in a machine register. The OOT syntax for form (a) is actually:\r\n\r\nIn the current (1994) OOT implementation, programs are run interpretively using pseudo-code, which has no machine registers, and the register keyword is ignored. See register for restrictions on the use of register variables.\r\n",
      "mdown_content": "The initializing value, if present, must be an expression or else a list of items separated by commas inside **init** ( &#133; ). The syntax of _initializingValue_ is one of:\n\n\n(a)   expn\n(b)   **init** ( initializingValue {, initializingValue } )\n\n\nEach **init** ( &#133; ) corresponds to an array, record or union value that is being initialized. These must be nested for initialization of nested types.\n\nIf the _typeSpec_ is omitted, the variable's type is taken to be the (root) type of the initializing expression, for example, **int** or **string**. The _typeSpec_ cannot be omitted for dynamic arrays or when the initializing value is of the form **init** ( &#133; ). The values inside **init** ( &#133; ) must be known at compile time.\n\nThe keyword **pervasive** can be inserted just after **var**. When this is done, the variable is visible inside all subconstructs of the variable's scope. Without **pervasive**, the variable is not visible inside modules unless explicitly imported. Pervasive variables need not be imported. You can abbreviate **pervasive** as an asterisk (__*__).\n\nOOT extends Turing in the following way. OOT changes form (a) to allow the optional use of the **register** keyword to request that the variable be placed in a machine register. The OOT syntax for form (a) is actually:\n\nIn the current (1994) OOT implementation, programs are run interpretively using pseudo-code, which has no machine registers, and the **register** keyword is ignored. See **register** for restrictions on the use of register variables.\n"
    },
    {
      "title": "See also",
      "links": [
        "collection",
        "bind",
        "procedure",
        "function",
        "export",
        "import",
        ""
      ],
      "raw_content": "<b><a href=\"collection.html\">collection</a></b>, <b><a href=\"bind.html\">bind</a></b>, <b><a href=\"procedure.html\">procedure</a></b> and <b><a href=\"function.html\">function</a></b> declarations, parameter declarations, <b><a href=\"export.html\">export</a></b> lists and <b><a href=\"import.html\">import</a></b> lists for other uses of the keyword <b><a href=\"\">var</a></b>.<p>\r\n</p>",
      "text_content": " collection, bind, procedure and function declarations, parameter declarations, export lists and import lists for other uses of the keyword var.\r\n",
      "mdown_content": "**[collection.html](collection)**, **[bind.html](bind)**, **[procedure.html](procedure)** and **[function.html](function)** declarations, parameter declarations, **[export.html](export)** lists and **[import.html](import)** lists for other uses of the keyword **[](var)**.\n"
    }
  ],
  "dependencies": [

  ]
}
