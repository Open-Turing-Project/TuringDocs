{
  "title": "realn",
  "fileName": "realn",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(a)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>real4</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% 4-byte real number</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\"><font size=\"+1\">(b)</font></td>\n<td colspan=\"7\"><font size=\"+1\"><b>real8</b></font></td>\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"-2\"><font size=\"+1\"><i>% 8-byte real number</i></font></td>\n</tr>\n</table>\n<p></p>",
      "text_content": "\r\n (a)real4  % 4-byte real number (b)real8  % 8-byte real number",
      "mdown_content": " (a)**real4**  *% 4-byte real number* (b)**real8**  *% 8-byte real number*"
    },
    {
      "title": "Description",
      "raw_content": "The <b>real<i>n</i></b> (<i>n</i>-byte real number) types are machine-dependent types that occupy a specified number of bytes. By contrast, the <b>real</b> type is, in principle, a machine-independent and mathematical type (however, it overflows when the exponent of the value is too large or small and it has only a limited amount of precision).<p>\r\n</p>",
      "text_content": " The realn (n-byte real number) types are machine-dependent types that occupy a specified number of bytes. By contrast, the real type is, in principle, a machine-independent and mathematical type (however, it overflows when the exponent of the value is too large or small and it has only a limited amount of precision).\r\n",
      "mdown_content": "The **real*n*** (*n*-byte real number) types are machine-dependent types that occupy a specified number of bytes. By contrast, the **real** type is, in principle, a machine-independent and mathematical type (however, it overflows when the exponent of the value is too large or small and it has only a limited amount of precision)."
    },
    {
      "title": "Example",
      "code": [
        "        var width : real4\r\n        var height : real8"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "raw_content": "Turing implements the type <b>real</b>  using 8 byte floating point representation. This provides 14 to 16 decimal digits of precision and an exponent range of at least -38 .. 38. The PC and Macintosh versions of Turing have 16 decimal digits of accuracy because they use IEEE standard floating point representation.<p>\r\nThis implies that <b>real8</b> and <b>real</b> are essentially the same type, so in practice there is no advantage to using <b>real8</b> rather than <b>real</b>. However, <b>real4</b> has the advantage of occupying half as much space (with correspondingly reduced precision).</p>\n<p>\r\nArithmetic for all real types (<b>real</b>, <b>real4</b> and <b>real8</b>) is carried out with the accuracy and exponent range of 8-byte reals.</p>\n<p>\r\nThe type <b>real4</b> is sometimes called <i>single precision</i> (because it occupies a single 4-byte word) and <b>real8</b> is sometimes called <i>double precision</i>.</p>\n<p>\r\n</p>",
      "text_content": " Turing implements the type real  using 8 byte floating point representation. This provides 14 to 16 decimal digits of precision and an exponent range of at least -38 .. 38. The PC and Macintosh versions of Turing have 16 decimal digits of accuracy because they use IEEE standard floating point representation.\r\nThis implies that real8 and real are essentially the same type, so in practice there is no advantage to using real8 rather than real. However, real4 has the advantage of occupying half as much space (with correspondingly reduced precision).\r\nArithmetic for all real types (real, real4 and real8) is carried out with the accuracy and exponent range of 8-byte reals.\r\nThe type real4 is sometimes called single precision (because it occupies a single 4-byte word) and real8 is sometimes called double precision.\r\n",
      "mdown_content": "Turing implements the type **real**  using 8 byte floating point representation. This provides 14 to 16 decimal digits of precision and an exponent range of at least -38 .. 38. The PC and Macintosh versions of Turing have 16 decimal digits of accuracy because they use IEEE standard floating point representation.\nThis implies that **real8** and **real** are essentially the same type, so in practice there is no advantage to using **real8** rather than **real**. However, **real4** has the advantage of occupying half as much space (with correspondingly reduced precision).\nArithmetic for all real types (**real**, **real4** and **real8**) is carried out with the accuracy and exponent range of 8-byte reals.\nThe type **real4** is sometimes called *single precision* (because it occupies a single 4-byte word) and **real8** is sometimes called *double precision*."
    }
  ],
  "dependencies": [

  ]
}
