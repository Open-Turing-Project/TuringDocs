{
  "title": "RGB.AddColor",
  "fileName": "rgb_addcolor",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<b>RGB.AddColor</b> (<i>redComp</i>, <i>greenComp</i>, <i>blueComp</i> : <b>real</b>) : <b>int</b><p>\r\n</p>",
      "mdown_content": "**RGB.AddColor** (*redComp*, *greenComp*, *blueComp* : **real**) : **int**"
    },
    {
      "title": "Description",
      "code": [
        "        newColor := RGB.AddColor (1.0, 0.0, 0.0)"
      ],
      "raw_content": "The <b>RGB.AddColor</b> function attempts to create a new color with the red, green and blue components specified. If successful, the function returns a new color number (usually one greater than <b>maxcolor</b>)<b> </b>and<b> maxcolor </b>is updated by adding 1 to it. If it is unsuccessful, the function returns 1 and <b>Error.Last</b> and <b>Error.LastMsg</b> can be used to determine the cause of the problem. <p>\r\nThe red, green and blue values must normalized to be between 0 and 1. Thus to add the pure red to the color palette, you would call:</p>\n<p>\r\n</p>\r\n<i>newColor</i> would be set to the color added, or 1 if the attempt to add a color failed.<p>\r\n</p>",
      "mdown_content": "The **RGB.AddColor** function attempts to create a new color with the red, green and blue components specified. If successful, the function returns a new color number (usually one greater than **maxcolor**)** **and** maxcolor **is updated by adding 1 to it. If it is unsuccessful, the function returns 1 and **Error.Last** and **Error.LastMsg** can be used to determine the cause of the problem. \nThe red, green and blue values must normalized to be between 0 and 1. Thus to add the pure red to the color palette, you would call:\n\n\n*newColor* would be set to the color added, or 1 if the attempt to add a color failed."
    },
    {
      "title": "Example",
      "code": [
        "        var clr : int\r\n        for blueShade : 0 .. 15\r\n             clr = RGB.AddColor (0, 0, blueShade / 15)\r\n             if clr = 1 then\r\n                put \"Color add failed on shade number \", blueShade\r\n                exit\r\n            else\r\n                put \"Added color number \", clr\r\n            end if\r\n        end for"
      ],
      "raw_content": "This program adds a palette of 16 blues to the end of the color palette.<p>\r\n</p>\r\n<table><tr valign=\"top\">\n<td><b>Details</b></td>\n<td width=\"10\">&nbsp;</td>\n<td>\n<b>RGB.AddColour</b> is an alternate spelling for <b>RGB.AddColor</b>.</td>\n</tr></table>\n<p>\r\n</p>",
      "mdown_content": "This program adds a palette of 16 blues to the end of the color palette.\n\n**Details**\nÂ \n\n**RGB.AddColour** is an alternate spelling for **RGB.AddColor**.\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>RGB.AddColor</b>, not by calling <b>AddColor</b>.</p>\n<p>\r\n</p>",
      "mdown_content": "Exported qualified.\nThis means that you can only call the function by calling **RGB.AddColor**, not by calling **AddColor**.\n"
    },
    {
      "title": "See also",
      "links": [
        "rgb_getcolor",
        "rgb_setcolor"
      ],
      "raw_content": "<b><a href=\"rgb_getcolor.html\">RGB.GetColor</a></b>and <b><a href=\"rgb_setcolor.html\">RGB.SetColor</a></b>.<p>\r\n</p>",
      "mdown_content": "**[rgb_getcolor.html](RGB.GetColor)**and **[rgb_setcolor.html](RGB.SetColor)**."
    }
  ]
}
