{
  "title": "procedure",
  "fileName": "procedure",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>procedureDeclaration</i> is:<p>\r\n</p>\n<table>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>procedure</b> <i>id</i> [(<i>paramDeclaration</i> {, <i>paramDeclaration</i> })]</font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"7\"><font size=\"+1\"><i>statementsAndDeclarations</i></font></td>\n</tr>\n<tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><b>end</b> <i>id</i></font></td>\n</tr>\n</table>\n<p></p>",
      "mdown_content": "A *procedureDeclaration* is:\n\n \n**procedure** *id* [(*paramDeclaration* {, *paramDeclaration* })]\n \n \n*statementsAndDeclarations*\n \n**end** *id*"
    },
    {
      "title": "Description",
      "raw_content": "A procedure declaration creates (but does not run) a new procedure. The name of the procedure (<i>id</i>) is given in two places, just after <b>procedure</b> and just after <b>end</b>.<p>\r\n</p>",
      "mdown_content": "A procedure declaration creates (but does not run) a new procedure. The name of the procedure (*id*) is given in two places, just after **procedure** and just after **end**."
    },
    {
      "title": "Example",
      "code": [
        "        procedure greetings\r\n            put \"Hello world\"\r\n        end greetings\r\n        \r\n        greetings           % This outputs Hello world\r\n        \r\n        procedure sayItAgain ( msg : string, n : int )\r\n            for i : 1 .. n\r\n                put msg\r\n            end for\r\n        end sayItAgain\r\n        \r\n        sayItAgain (\"Toot\", 2 ) % Toot is output twice\r\n        \r\n        procedure double ( var x : real )\r\n            x := 2 * x\r\n        end double\r\n        \r\n        var y : real := 3.14\r\n        double ( y )        % This doubles the value of y"
      ],
      "raw_content": "<p>\r\n</p>",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "code": [
        "        procedure [ pervasive ] id\r\n            [ ( [ paramDeclaration {,paramDeclaration } ] ) ]\r\n            [ : deviceSpecification ]\r\n            [ pre trueFalseExpn ]\r\n            [ init id := expn {, id := expn } ]\r\n            [ post trueFalseExpn ]\r\n            [ exceptionHandler ]\r\n            statementsAndDeclarations\r\n        end id"
      ],
      "raw_content": "The set of parameters declared with the procedure are called <i>formal</i> parameters. In the <i>double </i>procedure, for example, <i>x </i>is a formal parameter. A procedure is called (invoked) by a procedure<i> call statement</i> which consists of the procedure's name followed by the parenthesized list of <i>actual </i>parameters (if any). For example, <i>double</i>(<i>y</i>) is a call having <i>y</i> as an actual parameter. If there are no parameters (see the <i>greet</i> procedure above), the call does not have parentheses. The keyword <b>procedure</b> can be abbreviated to <b>proc</b>.<p>\r\nOrdinarily, a procedure <i>returns </i>(finishes and goes back to the place where it was called) by reaching its <b>end</b>. However, the <b>return</b> statement in a procedure causes it to return immediately. Note that <b>return</b> can also be used in the main program to cause it to halt immediately.</p>\n<p>\r\nOnly parameters declared using <b>var</b> may be changed in the procedure, for example, <i>x</i> is changed in the <i>double</i> procedure. The upper bounds of arrays and strings that are parameters may be declared to be an asterisk (<b>*</b>). This means that the bound is that of the actual parameter. See <i>paramDeclaration</i> for details about parameters.</p>\n<p>\r\nProcedures and functions cannot be declared inside other procedures and functions.</p>\n<p>\r\nThe syntax of a <i>procedureDeclaration</i> presented above has been simplified by leaving out the optional <b>import</b> list, <b>pre</b> condition, <b>init</b> clause, <b>post</b> condition and exception handler. The full syntax<i> </i>is</p>\n<p>\r\n</p>\r\nA procedure must be declared before being called. To allow for mutually recursive procedures, there are <b>forward</b> declarations of procedures with later declaration of each procedure <b>body</b>. See <b>forward</b> and <b>body</b> declarations for explanations.<p>\r\n</p>",
      "mdown_content": "The set of parameters declared with the procedure are called *formal* parameters. In the *double *procedure, for example, *x *is a formal parameter. A procedure is called (invoked) by a procedure* call statement* which consists of the procedure's name followed by the parenthesized list of *actual *parameters (if any). For example, *double*(*y*) is a call having *y* as an actual parameter. If there are no parameters (see the *greet* procedure above), the call does not have parentheses. The keyword **procedure** can be abbreviated to **proc**.\nOrdinarily, a procedure *returns *(finishes and goes back to the place where it was called) by reaching its **end**. However, the **return** statement in a procedure causes it to return immediately. Note that **return** can also be used in the main program to cause it to halt immediately.\n\nOnly parameters declared using **var** may be changed in the procedure, for example, *x* is changed in the *double* procedure. The upper bounds of arrays and strings that are parameters may be declared to be an asterisk (*****). This means that the bound is that of the actual parameter. See *paramDeclaration* for details about parameters.\n\nProcedures and functions cannot be declared inside other procedures and functions.\n\nThe syntax of a *procedureDeclaration* presented above has been simplified by leaving out the optional **import** list, **pre** condition, **init** clause, **post** condition and exception handler. The full syntax* *is\n\n\nA procedure must be declared before being called. To allow for mutually recursive procedures, there are **forward** declarations of procedures with later declaration of each procedure **body**. See **forward** and **body** declarations for explanations."
    },
    {
      "title": "See also",
      "links": [
        "import",
        "pre",
        "condition",
        "init",
        "post",
        "condition",
        "pervasive",
        "pervasive",
        "",
        "monitor"
      ],
      "raw_content": "<b><a href=\"import.html\">import</a></b> list, <b><a href=\"pre.html\">pre</a></b> <a href=\"condition.html\">condition</a>, <b><a href=\"init.html\">init</a></b> clause, <b><a href=\"post.html\">post</a></b> <a href=\"condition.html\">condition</a> and <i>exceptionHandler</i> for explanations of these features. See <b><a href=\"pervasive.html\">pervasive</a></b> for information on <b><a href=\"pervasive.html\">pervasive</a></b> procedures. See <b>exceptionHandler</b>. The optional <i>deviceSpecification </i>is used only in procedures declared in monitors and is used to create an <i>interrupt handling <a href=\"\">procedure</a></i>. See <b><a href=\"monitor.html\">monitor</a></b> for details.<p>\r\n</p>",
      "mdown_content": "**[import.html](import)** list, **[pre.html](pre)** [condition.html](condition), **[init.html](init)** clause, **[post.html](post)** [condition.html](condition) and *exceptionHandler* for explanations of these features. See **[pervasive.html](pervasive)** for information on **[pervasive.html](pervasive)** procedures. See **exceptionHandler**. The optional *deviceSpecification *is used only in procedures declared in monitors and is used to create an *interrupt handling [](procedure)*. See **[monitor.html](monitor)** for details."
    }
  ]
}
