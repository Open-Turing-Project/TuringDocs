{
  "title": "subprogramType",
  "fileName": "subprogramtype",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "A <i>subprogramType</i> is:<p>\r\n</p>\n<table><tr valign=\"top\">\n<td width=\"40\">&nbsp;</td>\n<td colspan=\"8\"><font size=\"+1\"><i>subprogramHeader</i></font></td>\n</tr></table>\n<p></p>",
      "text_content": " A subprogramType is:\r\n subprogramHeader",
      "mdown_content": "A _subprogramType_ is:\n\n_subprogramHeader_\n"
    },
    {
      "title": "Description",
      "raw_content": "A variable or constant can contain a reference to a subprogram. The type of the variable or constant is a <i>subprogramType</i>. See also <i>subprogramHeader</i>.<p>\r\n</p>",
      "text_content": " A variable or constant can contain a reference to a subprogram. The type of the variable or constant is a subprogramType. See also subprogramHeader.\r\n",
      "mdown_content": "A variable or constant can contain a reference to a subprogram. The type of the variable or constant is a _subprogramType_. See also _subprogramHeader_."
    },
    {
      "title": "Example",
      "code": [
        "        procedure rnd ( var i : int, x : real)\r\n            i := round ( x )\r\n        end rnd\r\n        \r\n        type t : procedure q ( var j : int, y : real )\r\n        var u : t := rnd    % Procedure variable u refers to rnd\r\n        \r\n        var j : int\r\n        u ( j, 24.6 )       % Call procedure u referring to rnd\r\n        \r\n        var v := u      % Subprogram variable v initialized to u"
      ],
      "raw_content": "In the following <i>t</i> is a subprogram type, and <i>u</i> is a variable of type <i>t</i> initialized to refer to procedure <i>rnd</i>.<p>\r\n</p>",
      "text_content": " In the following t is a subprogram type, and u is a variable of type t initialized to refer to procedure rnd.\r\n\r\n",
      "mdown_content": "In the following _t_ is a subprogram type, and _u_ is a variable of type _t_ initialized to refer to procedure _rnd_."
    },
    {
      "title": "Details",
      "raw_content": "The name of the subprogram, for example <i>q</i>, and the parameters, for example <i>i</i> and <i>x</i>, have no meaning in a subprogram type. They are present only because of the form of subprogram headers.<p>\r\nIf <i>v</i> is a variable or constant that refers to a subprogram, <i>v </i>can be called, compared for equality to other subprogram variables, assigned and passed as a parameter. Variable <i>v</i> is not an integer, string or pointer and cannot participate in their corresponding operations.</p>\n<p>\r\nA reference to a subprogram, rather that the code of the subprogram, is contained in a variable <i>v</i> whose type is a subprogram type. This implies that <b>addr</b> (<i>v</i>) is the address of the reference to subprogram, rather than the address of the subprogram. The address of the code is given by #<i>v</i>. See <b>cheat</b> for an explanation of the # operator.</p>\n<p>\r\nYou cannot assign a reference to a subprogram exported from a class. This restriction exists because  these subprograms are meaningless without an accompanying reference to an object.</p>\n<p>\r\nMany potential uses of subprogram variables are better programmed using classes and overriding exported subprograms. See <b>class</b>.</p>\n<p>\r\n</p>",
      "text_content": " The name of the subprogram, for example q, and the parameters, for example i and x, have no meaning in a subprogram type. They are present only because of the form of subprogram headers.\r\nIf v is a variable or constant that refers to a subprogram, v can be called, compared for equality to other subprogram variables, assigned and passed as a parameter. Variable v is not an integer, string or pointer and cannot participate in their corresponding operations.\r\nA reference to a subprogram, rather that the code of the subprogram, is contained in a variable v whose type is a subprogram type. This implies that addr (v) is the address of the reference to subprogram, rather than the address of the subprogram. The address of the code is given by #v. See cheat for an explanation of the # operator.\r\nYou cannot assign a reference to a subprogram exported from a class. This restriction exists because  these subprograms are meaningless without an accompanying reference to an object.\r\nMany potential uses of subprogram variables are better programmed using classes and overriding exported subprograms. See class.\r\n",
      "mdown_content": "The name of the subprogram, for example _q_, and the parameters, for example _i_ and _x_, have no meaning in a subprogram type. They are present only because of the form of subprogram headers.\nIf _v_ is a variable or constant that refers to a subprogram, _v _can be called, compared for equality to other subprogram variables, assigned and passed as a parameter. Variable _v_ is not an integer, string or pointer and cannot participate in their corresponding operations.\nA reference to a subprogram, rather that the code of the subprogram, is contained in a variable _v_ whose type is a subprogram type. This implies that **addr** (_v_) is the address of the reference to subprogram, rather than the address of the subprogram. The address of the code is given by #_v_. See **cheat** for an explanation of the # operator.\nYou cannot assign a reference to a subprogram exported from a class. This restriction exists because  these subprograms are meaningless without an accompanying reference to an object.\nMany potential uses of subprogram variables are better programmed using classes and overriding exported subprograms. See **class**."
    }
  ],
  "dependencies": [

  ]
}
