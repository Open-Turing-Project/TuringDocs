{
  "title": "GUI.SetScrollAmount",
  "fileName": "gui_setscrollamount",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>GUI.SetScrollAmount</b> (<i>widgetID</i> : <b>int</b>,<br><i>arrowInc</i>, <i>pageInc</i>, <i>thumbSize</i> : <b>int</b>)<p>\r\n</p></font>",
      "text_content": " GUI.SetScrollAmount (widgetID : int,arrowInc, pageInc, thumbSize : int)\r\n",
      "mdown_content": "**GUI.SetScrollAmount** (_widgetID_ : **int**,_arrowInc_, _pageInc_, _thumbSize_ : **int**)"
    },
    {
      "title": "Description",
      "raw_content": "Sets a scroll bar's arrow increment, page increment and thumb size. Redraws the scroll bar to take into account the new thumb size. The <i>widgetID</i> specifies the scroll bar to be changed. The <i>arrowInc</i> parameter is the new arrow increment (the amount the scroll bar's value is changed when the scroll arrows are pressed). A value of 1 means to use the previously-defined arrow increment value. The <i>pageInc</i> parameter specifies the new page increment (the amount the scroll bar's value is changed when the user clicks in the page up/down section of the scroll bar). A value of 1 means to use the previously-defined page increment value. The <i>thumbSize</i> parameter specifies he new thumb size. See the scroll bar explanation for more detail on a scroll bar's thumb size. A value of 1 means to use the previously-defined thumb size.<p>\r\n</p>",
      "text_content": " Sets a scroll bar's arrow increment, page increment and thumb size. Redraws the scroll bar to take into account the new thumb size. The widgetID specifies the scroll bar to be changed. The arrowInc parameter is the new arrow increment (the amount the scroll bar's value is changed when the scroll arrows are pressed). A value of 1 means to use the previously-defined arrow increment value. The pageInc parameter specifies the new page increment (the amount the scroll bar's value is changed when the user clicks in the page up/down section of the scroll bar). A value of 1 means to use the previously-defined page increment value. The thumbSize parameter specifies he new thumb size. See the scroll bar explanation for more detail on a scroll bar's thumb size. A value of 1 means to use the previously-defined thumb size.\r\n",
      "mdown_content": "Sets a scroll bar's arrow increment, page increment and thumb size. Redraws the scroll bar to take into account the new thumb size. The _widgetID_ specifies the scroll bar to be changed. The _arrowInc_ parameter is the new arrow increment (the amount the scroll bar's value is changed when the scroll arrows are pressed). A value of 1 means to use the previously-defined arrow increment value. The _pageInc_ parameter specifies the new page increment (the amount the scroll bar's value is changed when the user clicks in the page up/down section of the scroll bar). A value of 1 means to use the previously-defined page increment value. The _thumbSize_ parameter specifies he new thumb size. See the scroll bar explanation for more detail on a scroll bar's thumb size. A value of 1 means to use the previously-defined thumb size.\n"
    },
    {
      "title": "Example",
      "code": [
        "        % The \"ScrollPic2\" program.\r\n        import GUI in \"%oot/lib/GUI\"\r\n        \r\n        % The maximum width/height of the canvas.\r\n        const maxSize : int := 220 \r\n        const leftBorder : int := 15    % Left margin.\r\n        const bottomBorder : int := 25  % Bottom margin.\r\n        \r\n        var h, v : int          % The scroll bars.\r\n        var canvas : int            % The canvas.\r\n        var pic : int               % The picture.\r\n        var fileNameField : int     % The file name text field.\r\n        var errorLabel : int        % The error message label.\r\n        var loadButton : int        % The \"Load Picture\" button.\r\n        \r\n        procedure ScrollPic (ignore : int)\r\n            % Get the current value of the scroll bars.\r\n            var x : int := GUI.GetSliderValue (h)\r\n            var y : int := GUI.GetSliderValue (v)\r\n            GUI.PicDraw (canvas, pic, x, y, picCopy)\r\n        end ScrollPic\r\n        \r\n        procedure LoadFile (fileName : string)\r\n            var picWidth, picHeight, canvasWidth, canvasHeight : int\r\n            var newPic : int := Pic.FileNew (fileName)\r\n            if newPic <= 0 then\r\n                GUI.SetLabel (errorLabel, \r\n                    \"Error loading picture: \" + Error.LastMsg)\r\n                GUI.SetSelection (fileNameField, 1, 1)\r\n                return\r\n            else\r\n                GUI.SetLabel (errorLabel, \"\")\r\n                pic := newPic\r\n            end if\r\n            picWidth := Pic.GetWidth (pic)\r\n            picHeight := Pic.GetHeight (pic)\r\n            canvasWidth := min (picWidth, maxSize)\r\n            canvasHeight := min (picHeight, maxSize)\r\n            % Hide the canvas and the three items, readjust them \r\n            % and then show them.\r\n            GUI.Hide (canvas)\r\n            GUI.Hide (h)\r\n            GUI.Hide (v)\r\n            GUI.SetSize (canvas, canvasWidth, canvasHeight)\r\n            GUI.SetSliderSize (h, canvasWidth + 1)\r\n            GUI.SetPosition (v, 15 + canvasWidth,\r\n                bottomBorder + GUI.GetScrollBarWidth - 1)\r\n            GUI.SetSliderSize (v, canvasHeight + 1)\r\n            GUI.SetSliderMinMax (h, 0, picWidth  1)\r\n            GUI.SetSliderMinMax (v, 0, picHeight  1)\r\n            GUI.SetScrollAmount (h, 3, 100, canvasWidth)\r\n            GUI.SetScrollAmount (v, 3, 100, canvasHeight)\r\n            GUI.SetSliderValue (h, 0)\r\n            GUI.SetSliderValue (v, picHeight)\r\n            GUI.Show (canvas)\r\n            GUI.Show (h)\r\n            GUI.Show (v)\r\n            ScrollPic (0)\r\n        end LoadFile\r\n        \r\n        procedure LoadFileButton\r\n            var fileName : string := GUI.GetText (fileNameField)\r\n            LoadFile (fileName)\r\n        end LoadFileButton\r\n        \r\n        View.Set (\"graphics:265;295\")\r\n        \r\n        % We place the canvas first and everything else is placed \r\n        % relative to the canvas.\r\n        canvas := GUI.CreateCanvas (leftBorder, \r\n            bottomBorder + GUI.GetScrollBarWidth, maxSize, maxSize)h := GUI.CreateHorizontalScrollBarFull (GUI.GetX (canvas),\r\n            GUI.GetY (canvas)  GUI.GetScrollBarWidth,\r\n            GUI.GetWidth (canvas), 0, 100, 0, ScrollPic, 3, 100, maxSize)\r\n        v := GUI.CreateVerticalScrollBarFull (\r\n            GUI.GetX (canvas) + GUI.GetWidth (canvas),\r\n            GUI.GetY (canvas), GUI.GetHeight (canvas), 0, 100,\r\n            100, ScrollPic, 3, 100, maxSize)\r\n        fileNameField := GUI.CreateTextField (GUI.GetX (canvas),\r\n            GUI.GetY (canvas) + GUI.GetHeight (canvas) + 10, 150, \"\", \r\n            LoadFile)\r\n        loadButton := GUI.CreateButton (GUI.GetX (fileNameField) +\r\n            GUI.GetWidth (fileNameField) + 20, \r\n            GUI.GetY (fileNameField), 0, \"Load File\", LoadFileButton)\r\n        errorLabel := GUI.CreateLabel (GUI.GetX (canvas), 5, \"\")\r\n        \r\n        % Set the initial picture and return if it is not found.\r\n        GUI.SetText (fileNameField, \"Forest.bmp\")\r\n        LoadFileButton\r\n        if pic = 0 then\r\n            return\r\n        end if\r\n        \r\n        loop\r\n            exit when GUI.ProcessEvent\r\n        end loop\r\n        \r\n        "
      ],
      "raw_content": "The following program displays an image in a canvas in a window. If the image is larger than the canvas, scroll bars to the bottom and left are used to allow the user to see the entire image. A text field allows users to load additional images whenever the \"Load File\" button is pressed.<p>\r\n</p>",
      "text_content": " The following program displays an image in a canvas in a window. If the image is larger than the canvas, scroll bars to the bottom and left are used to allow the user to see the entire image. A text field allows users to load additional images whenever the \"Load File\" button is pressed.\r\n\r\n",
      "mdown_content": "The following program displays an image in a canvas in a window. If the image is larger than the canvas, scroll bars to the bottom and left are used to allow the user to see the entire image. A text field allows users to load additional images whenever the \"Load File\" button is pressed.\n"
    },
    {
      "title": "Status",
      "raw_content": "Exported qualified.<p>\r\nThis means that you can only call the function by calling <b>GUI.SetScrollAmount</b>, not by calling <b>SetScrollAmount</b>.</p>\n<p>\r\n</p>",
      "text_content": " Exported qualified.\r\nThis means that you can only call the function by calling GUI.SetScrollAmount, not by calling SetScrollAmount.\r\n",
      "mdown_content": "Exported qualified.\n\nThis means that you can only call the function by calling **GUI.SetScrollAmount**, not by calling **SetScrollAmount**.\n"
    },
    {
      "title": "See also",
      "raw_content": "<b>GUI.CreateHorizontalScrollBar</b> and <b>GUI.CreateVerticalScrollBar</b><p>\r\n</p>",
      "text_content": " GUI.CreateHorizontalScrollBar and GUI.CreateVerticalScrollBar\r\n",
      "mdown_content": "**GUI.CreateHorizontalScrollBar** and **GUI.CreateVerticalScrollBar**\n"
    }
  ],
  "dependencies": [

  ]
}
