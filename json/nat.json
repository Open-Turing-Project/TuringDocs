{
  "title": "nat",
  "fileName": "nat",
  "sections": [
    {
      "title": "Syntax",
      "raw_content": "<font size=\"+1\"><b>nat</b><p>\r\n</p></font>",
      "text_content": " nat\r\n",
      "mdown_content": "**nat**"
    },
    {
      "title": "Description",
      "raw_content": "The <b>nat</b> (natural number) type has the values 0, 1, 2, 3 &#133; Natural numbers can be combined by various operators, such as addition (+) and multiplication (*). Natural numbers can be combined with integers (type <b>int</b>), in which case the result is an integer. Natural numbers can also be combined with <b>real</b> numbers, in which case the result is generally a real number. Natural numbers can always be assigned to real variables, with implicit conversion to <b>real</b>.<p>\r\n</p>",
      "text_content": " The nat (natural number) type has the values 0, 1, 2, 3 Â… Natural numbers can be combined by various operators, such as addition (+) and multiplication (*). Natural numbers can be combined with integers (type int), in which case the result is an integer. Natural numbers can also be combined with real numbers, in which case the result is generally a real number. Natural numbers can always be assigned to real variables, with implicit conversion to real.\r\n",
      "mdown_content": "The **nat** (natural number) type has the values 0, 1, 2, 3 &#133; Natural numbers can be combined by various operators, such as addition (+) and multiplication (*). Natural numbers can be combined with integers (type **int**), in which case the result is an integer. Natural numbers can also be combined with **real** numbers, in which case the result is generally a real number. Natural numbers can always be assigned to real variables, with implicit conversion to **real**."
    },
    {
      "title": "Example",
      "code": [
        "        var counter : nat\r\n        var j : nat := 9"
      ],
      "raw_content": "<p>\r\n</p>",
      "text_content": "\r\n\r\n",
      "mdown_content": ""
    },
    {
      "title": "Details",
      "code": [
        "        var tax := 0    % The type is int",
        "        const natOne : nat := 1"
      ],
      "raw_content": "See also <i>explicitIntegerConstant</i>. The <b>nat</b> type is used instead of <b>int</b> when the values are known to be non-negative.<p>\r\nThe Turing operators on natural numbers are the same as those for integers: +, -, * (multiply), <b>div</b> (truncating integer division), <b>mod</b> (integer remainder), ** (exponentiation), as well as comparisons (+, <b>not=</b>, &gt;, &gt;=, &lt;, &lt;=). The operators <b>and</b>, <b>or</b> and <b>xor</b> to be applied to natural number values. The bit-wise boolean result is produced as a natural number. The <b>shr</b> (shift right) and <b>shl</b> (shift left) operators are also introduced.</p>\n<p>\r\nIn the current implementation, the range of natural numbers is from 0 to 4294967294. In other words, the maximum value of a natural number is 2**32 - 2. This range exists because natural numbers are stored in 4 bytes. The types <b>nat1</b>, <b>nat2</b> and <b>nat4</b> specify natural numbers that fit into 1, 2 or 4 bytes.</p>\n<p>\r\nExplicit constants such as 213 and 0 are considered to be integers. As a result the type of <i>tax</i> in this declaration is <b>int</b>:</p>\n<p>\r\n</p>\r\nNatural number values can be used whenever integer values are expected and vice versa, given that the value does not exceed the range of the expected type.<p>\r\nWhen integer and natural numbers are combined using a binary operator such as +, the result is an integer. This means, for example, that if <i>counter</i> is a natural number, <i>counter </i>+ 1 is considered to be an integer. As long as the result fits into the range that is the intersection of the ranges of <b>int</b> and <b>nat</b>, the result will be as expected. Anomalies occur when the result is (or would be) greater than the largest integer (<b>maxint</b>=2147483647). For example, if natural number <i>n</i> is greater than <b>maxint</b>, the expression <i>n</i> + 1 will overflow, because its result is an <b>int</b> (because 1 is an <b>int</b>). To avoid this problem, you must be careful that both operands are natural numbers. </p>\n<p>\r\nSuppose we have this declaration:</p>\n<p>\r\n</p>\r\nWe can safely compute <i>n</i> + <i>natOne</i> because both operands have type <b>nat</b>.<p>\r\nNatural numbers can be converted to real numbers using <b>natreal</b>, but in practice this is rarely used, because a natural value used in place of a real value will be automatically converted to real.</p>\n<p>\r\nNatural numbers can be converted to strings and back using <b>natstr</b> and <b>strnat</b>.</p>\n<p>\r\nIn the C language, a natural number is said to be \"unsigned\".</p>\n<p>\r\n</p>",
      "text_content": " See also explicitIntegerConstant. The nat type is used instead of int when the values are known to be non-negative.\r\nThe Turing operators on natural numbers are the same as those for integers: +, -, * (multiply), div (truncating integer division), mod (integer remainder), ** (exponentiation), as well as comparisons (+, not=, >, >=, <, <=). The operators and, or and xor to be applied to natural number values. The bit-wise boolean result is produced as a natural number. The shr (shift right) and shl (shift left) operators are also introduced.\r\nIn the current implementation, the range of natural numbers is from 0 to 4294967294. In other words, the maximum value of a natural number is 2**32 - 2. This range exists because natural numbers are stored in 4 bytes. The types nat1, nat2 and nat4 specify natural numbers that fit into 1, 2 or 4 bytes.\r\nExplicit constants such as 213 and 0 are considered to be integers. As a result the type of tax in this declaration is int:\r\n\r\nNatural number values can be used whenever integer values are expected and vice versa, given that the value does not exceed the range of the expected type.\r\nWhen integer and natural numbers are combined using a binary operator such as +, the result is an integer. This means, for example, that if counter is a natural number, counter + 1 is considered to be an integer. As long as the result fits into the range that is the intersection of the ranges of int and nat, the result will be as expected. Anomalies occur when the result is (or would be) greater than the largest integer (maxint=2147483647). For example, if natural number n is greater than maxint, the expression n + 1 will overflow, because its result is an int (because 1 is an int). To avoid this problem, you must be careful that both operands are natural numbers. \r\nSuppose we have this declaration:\r\n\r\nWe can safely compute n + natOne because both operands have type nat.\r\nNatural numbers can be converted to real numbers using natreal, but in practice this is rarely used, because a natural value used in place of a real value will be automatically converted to real.\r\nNatural numbers can be converted to strings and back using natstr and strnat.\r\nIn the C language, a natural number is said to be \"unsigned\".\r\n",
      "mdown_content": "See also _explicitIntegerConstant_. The **nat** type is used instead of **int** when the values are known to be non-negative.\nThe Turing operators on natural numbers are the same as those for integers: +, -, * (multiply), **div** (truncating integer division), **mod** (integer remainder), ** (exponentiation), as well as comparisons (+, **not=**, >, >=, <, <=). The operators **and**, **or** and **xor** to be applied to natural number values. The bit-wise boolean result is produced as a natural number. The **shr** (shift right) and **shl** (shift left) operators are also introduced.\nIn the current implementation, the range of natural numbers is from 0 to 4294967294. In other words, the maximum value of a natural number is 2**32 - 2. This range exists because natural numbers are stored in 4 bytes. The types **nat1**, **nat2** and **nat4** specify natural numbers that fit into 1, 2 or 4 bytes.\nExplicit constants such as 213 and 0 are considered to be integers. As a result the type of _tax_ in this declaration is **int**:\nNatural number values can be used whenever integer values are expected and vice versa, given that the value does not exceed the range of the expected type.\nWhen integer and natural numbers are combined using a binary operator such as +, the result is an integer. This means, for example, that if _counter_ is a natural number, _counter _+ 1 is considered to be an integer. As long as the result fits into the range that is the intersection of the ranges of **int** and **nat**, the result will be as expected. Anomalies occur when the result is (or would be) greater than the largest integer (**maxint**=2147483647). For example, if natural number _n_ is greater than **maxint**, the expression _n_ + 1 will overflow, because its result is an **int** (because 1 is an **int**). To avoid this problem, you must be careful that both operands are natural numbers. \nSuppose we have this declaration:\nWe can safely compute _n_ + _natOne_ because both operands have type **nat**.\nNatural numbers can be converted to real numbers using **natreal**, but in practice this is rarely used, because a natural value used in place of a real value will be automatically converted to real.\nNatural numbers can be converted to strings and back using **natstr** and **strnat**.\nIn the C language, a natural number is said to be \"unsigned\"."
    },
    {
      "title": "See also",
      "links": [
        "maxnat",
        "int",
        "",
        "int",
        "natstr",
        "strnat",
        "natreal"
      ],
      "raw_content": "<b><a href=\"maxnat.html\">maxnat</a></b>, <b><a href=\"int.html\">int</a></b>, <b><a href=\"\">nat</a></b><i>n</i>, <b><a href=\"int.html\">int</a></b><i>n</i>, <b><a href=\"natstr.html\">natstr</a></b>, <b><a href=\"strnat.html\">strnat</a></b> and <b><a href=\"natreal.html\">natreal</a></b>.<p>\r\n</p>",
      "text_content": " maxnat, int, natn, intn, natstr, strnat and natreal.\r\n",
      "mdown_content": "**[maxnat.html](maxnat)**, **[int.html](int)**, **[](nat)**_n_, **[int.html](int)**_n_, **[natstr.html](natstr)**, **[strnat.html](strnat)** and **[natreal.html](natreal)**."
    }
  ],
  "dependencies": [

  ]
}
