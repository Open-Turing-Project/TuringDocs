#if []
Concurrency <>
Concurrency.empty empty (variableReference) : boolean 
Concurrency.getpriority getpriority : nat 
Concurrency.setpriority setpriority (p : nat) 
Concurrency.simutime simutime : int 
Config <>
Config.Display Config.Display (displayCode : int) : int 
Config.Lang Config.Lang (langCode : int) : int 
Config.Machine Config.Machine (machineCode : int) : int
Cryptography <>
Cryptography.DESSetKey Cryptography.DESSetKey (keyA, keyB : nat4) 
Cryptography.DESEncrypt Cryptography.DESEncrypt (buffer : char (*), numChars : int) 
Cryptography.DESDecrypt Cryptography.DESDecrypt (buffer : char (*), numChars : int)
Cryptography.DES3Set2Key Cryptography.DES3Set2Key (key1A, key1B, key2A, key2B : nat4)
Cryptography.DES3Set3Key Cryptography.DES3Set3Key (key1A, key1B, key2A, key2B, key3A, key3B : nat4)
Cryptography.DES3Encrypt Cryptography.DES3Encrypt (buffer : char (*), numChars : int)
Cryptography.DES3Decrypt Cryptography.DES3Decrypt (buffer : char (*), numChars : int)
Dir <>
Dir.Change Dir.Change (directoryPathName : string) 
Dir.Close Dir.Close (streamNumber : int) 
Dir.Create Dir.Create (directoryPathName : string) 
Dir.Current Dir.Current : string 
Dir.Delete Dir.Delete (directoryPathName : string)
Dir.Exists Dir.Exists (directoryPathName : string) : boolean
Dir.Get Dir.Get (streamNumber : int) : string 
Dir.GetLong Dir.GetLong (streamNumber : int, var entryName : string, var size, attribute, fileTime : int)
Dir.Open Dir.Open (directoryPathName : string) : int 
Draw <>
Draw.Arc Draw.Arc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)
Draw.Box Draw.Box (x1, y1, x2, y2, Color : int) 
Draw.Cls Draw.Cls
Draw.Dot Draw.Dot (x, y, Color : int) 
Draw.DashedLine Draw.DashedLine (x1, y1, x2, y2 : int, style, colourNum : int)
Draw.Fill Draw.Fill (x, y : int, fillColor, borderColor : int) 
Draw.FillArc Draw.FillArc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)
Draw.FillBox Draw.FillBox (x1, y1, x2, y2, Color : int) 
Draw.FillMapleLeaf Draw.FillMapleLeaf (x1, y1, x2, y2, Color : int) 
Draw.FillOval Draw.FillOval (x, y, xRadius, yRadius, Color : int) 
Draw.FillPolygon Draw.FillPolygon (x, y  : array 1 .. * of int, n : int, Color : int)
Draw.FillStar Draw.FillStar (x1, y1, x2, y2, Color : int) 
Draw.Line Draw.Line (x1, y1, x2, y2, Color : int) 
Draw.MapleLeaf Draw.MapleLeaf (x1, y1, x2, y2, Color : int) 
Draw.Oval Draw.Oval (x, y, xRadius, yRadius, Color : int) 
Draw.Polygon Draw.Polygon (x, y  : array 1 .. * of int, n : int, Color : int)
Draw.Star Draw.Star (x1, y1, x2, y2, Color : int) 
Draw.Text Draw.Text (msg : string, x, y, font, Color : int)
Draw.ThickLine Draw.ThickLine (x1, y1, x2, y2 : int, width, colourNum : int)
Error <>
Error.Last Error.Last : int 
Error.LastMsg Error.LastMsg : string
Error.LastStr Error.LastStr : string
Error.Msg Error.Msg (errorCode : int) : string 
Error.Str Error.Str (errorCode : int) : string 
Error.Trip Error.Trip (errorCode : int)
ErrorNum <>
Exceptions <>
File <>
File.Copy File.Copy (srcPathName, destPathName : string) 
File.Delete File.Delete (filePathName : string) 
File.DiskFree File.DiskFree (pathName : string) : int 
File.Exists File.Exists (pathName : string) : boolean
File.FullPath File.FullPath (pathName : string) : string
File.Parent File.Parent (pathName : string) : string
File.Rename File.Rename (srcPathName, destName : string) 
File.Status File.Status (pathName : string, var size, attribute, fileTime : int)
Font <>
Font.Draw Font.Draw (txtStr : string, x, y, fontID, Color : int) : int 
Font.Free Font.Free (fontID : int)
Font.GetName Font.GetName : string
Font.GetSize Font.GetSize : int 
Font.GetStyle Font.GetStyle (fontName : string, var bold, italic, underline : boolean) : string
Font.Name Font.Name (fontID : int) fontName : string
Font.New Font.New (fontSelectStr : string) : int 
Font.Sizes Font.Sizes (fontID : int, var height, ascent, descent, internalLeading : int)
Font.StartName Font.StartName
Font.StartSize Font.StartSize (fontName, fontStyle : string)
Font.Width Font.Width (txtStr : string, fontID : int) : int
GUI <>
GUI.AddLine GUI.AddLine (widgetID : int, text : string)
GUI.AddText GUI.AddText (widgetID : int, text : string)
GUI.Alert GUI.Alert (title, msg : string)
GUI.Alert2 GUI.Alert2 (title, msg1, msg2 : string)
GUI.Alert3 GUI.Alert3 (title, msg1, msg2, msg3 : string)
GUI.AlertFull GUI.AlertFull (title : string, msg : array 1 .. * of string, button : string)
GUI.Choose GUI.Choose (title, msg1, msg2, msg3 : string, btn1, btn2, btn3 : string) : int
GUI.ChooseFull GUI.ChooseFull (title : string, msg : array 1 .. * of string, btn1, btn2, btn3 : string, defaultBtn : int) : int
GUI.ClearText GUI.ClearText (widgetID : int)
GUI.CloseWindow GUI.CloseWindow (window : int)
GUI.CreateButton GUI.CreateButton (x, y, width : int, text : string, actionProc : procedure x ()) : int
GUI.CreateButtonFull GUI.CreateButtonFull (x, y, width : int, text : string, actionProc : procedure x (), height : int, shortcut : char, default : boolean) : int
GUI.CreateCanvas GUI.CreateCanvas (x, y, width, height : int) : int
GUI.CreateCanvasFull GUI.CreateCanvasFull (x, y, width, height : int, border : int, mouseDown : procedure x (mx, my : int), mouseDrag : procedure x (mx, my : int), mouseUp : procedure x (mx, my : int)) : int
GUI.CreateCheckBox GUI.CreateCheckBox (x, y : int, text : string, actionProc : procedure x (filled : boolean)) : int
GUI.CreateCheckBoxFull  GUI.CreateCheckBoxFull (x, y : int, text : string, actionProc : procedure x (filled : boolean), alignment : int, shortcut : char) : int
GUI.CreateFrame GUI.CreateFrame (x1, y1, x2, y2, kind : int) : int
GUI.CreateHorizontalScrollBar GUI.CreateHorizontalScrollBar (x, y, size : int, min, max, start : int, actionProc : procedure x (value : int)) : int
GUI.CreateHorizontalScrollBarFull GUI.CreateHorizontalScrollBarFull (x, y, size : int, min, max, start : int, actionProc : procedure x (value : int), arrowInc, pageInc, thumbSize : int) : int
GUI.CreateHorizontalSlider GUI.CreateHorizontalSlider (x, y, length : int, min, max, start : int, actionProc : procedure x (value : int)) : int
GUI.CreateLabel GUI.CreateLabel (x, y : int, text : string) : int
GUI.CreateLabelFull GUI.CreateLabelFull (x, y : int, text : string, width, height, alignment, fontID : int) : int
GUI.CreateLabelledFrame GUI.CreateLabelledFrame (x1, y1, x2, y2, kind : int, text : string) : int
GUI.CreateLine GUI.CreateLine (x1, y1, x2, y2, kind : int) : int
GUI.CreateMenu GUI.CreateMenu (name : string) : int
GUI.CreateMenuItem GUI.CreateMenuItem (name : string, actionProc : procedure x ()) : int
GUI.CreateMenuItemFull GUI.CreateMenuItemFull (name : string, actionProc : procedure x (), shortCut : char, addNow : boolean) : int
GUI.CreatePicture GUI.CreatePicture (x, y, picture : int, mergePic : boolean) : int
GUI.CreatePictureButton GUI.CreatePictureButton (x, y, picture : int, actionProc : procedure x ()) : int
GUI.CreatePictureButtonFull GUI.CreatePictureButtonFull (x, y, picture : int, actionProc : procedure x (), width, height : int, shortcut : char, mergePic : boolean) : int
GUI.CreatePictureRadioButton GUI.CreatePictureRadioButton (x, y, picture : int, joinID : int, actionProc : procedure x ()) : int
GUI.CreatePictureRadioButtonFull GUI.CreatePictureRadioButtonFull (x, y, picture : int, joinID : int, actionProc : procedure x (), width, height : int, shortcut : char, mergePic : boolean) : int
GUI.CreateRadioButton GUI.CreateRadioButton (x, y : int, text : string, joinID : int, actionProc : procedure x ()) : int
GUI.CreateRadioButtonFull GUI.CreateRadioButtonFull (x, y : int, text : string, joinID : int, actionProc : procedure x (), alignment : int, shortCut : char) : int
GUI.CreateTextBox GUI.CreateTextBox (x, y, width, height : int) : int
GUI.CreateTextBoxFull GUI.CreateTextBoxFull (x, y, width, height : int, border, fontID : int) : int
GUI.CreateTextField GUI.CreateTextField (x, y, width : int, text : string, actionProc : procedure x (text : string)) : int
GUI.CreateTextFieldFull GUI.CreateTextFieldFull (x, y, width : int, text : string, actionProc : procedure x (text : string), border, fontID, inputKind : int) : int
GUI.CreateVerticalScrollBar GUI.CreateVerticalScrollBar (x, y, size : int, min, max, start : int, actionProc : procedure x (value : int)) : int
GUI.CreateVerticalScrollBarFull GUI.CreateVerticalScrollBarFull (x, y, size : int, min, max, start : int, actionProc : procedure x (value : int), arrowInc, pageInc, thumbSize : int) : int
GUI.CreateVerticalSlider GUI.CreateVerticalSlider (x, y, length : int, min, max, start : int, actionProc : procedure x (value : int)) : int
GUI.Disable GUI.Disable (widgetID : int)
GUI.Dispose GUI.Dispose (widgetID : int)
GUI.Draw... []
GUI.Enable GUI.Enable (widgetID : int)
GUI.FontDraw GUI.FontDraw (widgetID : int, textStr : string, x, y, fontID, Color : int)
GUI.GetCheckBox GUI.GetCheckBox (widgetID : int) : boolean
GUI.GetEventTime GUI.GetEventTime : int
GUI.GetEventWidgetID GUI.GetEventWidgetID : int
GUI.GetEventWindow GUI.GetEventWindow : int
GUI.GetHeight GUI.GetHeight (widgetID : int) : int
GUI.GetMenuBarHeight GUI.GetMenuBarHeight : int
GUI.GetScrollBarWidth GUI.GetScrollBarWidth : int
GUI.GetSliderValue GUI.GetSliderValue (widgetID : int) : int
GUI.GetText GUI.GetText (widgetID : int) : string
GUI.GetVersion GUI.GetVersion : int
GUI.GetWidth GUI.GetWidth (widgetID : int) : int
GUI.GetX GUI.GetX (widgetID : int) : int
GUI.GetY GUI.GetY (widgetID : int) : int
GUI.Hide GUI.Hide (widgetID : int)
GUI.HideMenuBar GUI.HideMenuBar
GUI.OpenFile GUI.OpenFile (title : string) : string
GUI.OpenFileFull GUI.OpenFileFull (title, filter : string, startDir : string) : string
GUI.Pic... []
GUI.ProcessEvent GUI.ProcessEvent : boolean
GUI.Quit GUI.Quit
GUI.Refresh GUI.Refresh
GUI.SaveFile GUI.SaveFile (title : string) : string
GUI.SaveFileFull GUI.SaveFileFull (title, filter : string, startDir : string) : string
GUI.SelectRadio GUI.SelectRadio (widgetID : int)
GUI.SetActive GUI.SetActive (widgetID : int)
GUI.SetBackgroundColor GUI.SetBackgroundColor (Color : int)
GUI.SetBackgroundColour  GUI.SetBackgroundColour (Color : int)
GUI.SetCheckBox GUI.SetCheckBox (widgetID : int, status : boolean)
GUI.SetDefault GUI.SetDefault (widgetID : int, default : boolean)
GUI.SetDisplayWhenCreated GUI.SetDisplayWhenCreated (display : boolean)
GUI.SetKeyEventHandler GUI.SetKeyEventHandler (keyEventHandler : procedure x (ch : char))
GUI.SetLabel GUI.SetLabel (widgetID : int, text : string)
GUI.SetMouseEventHandler GUI.SetMouseEventHandler (mouseEventHandler : procedure x (mx, my : int))
GUI.SetNullEventHandler GUI.SetNullEventHandler (nullHandler : procedure x ())
GUI.SetPosition GUI.SetPosition (widgetID, x, y : int)
GUI.SetPositionAndSize GUI.SetPositionAndSize (widgetID, x, y : int, width, height : int)
GUI.SetScrollAmount GUI.SetScrollAmount (widgetID : int, arrowInc, pageInc, thumbSize : int)
GUI.SetSelection GUI.SetSelection (widgetID, fromSel, toSel : int)
GUI.SetSize GUI.SetSize (widgetID, width, height : int)
GUI.SetSliderMinMax GUI.SetSliderMinMax (widgetID, min, max : int)
GUI.SetSliderReverse GUI.SetSliderReverse (widgetID : int)
GUI.SetSliderSize GUI.SetSliderSize (widgetID, length : int)
GUI.SetSliderValue GUI.SetSliderValue (widgetID, value : int)
GUI.SetText GUI.SetText (widgetID : int, text : string)
GUI.SetXOR GUI.SetXOR (widgetID : int, xor : boolean)
GUI.Show GUI.Show (widgetID : int)
GUI.ShowMenuBar GUI.ShowMenuBar
IniFile <>
IniFile.Delete IniFile.Delete (sectionName, propertyName : string)
IniFile.Open IniFile.Open (pathName : string)
IniFile.GetBoolean IniFile.GetBoolean (sectionName, propertyName : string) : boolean
IniFile.GetBooleanArray IniFile.GetBooleanArray (sectionName, propertyName : string, var numValues : int, var values : array 1 .. * of boolean)
IniFile.GetBooleanDefault IniFile.GetBooleanDefault (sectionName, propertyName : string, defaultValue : boolean) : boolean
IniFile.GetInt IniFile.GetInt (sectionName, propertyName : string) : int
IniFile.GetIntArray IniFile.GetIntArray (sectionName, propertyName : string, var numValues : int, var values : array 1 .. * of int)
IniFile.GetIntDefault IniFile.GetIntDefault (sectionName, propertyName : string, defaultValue : int) : int
IniFile.GetProperty IniFile.GetProperty : string
IniFile.GetReal IniFile.GetReal (sectionName, propertyName : string) : real
IniFile.GetRealArray IniFile.GetRealArray (sectionName, propertyName : string, var numValues : int, var values : array 1 .. * of real)
IniFile.GetRealDefault IniFile.GetRealDefault (sectionName, propertyName : string, defaultValue : real) : real
IniFile.GetSection IniFile.GetSection : string
IniFile.GetString IniFile.GetString (sectionName, propertyName : string) : string
IniFile.GetStringArray IniFile.GetStringArray (sectionName, propertyName : string, var numValues : int, var values : array 1 .. * of string)
IniFile.GetStringDefault IniFile.GetStringDefault (sectionName, propertyName, defaultValue : string) : string
IniFile.GetType IniFile.GetType (sectionName, propertyName : string) : string
IniFile.SetBoolean IniFile.SetBoolean (sectionName, propertyName : string, propertyValue : boolean)
IniFile.SetBooleanArray IniFile.SetBooleanArray (sectionName, propertyName : string, numValues : int, propertyValues : array 1 .. * of boolean)
IniFile.SetBufferWrite IniFile.SetBufferWrite (iniBufferWrite : boolean)
IniFile.SetInt IniFile.SetInt (sectionName, propertyName : string, propertyValue : int)
IniFile.SetIntArray IniFile.SetIntArray (sectionName, propertyName : string, numValues : int, propertyValues : array 1 .. * of int)
IniFile.SetReal IniFile.SetReal (sectionName, propertyName : string, propertyValue : real)
IniFile.SetRealArray IniFile.SetRealArray (sectionName, propertyName : string, numValues : int, propertyValues : array 1 .. * of real)
IniFile.SetString IniFile.SetString (sectionName, propertyName, propertyValue : string)
IniFile.SetStringArray IniFile.SetStringArray (sectionName, propertyName : string, numValues : int, propertyValues : array 1 .. * of string)
IniFile.StartProperty IniFile.StartProperty (sectionName : string)
IniFile.StartSection IniFile.StartSection
Input <>
Input.Flush Input.Flush
Input.KeyDown Input.KeyDown (var chars : array char of boolean)
Input.Pause Input.Pause
Input.getch getch (var ch : string (1)) 
Input.getchar getchar : char 
Input.hasch hasch : boolean 
Joystick <>
Joystick.GetInfo Joystick.GetInfo (joystick : int, var xPos, yPos : int, btn1Pressed, btn2Pressed : boolean)
Keyboard <>
Limits <>
Math <>
Math.Distance Math.Distance (x1, y1, x2, y2 : real) : real
Math.DistancePointLine Math.Distance (px, py : real, x1, y1, x2, y2 : real) : real
Math.E Math.E
Math.PI Math.PI
Mouse <>
Mouse.ButtonChoose Mouse.ButtonChoose (choice : string) 
Mouse.ButtonMoved Mouse.ButtonMoved (motion : string) : boolean 
Mouse.ButtonWait Mouse.ButtonWait (motion : string, var x, y, buttonNumber, buttonUpDown : int)
Mouse.Hide Mouse.Hide
Mouse.Show Mouse.Show
Mouse.Where Mouse.Where (var x, y, button : int) 
Music <>
Music.Play Music.Play (music : string) 
Music.PlayFile Music.PlayFile (fileName : string) 
Music.PlayFileLoop Music.PlayFileLoop (fileName : string) 
Music.PlayFileReturn Music.PlayFileReturn (fileName : string) 
Music.PlayFileStop Music.PlayFileStop
Music.Sound Music.Sound (frequency, duration : int) 
Music.SoundOff Music.SoundOff 
Net <>
Net.BytesAvailable Net.BytesAvailable (netStream : int) : int
Net.CharAvailable Net.CharAvailable (netStream : int) : boolean
Net.CloseConnection Net.CloseConnection (netStream : int)
Net.ConnectionStatus Net.ConnectionStatus (netStream : int) : int
Net.DeleteCookie Net.DeleteCookie (url, cookieName : string)
Net.GetCookie Net.GetCookie (url, cookieName : string) : string
Net.GetCookies Net.GetCookies (url : string, name : array 1 .. * of string, values : array 1 .. * of string)
Net.HostAddressFromName Net.HostAddressFromName (hostName : string) : string
Net.HostNameFromAddress Net.HostNameFromAddress (hostAddr : string) : string
Net.LineAvailable Net.LineAvailable (netStream : int) : boolean
Net.LocalAddress Net.LocalAddress : string
Net.LocalName Net.LocalName : string
Net.OpenConnection Net.OpenConnection (netAddr : string, port : int) : int
Net.OpenURLConnection Net.OpenURLConnection (urlAddr : string) : int
Net.SetCookie Net.SetCookie (url, cookieName, cookieValue : string, expiryDate : int)
Net.TokenAvailable Net.TokenAvailable (netStream : int) : boolean
Net.WaitForConnection Net.WaitForConnection (port : int, var netAddr : string) : int
PC <>
PC.ParallelGet PC.ParallelGet (port : int) : nat1
PC.ParallelPut PC.ParallelPut (port : int, value : int)
Pic <>
Pic.Blend Pic.Blend (picID1, picID2, percent : int) : int
Pic.Blur Pic.Blur (picId, blurFactor : int) : int
Pic.Draw Pic.Draw (picID, x, y, mode : int) 
Pic.DrawFrames Pic.DrawFrames (picIDs : array 1 .. * of int, x, y, mode : int, numFrames, delayBetweenFrames : int, eraseAfter : boolean)
Pic.DrawFramesBack Pic.DrawFramesBack (picIDs : array 1 .. * of int, x, y, mode : int, numFrames, delayBetweenFrames : int, eraseAfter : boolean)
Pic.DrawSpecial Pic.DrawSpecial (picID, x, y, mode, transition, duration : int)
Pic.DrawSpecialBack Pic.DrawSpecialBack (picID, x, y, mode, transition, duration : int)
Pic.FileNew Pic.FileNew (fileName : string) : int 
Pic.FileNewFrames Pic.FileNewFrames (fileName : string, var picIDs : array 1 .. * of int, var delayTime : int) : int 
Pic.Flip Pic.Flip (picID : int) : int
Pic.Free Pic.Free (picID : int) 
Pic.Height Pic.Height (picID : int) : int 
Pic.Mirror Pic.Mirror (picID : int) : int
Pic.New Pic.New (x1, y1, x2, y2 : int) : int 
Pic.Rotate Pic.Rotate (picID, angle, x, y : int) : int
Pic.Save Pic.Save (picID : int, fileName : string) 
Pic.Scale Pic.Scale (picID, newWidth, newHeight : int) : int
Pic.ScreenLoad Pic.ScreenLoad (fileName : string, x, y, mode : int) 
Pic.ScreenSave Pic.ScreenSave (x1, y1, x2, y2 : int, fileName : string)
Pic.SetTransparentColor (picID : int, colorNumber : int)
Pic.SetTransparentColour (picID : int, colourNumber : int)
Pic.Width Pic.Width (picID : int) : int 
RGB <>
RGB.AddColor RGB.AddColor (redComp, greenComp, blueComp : real) : int 
RGB.AddColour RGB.AddColour (redComp, greenComp, blueComp : real) : int 
RGB.GetColor RGB.GetColor (colorNumber : int, var redComp, greenComp, blueComp : real)
RGB.GetColour RGB.GetColour (colorNumber : int, var redComp, greenComp, blueComp : real)
RGB.SetColor RGB.SetColor (colorNumber: int, redComp, greenComp, blueComp : real)
RGB.SetColour RGB.SetColour (colorNumber: int, redComp, greenComp, blueComp : real)
RGB.maxcolor maxcolor : int
RGB.maxcolour maxcolour : int
Rand <>
Rand.Int Rand.Int (low, high : int) : int 
Rand.Next Rand.Next (var v : real, seq : 1 .. 10) 
Rand.Real Rand.Real : real 
Rand.Reset Rand.Reset
Rand.Seed Rand.Seed (seed : int, seq : 1 .. 10) 
Rand.Set Rand.Set (seed : nat4) 
Sprite <>
Sprite.Animate Sprite.Animate (spriteID, picID, x, y : int, centered : int)
Sprite.ChangePic Sprite.ChangePic (spriteID, picID : int)
Sprite.Free Sprite.Free (spriteID : int)
Sprite.Hide Sprite.Hide (spriteID : int)
Sprite.New Sprite.New (picID : int) : int
Sprite.SetFrameRate Sprite.SetFrameRate (framesPerSecond : int)
Sprite.SetHeight Sprite.SetHeight (spriteID, newHeight : int)
Sprite.SetPosition Sprite.SetPosition (spriteID, x, y : int, centered : boolean)
Sprite.Show Sprite.Show (spriteID : int)
Str <>
Str.Center Str.Center (s : string, len : int) : string
Str.Centre Str.Centre (s : string, len : int) : string
Str.CharArrayCopy Str.CharArrayCopy (srcChars : char (*), srcArrayPos : int, destChars : char (*), destArrayPos : int, numCharsToCopy : int)
Str.EndsWith Str.EndsWith (str, searchStr : string) : boolean
Str.Left Str.Left (s : string, len : int) : string
Str.Lower Str.Lower (s : string) : string
Str.Pad Str.Pad (s : string, len : int) : string
Str.ReadLineFromCharArray Str.ReadLineFromCharArray (chars : char (*), numChars : int, var line : string, var arrayPos : int)
Str.Right Str.Right (s : string, len : int) : string
Str.StartsWith Str.StartsWith (str, searchStr : string) : boolean
Str.Trim Str.Trim (s : string) : string
Str.Upper Str.Upper (s : string) : string
Str.WriteLineToCharArray Str.WriteLineToCharArray (chars : char (*), line : string, var arrayPos : int)
Str.WriteToCharArray Str.WriteToCharArray (chars : char (*), line : string, var arrayPos : int)
Stream <>
Stream.Flush Stream.Flush (streamNumber : int) 
Stream.FlushAll Stream.FlushAll 
Stream.eof eof (streamNumber : int) 
Sys <>
Sys.Exec Sys.Exec (command : string) : boolean 
Sys.Exit Sys.Exit
Sys.FetchArg System.FetchArg (i : int) : string
Sys.GetComputerName Sys.GetComputerName : string
Sys.GetEnv Sys.GetEnv (symbol : string) : string 
Sys.GetPid Sys.GetPid : int 
Sys.GetUserName Sys.GetUserName : string 
Sys.Nargs Sys.Nargs : int 
Text <>
Text.Cls Text.Cls 
Text.Color Text.Color (Color : int) 
Text.ColorBack Text.ColorBack (Color : int) 
Text.Colour Text.Colour (Color : int) 
Text.ColourBack Text.ColourBack (Color : int) 
Text.Locate Text.Locate (row, column : int) 
Text.LocateXY Text.LocateXY (x , y : int) 
Text.WhatCol Text.WhatCol : int 
Text.WhatColor Text.WhatColor : int 
Text.WhatColorBack Text.WhatColorBack : int 
Text.WhatColour Text.WhatColour : int 
Text.WhatColourBack Text.WhatColourBack : int 
Text.WhatRow Text.WhatRow : int 
Text.maxcol maxcol : int 
Text.maxrow maxrow : int 
Time <>
Time.Date Time.Date : string 
Time.DateSec Time.DateSec (dateString : string) : int 
Time.Delay Time.Delay (duration : int) 
Time.DelaySinceLast Time.DelaySinceLast (duration : int) 
Time.Elapsed Time.Elapsed : int 
Time.ElapsedCPU Time.ElapsedCPU : int 
Time.PartsSec Time.PartsSec (year, month, day, hour, minute, second : int) : int
Time.Sec Time.Sec : int 
Time.SecDate Time.SecDate (timeInSecs : int) : string 
Time.SecParts Time.SecParts (sec : int, var year, month, day, dayOfWeek, hour, minute, second : int)
Time.SecStr Time.SecStr (timeInSecs : int, formatString : string) : string
TypeConv <>
View <>
View.ClipAdd View.ClipAdd (x1, y1, x2, y2 : int) 
View.ClipAddOval View.ClipAddOval (x, y, xRadius, yRadius : int) 
View.ClipOff View.ClipOff
View.ClipSet View.ClipSet (x1, y1, x2, y2 : int)
View.Set View.Set (s : string)
View.SetTransparentColor View.SetTransparentColor (colorNumber : int) 
View.SetTransparentColour View.SetTransparentColour (colourNumber : int) 
View.Update View.Update
View.UpdateArea View.UpdateArea (x1, y1, x2, y2 : int)
View.WhatDotColor View.WhatDotColor (x, y : int) : int 
View.WhatDotColour View.WhatDotColour (x, y : int) : int 
View.maxcolor maxcolor : int 
View.maxcolour maxcolor : int 
View.maxx maxx : int 
View.maxy maxy : int 
Window <>
Window.Close Window.Close (windowID : string) 
Window.GetActive Window.GetActive : int 
Window.GetPosition Window.GetPosition (windowID : int, var x, y : int)
Window.GetSelect Window.GetSelect : int 
Window.Hide Window.Hide (windowID : int) 
Window.Open Window.Open (setUpString : string) : int 
Window.Select Window.Select (windowID : int) 
Window.Set Window.Set (windowID : int, setUpString : string) 
Window.SetActive Window.SetActive (windowID)
Window.SetPosition Window.SetPosition (windowID : int, x, y : int)
Window.Show Window.Show (windowID : int)
Window.Update Window.Update (windowID : int)
Window.UpdateArea Window.UpdateArea (windowID : int, x1, y1, x2, y2 : int) 
abs abs (r : real) : real  or  abs (i : int) : int 
addr addr (reference) 
addressint [] 
all setTypeName (all) 
and A and B 
anyclass []
arccos arccos (r : real) : real 
arccosd arccosd (r : real) : real 
arcsin arcsin (r : real) : real 
arcsind arcsind (r : real) : real 
arctan arctan (r : real) : real 
arctand arctand (r : real) : real 
array array indexType { , indexType } of typeSpec 
assert assert trueFalseExpn 
assignability []
assignment []
begin []
bind []
bits bits (expn, subrange) 
body []
boolean []
break break
buttonchoose buttonchoose (choice : string) 
buttonmoved buttonmoved (motion : string) : boolean 
buttonwait buttonwait (motion : string, var x, y, buttonnumber, buttonupdown : int)
case []
ceil ceil (r : real) : int 
char []
char(n) []
cheat []
checked []
chr chr (i : int) : char 
class []
clock clock (var c : int) 
close close : fileNumber 
cls cls 
collection []
color color (Color : int) 
colorback colorback (Color : int) 
colour colour (Color : int) 
colourback colourback (Color : int) 
comment []
comparisonOperator []
condition []
const const id [ : typeSpec ] := initializingValue 
constantReference []
cos cos (r : real) : real 
cosd cosd (r : real) : real 
date date (var d : string) 
declaration []
deferred deferred subprogramHeader 
delay delay (duration : int) 
div div 
drawarc drawarc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)
drawbox drawbox (x1, y1, x2, y2, Color : int) 
drawdot drawdot (x, y, Color : int) 
drawfill drawfill (x, y : int, fillColor, borderColor : int) 
drawfillarc drawfillarc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)
drawfillbox drawfillbox (x1, y1, x2, y2, Color : int) 
drawfillmapleleaf drawfillmapleleaf (x1, y1, x2, y2, Color : int) 
drawfilloval drawfilloval (x, y, xRadius, yRadius, Color : int) 
drawfillpolygon drawfillpolygon (x, y  : array 1 .. * of int, n : int, Color : int)
drawfillstar drawfillstar (x1, y1, x2, y2, Color : int) 
drawline drawline (x1, y1, x2, y2, Color : int) 
drawmapleleaf drawmapleleaf (x1, y1, x2, y2, Color : int) 
drawoval drawoval (x, y, xRadius, yRadius, Color : int) 
drawpic drawpic (x, y : int, buffer : array 1 .. * of int, picmode : int)
drawpolygon drawpolygon (x, y : array 1 .. * of int, n : int, Color : int) 
drawstar drawstar (x1, y1, x2, y2, Color : int) 
empty empty (variableReference) : boolean 
enum enum (id { , id }) 
enumeratedValue []
eof eof (streamNumber : int) 
equivalence []
erealstr erealstr (r : real, width, fractionWidth, exponentWidth : int) :string
exit exit
exp exp (r : real) : real 
explicitCharConstant []
explicitConstant []
explicitIntegerConstant []
explicitRealConstant []
explicitStringConstant []
explicitTrueFalseConstant []
expn []
export export [ howExport ] id {, [ howExport ] id } 
external []
false false 
fetcharg fetcharg (i : int) : string 
flexible []
floor floor (r : real) : int 
for []
fork []
forward []
frealstr frealstr (r : real, width, fractionWidth : int) : string 
free free [ collectionOrClassId, ] pointerVariableReference 
function []
functionCall []
get get [ : streamNumber , ] getItem { , getItem } 
getch getch (var ch : string (1)) 
getchar getchar : char 
getenv getenv (symbol : string) : string 
getpid getpid : int 
getpriority getpriority : nat 
handler []
hasch hasch : boolean 
id []
if []
implement implement implementItem 
import []
in in 
include include fileName 
index index (s , patt : string) : int 
indexType []
indirection []
infix []
inherit inherit inheritItem 
init []
int [] 
intn []
intreal intreal (i : int) : real 
intstr intstr (i : int [ , width : int [ , base : int ] ]) : string 
invariant invariant trueFalseExpn 
length length (s : string) : int 
ln ln (r : real) : real 
locate locate (row, column : int) 
locatexy locatexy (x , y : int) 
loop []
lower lower (reference [ , dimension ]) : int 
max max (expn , expn) 
maxcol maxcol : int 
maxcolor maxcolor : int 
maxcolour maxcolour : int 
maxint maxint : int 
maxnat maxnat : int 
maxrow maxrow : int 
maxx maxx : int 
maxy maxy : int 
min min (expn , expn) 
minint minint : int 
minnat minnat : int 
mod A mod B
module []
monitor []
mousehide mousehide
mouseshow mouseshow
mousewhere mousewhere (var x, y, button : int) 
named []
nargs nargs : int 
nat []
natn []
natreal natreal (n : nat) : real 
natstr natstr (n : nat [ , width : int [, base : int ] ]) : string 
new new [ collectionOrClassId , ] pointerVariableReference 
nil nil [ (collectionOrClassId) ] 
not not 
objectclass objectclass (pointerExpn) 
opaque []
open []
or A or B 
ord ord (ch : char) : int 
parallelget parallelget : int 
parallelput parallelput (p : int) 
paramDeclaration []
pause pause expn 
pervasive []
play play (music : string) 
playdone playdone : boolean 
pointer []
post post trueFalseExpn 
pre pre trueFalseExpn 
precedence []
pred pred (expn) 
prefix []
procedure []
procedureCall []
process []
program []
put put [ : fileNumber , ] putItem { , putItem } [ .. ] 
quit quit [ guiltyParty ] [ : quitReason ] 
rand rand (var r : real) 
randint randint (var i : int, low, high : int) 
randnext randnext (var v : real, seq : 1 .. 10) 
randomize randomize 
randseed randseed (seed : int, seq : 1 .. 10) 
read read : fileNumber [ : status ] , readItem { ,readItem } 
real []
realn []
realstr realstr (r : real, width : int) : string 
record []
register []
rem A rem B
repeat repeat (s : string, i : int) : string 
result result expn 
return return 
round round (r : real) : int 
scalar []
seek []
self self 
separator []
set set of typeSpec 
setConstructor []
setpriority setpriority (p : nat) 
setscreen setscreen (s : string) 
shl A shl B 
shr A shr B 
sign sign (r : real) : -1 .. 1 
signal signal variableReference 
simutime simutime : int 
sin sin (r : real) : real 
sind sind (r : real) : real 
sizeof sizeof (typeNameOrVariableReference) 
sizepic sizepic (x1, y1, x2, y2 : int) : int 
skip skip 
skip skip 
sound sound (frequency, duration : int) 
sqrt sqrt (r : real) : real 
standardType []
statement []
statementsAndDeclarations []
string []
string []
strint strint (s : string [ , base : int ]) : int 
strintok strintok (s : string [ , base : int ]) : boolean 
strnat strnat (s : string [ , base : int ]) : nat 
strnatok strnatok (s : string [ , base : int ]) : boolean 
strreal strreal (s : string) : real 
strrealok strrealok (s : string) : boolean 
subprogramHeader []
subprogramType []
subrangeType []
substring []
succ succ (expn) 
sysclock sysclock (var c : int) 
system system (command : string, var ret : int) 
tag tag unionVariableReference , expn 
takepic takepic (x1, y1, x2, y2 : int, var buffer : array 1 .. * of int)
tan tan (r : real) : real 
tand tand (r : real) : real 
tell tell : fileNumber , filePositionVar 
time time (var t : string) 
token []
true true 
type []
typeSpec []
unchecked []
union []
unit []
unqualified []
upper upper (reference [ , dimension ]) : int 
var []
variableReference []
wait wait variableReference [ , expn ] 
wallclock wallclock (var c : int) 
whatcol whatcol : int 
whatcolor whatcolor : int 
whatcolorback whatcolorback : int 
whatcolour whatcolour : int 
whatcolourback whatcolourback : int 
whatdotcolor whatdotcolor (x, y : int) : int 
whatdotcolour whatdotcolour (x, y : int) : int 
whatrow whatrow : int 
write write : fileNumber [:status ], writeItem {, writeItem} 
xor A xor B 
